/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI67953 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67968 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67943 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64857 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI67490 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI67502 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI67492 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI67527 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67430 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI67431 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI67460 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64018 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64505 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64520 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64503 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI65108 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64041 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64010 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64072 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI67107 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI66635 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64004 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64055 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64063 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI65635 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64228 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64263 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64190 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64213 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI64128 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64175 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI40402 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI40602 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI40602 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI40402, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI40402, name: "a1", sons: null}]};
NTI40602.node = NNI40602;
NTI64128.base = NTI130;
NTI64175.base = NTI64128;
NTI64190.base = NTI130;
NTI64213.base = NTI64190;
NTI64228.base = NTI130;
NTI64263.base = NTI64228;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI64004 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI64004, name: "dfColor", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64004, name: "iColor", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64004, name: "oColor", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI64004, name: "sColor", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI64004, name: "zColor", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI64004, name: "jColor", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI64004, name: "lColor", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI64004, name: "tColor", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI64004, name: "gColor", len: 0, sons: null}}};
NTI64004.node = NNI64004;
var NNI64055 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "isFilled", len: 0, typ: NTI130, name: "isFilled", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}]};
NTI64055.node = NNI64055;
NTI64016.base = NTI64055;
NTI64063.base = NTI64016;
NTI65635.base = NTI64063;
NTI66635.base = NTI64016;
NTI67107.base = NTI64016;
NTI64042.base = NTI130;
NTI64041.base = NTI64042;
var NNI64014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI64014.node = NNI64014;
var NNI64040 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "shape", len: 0, typ: NTI64041, name: "shape", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}, 
{kind: 1, offset: "firstPos", len: 0, typ: NTI64014, name: "firstPos", sons: null}]};
NTI64040.node = NNI64040;
NTI64010.base = NTI64040;
NTI64072.base = NTI64010;
NTI65108.base = NTI64010;
NTI64059.base = NTI64016;
NTI64503.base = NTI64059;
NTI64520.base = NTI64016;
NTI64505.base = NTI64016;
NTI64018.base = NTI64059;
NTI67460.base = NTI64010;
NTI67430.base = NTI64016;
NTI67431.base = NTI67430;
var NNI67490 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI67490, name: "bNon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI67490, name: "bA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI67490, name: "bB", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI67490, name: "bHd", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI67490, name: "bUp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI67490, name: "bDwn", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI67490, name: "bRgt", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI67490, name: "bLft", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI67490, name: "bHld", len: 0, sons: null}}};
NTI67490.node = NNI67490;
var NNI67502 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI67490, name: "kind", sons: null}, 
{kind: 1, offset: "isPushed", len: 0, typ: NTI130, name: "isPushed", sons: null}, 
{kind: 1, offset: "contFlames", len: 0, typ: NTI104, name: "contFlames", sons: null}]};
NTI67502.node = NNI67502;
NTI67492.base = NTI67502;
NTI67527.base = NTI67492;
var NNI64857 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI64857.node = NNI64857;
NTI64020.base = NTI64063;
NTI67943.base = NTI64059;
NTI67968.base = NTI64016;
NTI67953.base = NTI64016;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function divInt(a_18403, b_18404) {
		      if (b_18404 == 0) raiseDivByZero();
      if (b_18404 == -1 && a_18403 == 2147483647) raiseOverflow();
      return Math.trunc(a_18403 / b_18404);
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var state_40605 = [{a0: 1773455756, a1: 4275166512}];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function getTime_58433() {
	var result_62003 = 0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1307;
		result_62003 = divInt(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62003;

}
var startMilsecs_62405 = [getTime_58433()];

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function epochTime_62006() {
	var result_62008 = 0.0;

	var F={procname:"times.epochTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1310;
		result_62008 = slash__22207(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62008;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function rotl_40802(x_40804, k_40805) {
	var result_40806 = 0;

	var F={procname:"random.rotl",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_40806 = ((x_40804 << k_40805) | ((x_40804 >>> 0) >>> ((64 - k_40805) >>> 0)));
	framePtr = F.prev;

	return result_40806;

}

function next_40842(r_40845) {
	var result_40846 = 0;

	var F={procname:"random.next",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 50;
		var s0_40847 = r_40845.a0;
		F.line = 51;
		var s1_40848 = r_40845.a1;
		F.line = 52;
		result_40846 = ((s0_40847 + s1_40848) >>> 0);
		F.line = 53;
		s1_40848 = (s1_40848 ^ s0_40847);
		F.line = 54;
		r_40845.a0 = ((rotl_40802(s0_40847, 55) ^ s1_40848) ^ (s1_40848 << 14));
		F.line = 55;
		r_40845.a1 = rotl_40802(s1_40848, 36);
	framePtr = F.prev;

	return result_40846;

}

function initRand_41465(seed_41467) {
	var result_41468 = [{a0: 0, a1: 0}];

	var F={procname:"random.initRand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 169;
		result_41468[0].a0 = chckRange(((seed_41467 ) >>> 16), 0, 4294967295);
		F.line = 170;
		result_41468[0].a1 = chckRange((seed_41467 & 65535), 0, 4294967295);
		F.line = 171;
		next_40842(result_41468[0]);
	framePtr = F.prev;

	return result_41468[0];

}

function randomize_41479(seed_41481) {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 176;
		nimCopy(state_40605[0], initRand_41465(seed_41481), NTI40602);
	framePtr = F.prev;

	
}

function randomize_63001() {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 194;
		var time_63005 = (epochTime_62006() * 1.0000000000000000e+009);
		F.line = 195;
		randomize_41479(time_63005);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function posVerify_64709(m_64712, m_64712_Idx, board_64713) {
	var result_64714 = false;

	var F={procname:"tetris.posVerify",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 155;
			var i_64747 = 0;
			F.line = 155;
			var bs_64748 = null;
			F.line = 2283;
			var colontmp__64792 = null;
			F.line = 155;
			colontmp__64792 = m_64712[m_64712_Idx].boxs;
			F.line = 2285;
			var i_64795 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_64795 < (colontmp__64792 != null ? colontmp__64792.length : 0))) break L3;
						F.line = 2287;
						i_64747 = i_64795;
						F.line = 2287;
						bs_64748 = colontmp__64792[chckIndx(i_64795, 0, colontmp__64792.length+0-1)-0];
						L4: do {
							F.line = 156;
							var j_64781 = 0;
							F.line = 156;
							var b_64782 = null;
							F.line = 2285;
							var i_64791 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_64791 < (bs_64748 != null ? bs_64748.length : 0))) break L6;
										F.line = 2287;
										j_64781 = i_64791;
										F.line = 2287;
										b_64782 = bs_64748[chckIndx(i_64791, 0, bs_64748.length+0-1)-0];
										if (b_64782.isFilled) {
										F.line = 159;
										var xp_64783 = addInt(m_64712[m_64712_Idx].pos.Field0, i_64747);
										F.line = 160;
										var yp_64784 = addInt(m_64712[m_64712_Idx].pos.Field1, j_64781);
										if (((((xp_64783 < 0) || (21 <= xp_64783)) || (yp_64784 <= 0)) || (11 <= yp_64784))) {
										F.line = 163;
										result_64714 = false;
										break BeforeRet;
										}
										
										if (board_64713[chckIndx(xp_64783, 0, board_64713.length+0-1)-0][chckIndx(yp_64784, 0, board_64713[chckIndx(xp_64783, 0, board_64713.length+0-1)-0].length+0-1)-0].isFilled) {
										F.line = 165;
										result_64714 = false;
										break BeforeRet;
										}
										
										}
										
										F.line = 2288;
										i_64791 = addInt(i_64791, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_64795 = addInt(i_64795, 1);
					}
			} while(false);
		} while(false);
		F.line = 166;
		result_64714 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64714;

}

function move_64874(m_64877, m_64877_Idx, board_64878, d_64879) {
	var result_64880 = false;

	var F={procname:"tetris.move",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 203;
		switch (d_64879) {
		case 2:
			F.line = 205;
			m_64877[m_64877_Idx].pos.Field1 = addInt(m_64877[m_64877_Idx].pos.Field1, 1);
			if (!(posVerify_64709(m_64877, m_64877_Idx, board_64878))) {
			F.line = 207;
			m_64877[m_64877_Idx].pos.Field1 = subInt(m_64877[m_64877_Idx].pos.Field1, 1);
			F.line = 208;
			result_64880 = false;
			break BeforeRet;
			}
			
			break;
		case 3:
			F.line = 210;
			m_64877[m_64877_Idx].pos.Field1 = subInt(m_64877[m_64877_Idx].pos.Field1, 1);
			if (!(posVerify_64709(m_64877, m_64877_Idx, board_64878))) {
			F.line = 212;
			m_64877[m_64877_Idx].pos.Field1 = addInt(m_64877[m_64877_Idx].pos.Field1, 1);
			F.line = 213;
			result_64880 = false;
			break BeforeRet;
			}
			
			break;
		case 1:
			F.line = 215;
			m_64877[m_64877_Idx].pos.Field0 = addInt(m_64877[m_64877_Idx].pos.Field0, 1);
			if (!(posVerify_64709(m_64877, m_64877_Idx, board_64878))) {
			F.line = 217;
			m_64877[m_64877_Idx].pos.Field0 = subInt(m_64877[m_64877_Idx].pos.Field0, 1);
			F.line = 218;
			result_64880 = false;
			break BeforeRet;
			}
			
			break;
		case 0:
			F.line = 220;
			result_64880 = false;
			break BeforeRet;
			break;
		}
		F.line = 221;
		result_64880 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64880;

}

function newSeq_65630(len_65634) {
	var result_65636 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_65636 = new Array(len_65634); for (var i=0;i<len_65634;++i) {result_65636[i]=[null, null, null, null, null, null, null, null, null, null, null, null];}	framePtr = F.prev;

	return result_65636;

}

function X5BX5D__65235(a_65243, x_65246) {
	var result_65248 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_65401 = x_65246.a;
		F.line = 3585;
		var L_65628 = addInt(subInt(subInt(22, x_65246.b), xa_65401), 1);
		F.line = 3586;
		result_65248 = nimCopy(null, newSeq_65630(chckRange(L_65628, 0, 2147483647)), NTI65635);
		L1: do {
			F.line = 3587;
			var i_65655 = 0;
			F.line = 3519;
			var i_65667 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65667 < L_65628)) break L3;
						F.line = 3521;
						i_65655 = i_65667;
						F.line = 3587;
						nimCopy(result_65248[chckIndx(i_65655, 0, result_65248.length+0-1)-0], a_65243[chckIndx(addInt(i_65655, xa_65401), 0, a_65243.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_65667 = addInt(i_65667, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65248;

}

function dotdot__51023(a_51028, b_51030) {
	var result_51038 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_51038.a = a_51028;
		F.line = 326;
		result_51038.b = b_51030;
	framePtr = F.prev;

	return result_51038;

}

function all_65712(s_65717, pred_65722) {
	var result_65723 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_65748 = null;
			F.line = 2185;
			var i_65752 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_65752 < (s_65717 != null ? s_65717.length : 0))) break L3;
						F.line = 2187;
						i_65748 = s_65717[chckIndx(i_65752, 0, s_65717.length+0-1)-0];
						if (!(pred_65722(i_65748))) {
						F.line = 436;
						result_65723 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_65752 = addInt(i_65752, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_65723 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65723;

}

function X5BX5D__65842(a_65850, x_65853) {
	var result_65855 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66001 = x_65853.a;
		F.line = 3585;
		var L_66201 = addInt(subInt(x_65853.b, xa_66001), 1);
		F.line = 3586;
		result_65855 = nimCopy(null, newSeq_65630(chckRange(L_66201, 0, 2147483647)), NTI65635);
		L1: do {
			F.line = 3587;
			var i_66217 = 0;
			F.line = 3519;
			var i_66229 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66229 < L_66201)) break L3;
						F.line = 3521;
						i_66217 = i_66229;
						F.line = 3587;
						nimCopy(result_65855[chckIndx(i_66217, 0, result_65855.length+0-1)-0], a_65850[chckIndx(addInt(i_66217, xa_66001), 0, a_65850.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_66229 = addInt(i_66229, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65855;

}

function dotdot__50107(a_50112, b_50114) {
	var result_50116 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_50116.a = a_50112;
		F.line = 326;
		result_50116.b = b_50114;
	framePtr = F.prev;

	return result_50116;

}

function sysFatal_67047(message_67053) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_67055 = null;
		F.line = 2831;
		e_67055 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_67055.message = nimCopy(null, message_67053, NTI138);
		F.line = 2833;
		raiseException(e_67055, "RangeError");
	framePtr = F.prev;

	
}

function X5BX5Deq__66673(a_66682, x_66685, b_66688) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3591;
		var xa_66801 = x_66685.a;
		F.line = 3592;
		var L_67028 = addInt(subInt(subInt(12, x_66685.b), xa_66801), 1);
		if ((L_67028 == (b_66688 != null ? b_66688.length : 0))) {
		L1: do {
			F.line = 3594;
			var i_67043 = 0;
			F.line = 3519;
			var i_67069 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67069 < L_67028)) break L3;
						F.line = 3521;
						i_67043 = i_67069;
						F.line = 3594;
						a_66682[chckIndx(addInt(i_67043, xa_66801), 0, a_66682.length+0-1)-0] = b_66688[chckIndx(i_67043, 0, b_66688.length+0-1)-0];
						F.line = 3522;
						i_67069 = addInt(i_67069, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 3596;
		sysFatal_67047(makeNimstrLit("different lengths for slice assignment"));
		}
		
	framePtr = F.prev;

	
}

function newSeq_66630(len_66634) {
	var result_66636 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_66636 = new Array(len_66634); for (var i=0;i<len_66634;++i) {result_66636[i]=null;}	framePtr = F.prev;

	return result_66636;

}

function X5BX5D__66298(a_66306, x_66309) {
	var result_66311 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66401 = x_66309.a;
		F.line = 3585;
		var L_66628 = addInt(subInt(subInt(12, x_66309.b), xa_66401), 1);
		F.line = 3586;
		result_66311 = nimCopy(null, newSeq_66630(chckRange(L_66628, 0, 2147483647)), NTI66635);
		L1: do {
			F.line = 3587;
			var i_66655 = 0;
			F.line = 3519;
			var i_66667 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66667 < L_66628)) break L3;
						F.line = 3521;
						i_66655 = i_66667;
						F.line = 3587;
						result_66311[chckIndx(i_66655, 0, result_66311.length+0-1)-0] = a_66306[chckIndx(addInt(i_66655, xa_66401), 0, a_66306.length+0-1)-0];
						F.line = 3522;
						i_66667 = addInt(i_66667, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_66311;

}

function lineCheck_65197(f_65200, f_65200_Idx) {

							function colonanonymous__65704(b_65706) {
								var result_65707 = false;

								var F={procname:"lineCheck.:anonymous",prev:framePtr,filename:"tetris_library.nim",line:0};
								framePtr = F;
								BeforeRet: do {
									F.line = 299;
									result_65707 = b_65706.isFilled;
									break BeforeRet;
								} while (false);
								framePtr = F.prev;

								return result_65707;

							}

	var result_65201 = 0;

	var F={procname:"tetris.lineCheck",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 297;
		result_65201 = 0;
		L1: do {
			F.line = 298;
			var i_65701 = 0;
			F.line = 298;
			var line_65702 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2283;
			var colontmp__67178 = null;
			F.line = 298;
			colontmp__67178 = X5BX5D__65235(f_65200[f_65200_Idx].board, dotdot__51023(0, 2));
			F.line = 2285;
			var i_67181 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67181 < (colontmp__67178 != null ? colontmp__67178.length : 0))) break L3;
						F.line = 2287;
						i_65701 = i_67181;
						F.line = 2287;
						nimCopy(line_65702, colontmp__67178[chckIndx(i_67181, 0, colontmp__67178.length+0-1)-0], NTI64063);
						if (all_65712(line_65702, colonanonymous__65704)) {
						F.line = 300;
						result_65201 = addInt(result_65201, 1);
						L4: do {
							F.line = 301;
							var t_66244 = 0;
							F.line = 301;
							var line_66245 = [null, null, null, null, null, null, null, null, null, null, null, null];
							F.line = 2283;
							var colontmp__67163 = null;
							F.line = 301;
							colontmp__67163 = X5BX5D__65842(f_65200[f_65200_Idx].board, dotdot__50107(0, subInt(i_65701, 1)));
							F.line = 2285;
							var i_67166 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67166 < (colontmp__67163 != null ? colontmp__67163.length : 0))) break L6;
										F.line = 2287;
										t_66244 = i_67166;
										F.line = 2287;
										nimCopy(line_66245, colontmp__67163[chckIndx(i_67166, 0, colontmp__67163.length+0-1)-0], NTI64063);
										F.line = 302;
										X5BX5Deq__66673(f_65200[f_65200_Idx].board[chckIndx(addInt(t_66244, 1), 0, f_65200[f_65200_Idx].board.length+0-1)-0], dotdot__51023(1, 2), X5BX5D__66298(line_66245, dotdot__51023(1, 2)));
										F.line = 2288;
										i_67166 = addInt(i_67166, 1);
									}
							} while(false);
						} while(false);
						F.line = 303;
						F.line = 303;
						var ln_67108 = nimCopy(null, [], NTI67107);
						L7: do {
							F.line = 303;
							var __67117 = 0;
							F.line = 2045;
							var res_67173 = 0;
							L8: do {
								F.line = 2046;
									L9: while (true) {
									if (!(res_67173 <= 9)) break L9;
										F.line = 2047;
										__67117 = res_67173;
										F.line = 303;
										if (ln_67108 != null) { ln_67108.push({isFilled: false, color: 0}); } else { ln_67108 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_67173 = addInt(res_67173, 1);
									}
							} while(false);
						} while(false);
						X5BX5Deq__66673(f_65200[f_65200_Idx].board[chckIndx(0, 0, f_65200[f_65200_Idx].board.length+0-1)-0], dotdot__51023(1, 2), ln_67108);
						}
						
						F.line = 2288;
						i_67181 = addInt(i_67181, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65201;

}

function pop0_65009(ms_65014) {
	var result_65015 = null;

	var F={procname:"tetris.pop0",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 272;
		result_65015 = ms_65014[chckIndx(0, 0, ms_65014.length+0-1)-0];
		L1: do {
			F.line = 273;
			var i_65024 = 0;
			F.line = 2045;
			var res_65029 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_65029 <= 12)) break L3;
						F.line = 2047;
						i_65024 = res_65029;
						F.line = 274;
						ms_65014[chckIndx(i_65024, 0, ms_65014.length+0-1)-0] = ms_65014[chckIndx(addInt(i_65024, 1), 0, ms_65014.length+0-1)-0];
						F.line = 2048;
						res_65029 = addInt(res_65029, 1);
					}
			} while(false);
		} while(false);
		F.line = 275;
		ms_65014[chckIndx(13, 0, ms_65014.length+0-1)-0] = null;
	framePtr = F.prev;

	return result_65015;

}

function rand_41235(r_41238, max_41239) {
	var result_41240 = 0;

	var F={procname:"random.rand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((max_41239 == 0)) {
		F.line = 118;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 119;
				L2: while (true) {
				if (!true) break L2;
					F.line = 120;
					var x_41241 = next_40842(r_41238);
					if ((x_41241 <= ((4294967295 - (4294967295 % chckRange(max_41239, 0, 4294967295))) >>> 0))) {
					F.line = 122;
					result_41240 = (((x_41241 % ((max_41239 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_41240;

}

function shuffle_65122(r_65126, x_65130) {
	var F={procname:"shuffle.shuffle",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 180;
			var i_65148 = 0;
			F.line = 2003;
			var colontmp__65161 = 0;
			F.line = 180;
			colontmp__65161 = (x_65130 != null ? (x_65130.length-1) : -1);
			F.line = 2015;
			var res_65164 = colontmp__65161;
			L2: do {
				F.line = 2016;
					L3: while (true) {
					if (!(1 <= res_65164)) break L3;
						F.line = 2017;
						i_65148 = res_65164;
						F.line = 181;
						var j_65149 = rand_41235(r_65126, i_65148);
						F.line = 182;
						var Tmp4 = x_65130[chckIndx(i_65148, 0, x_65130.length+0-1)-0]; x_65130[chckIndx(i_65148, 0, x_65130.length+0-1)-0] = x_65130[chckIndx(j_65149, 0, x_65130.length+0-1)-0]; x_65130[chckIndx(j_65149, 0, x_65130.length+0-1)-0] = Tmp4;						F.line = 2018;
						res_65164 = subInt(res_65164, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function shuffle_65114(x_65120) {
	var F={procname:"shuffle.shuffle",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 186;
		shuffle_65122(state_40605[0], x_65120);
	framePtr = F.prev;

	
}

function renderBox_64466(m_64469, m_64469_Idx) {

											function setBox_64470(b_64473, b_64473_Idx, m_64474, i_64475, j_64476, t_64477, s_64478) {
													var Tmp1;

												var F={procname:"renderBox.setBox",prev:framePtr,filename:"tetris_library.nim",line:0};
												framePtr = F;
													F.line = 122;
													if (m_64474.kind.shape[chckIndx(i_64475, 0, m_64474.kind.shape.length+0-1)-0][chckIndx(j_64476, 0, m_64474.kind.shape[chckIndx(i_64475, 0, m_64474.kind.shape.length+0-1)-0].length+0-1)-0]) {
													Tmp1 = m_64474.kind.color;
													}
													else {
													Tmp1 = 0;
													}
													
													var itsColor_64479 = Tmp1;
													F.line = 123;
													b_64473[b_64473_Idx][chckIndx(t_64477, 0, b_64473[b_64473_Idx].length+0-1)-0][chckIndx(s_64478, 0, b_64473[b_64473_Idx][chckIndx(t_64477, 0, b_64473[b_64473_Idx].length+0-1)-0].length+0-1)-0] = {isFilled: m_64474.kind.shape[chckIndx(i_64475, 0, m_64474.kind.shape.length+0-1)-0][chckIndx(j_64476, 0, m_64474.kind.shape[chckIndx(i_64475, 0, m_64474.kind.shape.length+0-1)-0].length+0-1)-0], color: itsColor_64479};
												framePtr = F.prev;

												
											}

	var F={procname:"tetris.renderBox",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 125;
		var l_64488 = subInt((m_64469[m_64469_Idx].kind.shape != null ? m_64469[m_64469_Idx].kind.shape.length : 0), 1);
		F.line = 127;
		var b_64504 = [nimCopy(null, [], NTI64503)];
		F.line = 128;
		var bb_64521 = nimCopy(null, [], NTI64520);
		L1: do {
			F.line = 129;
			var i_64530 = 0;
			F.line = 2045;
			var res_64649 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_64649 <= l_64488)) break L3;
						F.line = 2047;
						i_64530 = res_64649;
						L4: do {
							F.line = 130;
							var j_64539 = 0;
							F.line = 2045;
							var res_64643 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_64643 <= l_64488)) break L6;
										F.line = 2047;
										j_64539 = res_64643;
										F.line = 131;
										if (bb_64521 != null) { bb_64521.push({isFilled: false, color: 0}); } else { bb_64521 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_64643 = addInt(res_64643, 1);
									}
							} while(false);
						} while(false);
						F.line = 132;
						var Tmp7 = nimCopy(null, bb_64521, NTI64505);
						if (b_64504[0] != null) { b_64504[0].push(Tmp7); } else { b_64504[0] = [Tmp7]; };
						F.line = 2048;
						res_64649 = addInt(res_64649, 1);
					}
			} while(false);
		} while(false);
		F.line = 134;
		switch (m_64469[m_64469_Idx].dir) {
		case 0:
			L8: do {
				F.line = 136;
				var i_64568 = 0;
				F.line = 2045;
				var res_64663 = 0;
				L9: do {
					F.line = 2046;
						L10: while (true) {
						if (!(res_64663 <= l_64488)) break L10;
							F.line = 2047;
							i_64568 = res_64663;
							L11: do {
								F.line = 137;
								var j_64577 = 0;
								F.line = 2045;
								var res_64657 = 0;
								L12: do {
									F.line = 2046;
										L13: while (true) {
										if (!(res_64657 <= l_64488)) break L13;
											F.line = 2047;
											j_64577 = res_64657;
											F.line = 138;
											setBox_64470(b_64504, 0, m_64469[m_64469_Idx], i_64568, j_64577, i_64568, j_64577);
											F.line = 2048;
											res_64657 = addInt(res_64657, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64663 = addInt(res_64663, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			L14: do {
				F.line = 140;
				var i_64587 = 0;
				F.line = 2045;
				var res_64677 = 0;
				L15: do {
					F.line = 2046;
						L16: while (true) {
						if (!(res_64677 <= l_64488)) break L16;
							F.line = 2047;
							i_64587 = res_64677;
							L17: do {
								F.line = 141;
								var j_64596 = 0;
								F.line = 2045;
								var res_64671 = 0;
								L18: do {
									F.line = 2046;
										L19: while (true) {
										if (!(res_64671 <= l_64488)) break L19;
											F.line = 2047;
											j_64596 = res_64671;
											F.line = 142;
											setBox_64470(b_64504, 0, m_64469[m_64469_Idx], i_64587, j_64596, j_64596, subInt(l_64488, i_64587));
											F.line = 2048;
											res_64671 = addInt(res_64671, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64677 = addInt(res_64677, 1);
						}
				} while(false);
			} while(false);
			break;
		case 2:
			L20: do {
				F.line = 144;
				var i_64606 = 0;
				F.line = 2045;
				var res_64691 = 0;
				L21: do {
					F.line = 2046;
						L22: while (true) {
						if (!(res_64691 <= l_64488)) break L22;
							F.line = 2047;
							i_64606 = res_64691;
							L23: do {
								F.line = 145;
								var j_64615 = 0;
								F.line = 2045;
								var res_64685 = 0;
								L24: do {
									F.line = 2046;
										L25: while (true) {
										if (!(res_64685 <= l_64488)) break L25;
											F.line = 2047;
											j_64615 = res_64685;
											F.line = 146;
											setBox_64470(b_64504, 0, m_64469[m_64469_Idx], i_64606, j_64615, subInt(l_64488, i_64606), subInt(l_64488, j_64615));
											F.line = 2048;
											res_64685 = addInt(res_64685, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64691 = addInt(res_64691, 1);
						}
				} while(false);
			} while(false);
			break;
		case 3:
			L26: do {
				F.line = 148;
				var i_64625 = 0;
				F.line = 2045;
				var res_64705 = 0;
				L27: do {
					F.line = 2046;
						L28: while (true) {
						if (!(res_64705 <= l_64488)) break L28;
							F.line = 2047;
							i_64625 = res_64705;
							L29: do {
								F.line = 149;
								var j_64634 = 0;
								F.line = 2045;
								var res_64699 = 0;
								L30: do {
									F.line = 2046;
										L31: while (true) {
										if (!(res_64699 <= l_64488)) break L31;
											F.line = 2047;
											j_64634 = res_64699;
											F.line = 150;
											setBox_64470(b_64504, 0, m_64469[m_64469_Idx], i_64625, j_64634, subInt(l_64488, j_64634), i_64625);
											F.line = 2048;
											res_64699 = addInt(res_64699, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64705 = addInt(res_64705, 1);
						}
				} while(false);
			} while(false);
			break;
		}
		F.line = 152;
		m_64469[m_64469_Idx].boxs = nimCopy(null, b_64504[0], NTI64018);
	framePtr = F.prev;

	
}

function dropStart(f_65036, f_65036_Idx) {
	var F={procname:"tetris.dropStart",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 278;
		var mino_65038 = pop0_65009(f_65036[f_65036_Idx].minos);
		F.line = 281;
		var nil_num_65039 = 0;
		L1: do {
			F.line = 282;
			var mi_65087 = null;
			F.line = 2197;
			var colontmp__65183 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 282;
			nimCopy(colontmp__65183, f_65036[f_65036_Idx].minos, NTI64072);
			F.line = 2199;
			var i_65186 = 0;
			if ((i_65186 <= 13)) {
			L2: do {
				F.line = 2201;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2202;
						mi_65087 = colontmp__65183[chckIndx(i_65186, 0, colontmp__65183.length+0-1)-0];
						if ((mi_65087 == null)) {
						F.line = 284;
						nil_num_65039 = addInt(nil_num_65039, 1);
						}
						
						if ((13 <= i_65186)) {
						F.line = 2203;
						break L2;
						}
						
						F.line = 2204;
						i_65186 = addInt(i_65186, 1);
					}
			} while(false);
			}
			
		} while(false);
		if ((11 <= nil_num_65039)) {
		F.line = 287;
		var add_minos_65110 = nimCopy(null, [I_64177[0], O_64215[0], S_64265[0], Z_64315[0], J_64365[0], L_64415[0], T_64465[0]], NTI65108);
		F.line = 288;
		shuffle_65114(add_minos_65110);
		L4: do {
			F.line = 289;
			var i_65178 = 0;
			F.line = 2042;
			var colontmp__65188 = 0;
			F.line = 2042;
			var colontmp__65189 = 0;
			F.line = 289;
			colontmp__65188 = subInt(14, nil_num_65039);
			F.line = 289;
			colontmp__65189 = subInt(20, nil_num_65039);
			F.line = 2045;
			var res_65192 = colontmp__65188;
			L5: do {
				F.line = 2046;
					L6: while (true) {
					if (!(res_65192 <= colontmp__65189)) break L6;
						F.line = 2047;
						i_65178 = res_65192;
						F.line = 290;
						f_65036[f_65036_Idx].minos[chckIndx(i_65178, 0, f_65036[f_65036_Idx].minos.length+0-1)-0] = add_minos_65110[chckIndx(subInt(addInt(i_65178, nil_num_65039), 14), 0, add_minos_65110.length+0-1)-0];
						F.line = 2048;
						res_65192 = addInt(res_65192, 1);
					}
			} while(false);
		} while(false);
		}
		
		F.line = 292;
		f_65036[f_65036_Idx].am = {pos: nimCopy(null, mino_65038.firstPos, NTI64014), kind: mino_65038, dir: 0, boxs: null};
		F.line = 293;
		renderBox_64466(f_65036[f_65036_Idx], "am");
		if (!(posVerify_64709(f_65036[f_65036_Idx], "am", f_65036[f_65036_Idx].board))) {
		F.line = 294;
		gameOver_64944();
		}
		
	framePtr = F.prev;

	
}

function fixAM_64935(f_64938, f_64938_Idx) {
	var F={procname:"tetris.fixAM",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(posVerify_64709(f_64938[f_64938_Idx], "am", f_64938[f_64938_Idx].board))) {
		F.line = 306;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 307;
			var i_67200 = 0;
			F.line = 307;
			var bs_67201 = null;
			F.line = 2283;
			var colontmp__67243 = null;
			F.line = 307;
			colontmp__67243 = f_64938[f_64938_Idx].am.boxs;
			F.line = 2285;
			var i_67246 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67246 < (colontmp__67243 != null ? colontmp__67243.length : 0))) break L3;
						F.line = 2287;
						i_67200 = i_67246;
						F.line = 2287;
						bs_67201 = colontmp__67243[chckIndx(i_67246, 0, colontmp__67243.length+0-1)-0];
						L4: do {
							F.line = 308;
							var j_67215 = 0;
							F.line = 308;
							var b_67216 = null;
							F.line = 2285;
							var i_67242 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67242 < (bs_67201 != null ? bs_67201.length : 0))) break L6;
										F.line = 2287;
										j_67215 = i_67242;
										F.line = 2287;
										b_67216 = bs_67201[chckIndx(i_67242, 0, bs_67201.length+0-1)-0];
										if (b_67216.isFilled) {
										F.line = 310;
										f_64938[f_64938_Idx].board[chckIndx(addInt(f_64938[f_64938_Idx].am.pos.Field0, i_67200), 0, f_64938[f_64938_Idx].board.length+0-1)-0][chckIndx(addInt(f_64938[f_64938_Idx].am.pos.Field1, j_67215), 0, f_64938[f_64938_Idx].board[chckIndx(addInt(f_64938[f_64938_Idx].am.pos.Field0, i_67200), 0, f_64938[f_64938_Idx].board.length+0-1)-0].length+0-1)-0] = b_67216;
										}
										
										F.line = 2288;
										i_67242 = addInt(i_67242, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67246 = addInt(i_67246, 1);
					}
			} while(false);
		} while(false);
		F.line = 312;
		var cllines_67217 = lineCheck_65197(f_64938, f_64938_Idx);
		F.line = 313;
		f_64938[f_64938_Idx].clearlines = addInt(f_64938[f_64938_Idx].clearlines, cllines_67217);
		F.line = 315;
		f_64938[f_64938_Idx].score = addInt(f_64938[f_64938_Idx].score, [0, 1, 3, 6, 9][chckIndx(cllines_67217, 0, [0, 1, 3, 6, 9].length+0-1)-0]);
		F.line = 316;
		dropStart(f_64938, f_64938_Idx);
	} while (false);
	framePtr = F.prev;

	
}

function dropStep(f_64942, f_64942_Idx) {
	var F={procname:"tetris.dropStep",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		if ((modInt(f_64942[f_64942_Idx].frame, 180) == 0)) {
		if (!(move_64874(f_64942[f_64942_Idx], "am", f_64942[f_64942_Idx].board, 1))) {
		F.line = 230;
		fixAM_64935(f_64942, f_64942_Idx);
		}
		
		}
		
	framePtr = F.prev;

	
}
randomize_63001();
var I_64177 = [{shape: nimCopy(null, [[false, false, false, false], [true, true, true, true], [false, false, false, false], [false, false, false, false]], NTI64175), color: 1, firstPos: {Field0: 0, Field1: 4}}];
var O_64215 = [{shape: nimCopy(null, [[true, true], [true, true]], NTI64213), color: 2, firstPos: {Field0: 0, Field1: 5}}];
var S_64265 = [{shape: nimCopy(null, [[false, true, true], [true, true, false], [false, false, false]], NTI64263), color: 3, firstPos: {Field0: 0, Field1: 4}}];
var Z_64315 = [{shape: nimCopy(null, [[true, true, false], [false, true, true], [false, false, false]], NTI64263), color: 4, firstPos: {Field0: 0, Field1: 4}}];
var J_64365 = [{shape: nimCopy(null, [[true, false, false], [true, true, true], [false, false, false]], NTI64263), color: 5, firstPos: {Field0: 0, Field1: 4}}];
var L_64415 = [{shape: nimCopy(null, [[false, false, true], [true, true, true], [false, false, false]], NTI64263), color: 6, firstPos: {Field0: 0, Field1: 4}}];
var T_64465 = [{shape: nimCopy(null, [[false, true, false], [true, true, true], [false, false, false]], NTI64263), color: 7, firstPos: {Field0: 0, Field1: 4}}];
var F_67424 = [null];

function random_41127(max_41129) {
	var result_41130 = 0.0;

	var F={procname:"random.random",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 94;
		var x_41132 = next_40842(state_40605[0]);
		F.line = 96;
		result_41130 = ((x_41132 / 4294967295) * max_41129);
	framePtr = F.prev;

	return result_41130;

}

function shuffle_64946(arr_64951) {
	var F={procname:"tetris.shuffle",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 250;
		var n_64979 = 14;
		F.line = 251;
		var t_64980 = 0;
		F.line = 252;
		var i_64981 = 0;
		L1: do {
			F.line = 254;
				L2: while (true) {
				if (!(0 < n_64979)) break L2;
					F.line = 255;
					i_64981 = ((Math.floor((random_41127(1.0000000000000000e+000) * n_64979)))|0);
					F.line = 256;
					n_64979 = subInt(n_64979, 1);
					F.line = 257;
					var __64991 = {Field0: arr_64951[chckIndx(i_64981, 0, arr_64951.length+0-1)-0], Field1: arr_64951[chckIndx(n_64979, 0, arr_64951.length+0-1)-0]};
					F.line = 257;
					arr_64951[chckIndx(n_64979, 0, arr_64951.length+0-1)-0] = __64991["Field0"];
					F.line = 257;
					arr_64951[chckIndx(i_64981, 0, arr_64951.length+0-1)-0] = __64991["Field1"];
				}
		} while(false);
	framePtr = F.prev;

	
}

function gameInit() {
	var F={procname:"tetris.gameInit",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 10;
		var board_67432 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
		L1: do {
			F.line = 12;
			var i_67441 = 0;
			F.line = 3519;
			var i_67479 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67479 < 21)) break L3;
						F.line = 3521;
						i_67441 = i_67479;
						F.line = 13;
						board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0][chckIndx(0, 0, board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 15;
						board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0][chckIndx(11, 0, board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						L4: do {
							F.line = 17;
							var j_67450 = 0;
							F.line = 3519;
							var i_67475 = 1;
							L5: do {
								F.line = 3520;
									L6: while (true) {
									if (!(i_67475 < 11)) break L6;
										F.line = 3521;
										j_67450 = i_67475;
										F.line = 18;
										board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0][chckIndx(j_67450, 0, board_67432[chckIndx(i_67441, 0, board_67432.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										F.line = 3522;
										i_67475 = addInt(i_67475, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_67479 = addInt(i_67479, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 20;
			var i_67459 = 0;
			F.line = 3519;
			var i_67485 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_67485 < 12)) break L9;
						F.line = 3521;
						i_67459 = i_67485;
						F.line = 22;
						board_67432[chckIndx(21, 0, board_67432.length+0-1)-0][chckIndx(i_67459, 0, board_67432[chckIndx(21, 0, board_67432.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 3522;
						i_67485 = addInt(i_67485, 1);
					}
			} while(false);
		} while(false);
		F.line = 26;
		var mns_67462 = [nimCopy(null, [I_64177[0], O_64215[0], S_64265[0], Z_64315[0], J_64365[0], L_64415[0], T_64465[0], I_64177[0], O_64215[0], S_64265[0], Z_64315[0], J_64365[0], L_64415[0], T_64465[0]], NTI67460)];
		F.line = 27;
		shuffle_64946(mns_67462[0]);
		F.line = 28;
		F_67424[0] = {board: nimCopy(null, board_67432, NTI67431), frame: 0, minos: nimCopy(null, mns_67462[0], NTI67460), score: 0, clearlines: 0, am: null, gm: null};
		F.line = 29;
		dropStart(F_67424, 0);
	framePtr = F.prev;

	
}
var gameOverFlag_67488 = [false];
var buttons_67528 = [nimCopy(null, [], NTI67527)];
L2: do {
	var b_67621 = [0];
	L3: do {
		var v_67638 = 0;
		var res_67640 = 0;
		L4: do {
				L5: while (true) {
				if (!(res_67640 <= 8)) break L5;
					v_67638 = res_67640;
					b_67621[0] = v_67638;
					if (buttons_67528[0] != null) { buttons_67528[0].push({kind: b_67621[0], isPushed: false, contFlames: 0}); } else { buttons_67528[0] = [{kind: b_67621[0], isPushed: false, contFlames: 0}]; };
					res_67640 += 1;
				}
		} while(false);
	} while(false);
} while(false);

function posCorrect_64796(m_64799, m_64799_Idx, board_64800) {
	var result_64801 = false;

	var F={procname:"tetris.posCorrect",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 169;
			var i_64817 = 0;
			F.line = 3518;
			var colontmp__64837 = 0;
			F.line = 169;
			colontmp__64837 = (m_64799[m_64799_Idx].boxs != null ? m_64799[m_64799_Idx].boxs.length : 0);
			F.line = 3519;
			var i_64840 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_64840 < colontmp__64837)) break L3;
						F.line = 3521;
						i_64817 = i_64840;
						F.line = 170;
						m_64799[m_64799_Idx].pos.Field1 = addInt(m_64799[m_64799_Idx].pos.Field1, i_64817);
						if (posVerify_64709(m_64799, m_64799_Idx, board_64800)) {
						F.line = 172;
						result_64801 = true;
						break BeforeRet;
						}
						
						F.line = 173;
						m_64799[m_64799_Idx].pos.Field1 = subInt(m_64799[m_64799_Idx].pos.Field1, mulInt(2, i_64817));
						if (posVerify_64709(m_64799, m_64799_Idx, board_64800)) {
						F.line = 175;
						result_64801 = true;
						break BeforeRet;
						}
						
						F.line = 3522;
						i_64840 = addInt(i_64840, 1);
					}
			} while(false);
		} while(false);
		F.line = 182;
		result_64801 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64801;

}

function spin_64842(m_64845, m_64845_Idx, a_64848, board_64849) {
	var F={procname:"tetris.spin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 185;
		var pre_dir_64850 = m_64845[m_64845_Idx].dir;
		F.line = 186;
		m_64845[m_64845_Idx].dir = a_64848[chckIndx(m_64845[m_64845_Idx].dir, 0, a_64848.length+0-1)-0];
		F.line = 187;
		renderBox_64466(m_64845, m_64845_Idx);
		if (!(posVerify_64709(m_64845, m_64845_Idx, board_64849))) {
		F.line = 190;
		var pre_pos_64858 = {Field0: m_64845[m_64845_Idx].pos.Field0, Field1: m_64845[m_64845_Idx].pos.Field1};
		if (!(posCorrect_64796(m_64845, m_64845_Idx, board_64849))) {
		F.line = 192;
		var __64859 = nimCopy(null, pre_pos_64858, NTI64857);
		F.line = 192;
		m_64845[m_64845_Idx].pos.Field0 = __64859["Field0"];
		F.line = 192;
		m_64845[m_64845_Idx].pos.Field1 = __64859["Field1"];
		F.line = 193;
		m_64845[m_64845_Idx].dir = pre_dir_64850;
		}
		
		F.line = 194;
		renderBox_64466(m_64845, m_64845_Idx);
		}
		
	framePtr = F.prev;

	
}

function rightSpin_64860(m_64863, m_64863_Idx, board_64864) {
	var F={procname:"tetris.rightSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 197;
		spin_64842(m_64863, m_64863_Idx, [1, 2, 3, 0], board_64864);
	framePtr = F.prev;

	
}

function leftSpin_64867(m_64870, m_64870_Idx, board_64871) {
	var F={procname:"tetris.leftSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 200;
		spin_64842(m_64870, m_64870_Idx, [3, 0, 1, 2], board_64871);
	framePtr = F.prev;

	
}

function buttonCheck_67641(c_67645) {
			var Tmp4;
			var Tmp5;

	var F={procname:"tetris.buttonCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 49;
			var i_67699 = 0;
			F.line = 49;
			var b_67700 = false;
			F.line = 2266;
			var i_67849 = 0;
			if ((i_67849 <= 7)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_67699 = i_67849;
						F.line = 2269;
						b_67700 = c_67645[chckIndx(i_67849, 0, c_67645.length+0-1)-0];
						if (!(b_67700)) {
						F.line = 51;
						buttons_67528[0][chckIndx(i_67699, 0, buttons_67528[0].length+0-1)-0].isPushed = false;
						F.line = 52;
						buttons_67528[0][chckIndx(i_67699, 0, buttons_67528[0].length+0-1)-0].contFlames = 0;
						}
						
						if ((7 <= i_67849)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_67849 = addInt(i_67849, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (c_67645[chckIndx(1, 0, c_67645.length+0-1)-0]) {
		if (!(buttons_67528[0][chckIndx(1, 0, buttons_67528[0].length+0-1)-0].isPushed)) {
		F.line = 56;
		rightSpin_64860(F_67424[0], "am", F_67424[0].board);
		F.line = 57;
		buttons_67528[0][chckIndx(1, 0, buttons_67528[0].length+0-1)-0].isPushed = true;
		}
		
		}
		else {
		if (c_67645[chckIndx(2, 0, c_67645.length+0-1)-0]) {
		if (!(buttons_67528[0][chckIndx(2, 0, buttons_67528[0].length+0-1)-0].isPushed)) {
		F.line = 60;
		leftSpin_64867(F_67424[0], "am", F_67424[0].board);
		F.line = 61;
		buttons_67528[0][chckIndx(2, 0, buttons_67528[0].length+0-1)-0].isPushed = true;
		}
		
		}
		}
		if (c_67645[chckIndx(6, 0, c_67645.length+0-1)-0]) {
			if (!(buttons_67528[0][chckIndx(6, 0, buttons_67528[0].length+0-1)-0].isPushed)) Tmp4 = true; else {				Tmp4 = (30 < buttons_67528[0][chckIndx(6, 0, buttons_67528[0].length+0-1)-0].contFlames);			}		if (Tmp4) {
		F.line = 65;
		move_64874(F_67424[0], "am", F_67424[0].board, 2);
		F.line = 66;
		buttons_67528[0][chckIndx(6, 0, buttons_67528[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 68;
		buttons_67528[0][chckIndx(6, 0, buttons_67528[0].length+0-1)-0].contFlames = addInt(buttons_67528[0][chckIndx(6, 0, buttons_67528[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		else {
		if (c_67645[chckIndx(7, 0, c_67645.length+0-1)-0]) {
			if (!(buttons_67528[0][chckIndx(7, 0, buttons_67528[0].length+0-1)-0].isPushed)) Tmp5 = true; else {				Tmp5 = (30 < buttons_67528[0][chckIndx(7, 0, buttons_67528[0].length+0-1)-0].contFlames);			}		if (Tmp5) {
		F.line = 71;
		move_64874(F_67424[0], "am", F_67424[0].board, 3);
		F.line = 72;
		buttons_67528[0][chckIndx(7, 0, buttons_67528[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 74;
		buttons_67528[0][chckIndx(7, 0, buttons_67528[0].length+0-1)-0].contFlames = addInt(buttons_67528[0][chckIndx(7, 0, buttons_67528[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		}
		if (c_67645[chckIndx(5, 0, c_67645.length+0-1)-0]) {
		F.line = 77;
		move_64874(F_67424[0], "am", F_67424[0].board, 1);
		}
		
		if (c_67645[chckIndx(3, 0, c_67645.length+0-1)-0]) {
		if (!(buttons_67528[0][chckIndx(3, 0, buttons_67528[0].length+0-1)-0].isPushed)) {
		L6: do {
			F.line = 81;
				L7: while (true) {
				if (!move_64874(F_67424[0], "am", F_67424[0].board, 1)) break L7;
				}
		} while(false);
		F.line = 82;
		fixAM_64935(F_67424, 0);
		F.line = 83;
		buttons_67528[0][chckIndx(3, 0, buttons_67528[0].length+0-1)-0].isPushed = true;
		}
		
		}
		
	framePtr = F.prev;

	
}

function gameStep(c_67855) {
	var F={procname:"tetris.gameStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (gameOverFlag_67488[0]) {
		F.line = 86;
		break BeforeRet;
		}
		
		F.line = 88;
		buttonCheck_67641(c_67855);
		F.line = 89;
		F_67424[0].frame = addInt(F_67424[0].frame, 1);
		F.line = 90;
		dropStep(F_67424, 0);
	} while (false);
	framePtr = F.prev;

	
}

function fixGhost_67247(f_67250, f_67250_Idx) {
	var F={procname:"tetris.fixGhost",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 319;
			var i_67304 = 0;
			F.line = 319;
			var line_67305 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2264;
			var colontmp__67399 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
			F.line = 319;
			nimCopy(colontmp__67399, f_67250[f_67250_Idx].board, NTI64020);
			F.line = 2266;
			var i_67402 = 0;
			if ((i_67402 <= 21)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_67304 = i_67402;
						F.line = 2269;
						nimCopy(line_67305, colontmp__67399[chckIndx(i_67402, 0, colontmp__67399.length+0-1)-0], NTI64063);
						L4: do {
							F.line = 320;
							var j_67359 = 0;
							F.line = 320;
							var b_67360 = null;
							F.line = 2266;
							var i_67398 = 0;
							if ((i_67398 <= 11)) {
							L5: do {
								F.line = 2268;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2269;
										j_67359 = i_67398;
										F.line = 2269;
										b_67360 = line_67305[chckIndx(i_67398, 0, line_67305.length+0-1)-0];
										if (!(b_67360.isFilled)) {
										F.line = 322;
										f_67250[f_67250_Idx].board[chckIndx(i_67304, 0, f_67250[f_67250_Idx].board.length+0-1)-0][chckIndx(j_67359, 0, f_67250[f_67250_Idx].board[chckIndx(i_67304, 0, f_67250[f_67250_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										}
										
										if ((11 <= i_67398)) {
										F.line = 2270;
										break L5;
										}
										
										F.line = 2271;
										i_67398 = addInt(i_67398, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((21 <= i_67402)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_67402 = addInt(i_67402, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 323;
		var x_67361 = f_67250[f_67250_Idx].am.pos.Field0;
		L7: do {
			F.line = 324;
				L8: while (true) {
				if (!move_64874(f_67250[f_67250_Idx], "am", f_67250[f_67250_Idx].board, 1)) break L8;
				}
		} while(false);
		L9: do {
			F.line = 325;
			var i_67376 = 0;
			F.line = 325;
			var bs_67377 = null;
			F.line = 2283;
			var colontmp__67410 = null;
			F.line = 325;
			colontmp__67410 = f_67250[f_67250_Idx].am.boxs;
			F.line = 2285;
			var i_67413 = 0;
			L10: do {
				F.line = 2286;
					L11: while (true) {
					if (!(i_67413 < (colontmp__67410 != null ? colontmp__67410.length : 0))) break L11;
						F.line = 2287;
						i_67376 = i_67413;
						F.line = 2287;
						bs_67377 = colontmp__67410[chckIndx(i_67413, 0, colontmp__67410.length+0-1)-0];
						L12: do {
							F.line = 326;
							var j_67391 = 0;
							F.line = 326;
							var b_67392 = null;
							F.line = 2285;
							var i_67409 = 0;
							L13: do {
								F.line = 2286;
									L14: while (true) {
									if (!(i_67409 < (bs_67377 != null ? bs_67377.length : 0))) break L14;
										F.line = 2287;
										j_67391 = i_67409;
										F.line = 2287;
										b_67392 = bs_67377[chckIndx(i_67409, 0, bs_67377.length+0-1)-0];
										if (b_67392.isFilled) {
										F.line = 328;
										f_67250[f_67250_Idx].board[chckIndx(addInt(f_67250[f_67250_Idx].am.pos.Field0, i_67376), 0, f_67250[f_67250_Idx].board.length+0-1)-0][chckIndx(addInt(f_67250[f_67250_Idx].am.pos.Field1, j_67391), 0, f_67250[f_67250_Idx].board[chckIndx(addInt(f_67250[f_67250_Idx].am.pos.Field0, i_67376), 0, f_67250[f_67250_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 8};
										}
										
										F.line = 2288;
										i_67409 = addInt(i_67409, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67413 = addInt(i_67413, 1);
					}
			} while(false);
		} while(false);
		F.line = 329;
		f_67250[f_67250_Idx].am.pos.Field0 = x_67361;
	framePtr = F.prev;

	
}

function getBoard() {
	var result_67868 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];

	var F={procname:"tetris.getBoard",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		var board_67869 = nimCopy(null, F_67424[0].board, NTI64020);
		F.line = 95;
		var am_67870 = F_67424[0].am;
		F.line = 97;
		fixGhost_67247(F_67424, 0);
		L1: do {
			F.line = 98;
			var i_67885 = 0;
			F.line = 98;
			var bs_67886 = null;
			F.line = 2283;
			var colontmp__67907 = null;
			F.line = 98;
			colontmp__67907 = am_67870.boxs;
			F.line = 2285;
			var i_67910 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67910 < (colontmp__67907 != null ? colontmp__67907.length : 0))) break L3;
						F.line = 2287;
						i_67885 = i_67910;
						F.line = 2287;
						bs_67886 = colontmp__67907[chckIndx(i_67910, 0, colontmp__67907.length+0-1)-0];
						L4: do {
							F.line = 99;
							var j_67900 = 0;
							F.line = 99;
							var b_67901 = null;
							F.line = 2285;
							var i_67906 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67906 < (bs_67886 != null ? bs_67886.length : 0))) break L6;
										F.line = 2287;
										j_67900 = i_67906;
										F.line = 2287;
										b_67901 = bs_67886[chckIndx(i_67906, 0, bs_67886.length+0-1)-0];
										if (b_67901.isFilled) {
										F.line = 101;
										board_67869[chckIndx(addInt(am_67870.pos.Field0, i_67885), 0, board_67869.length+0-1)-0][chckIndx(addInt(am_67870.pos.Field1, j_67900), 0, board_67869[chckIndx(addInt(am_67870.pos.Field0, i_67885), 0, board_67869.length+0-1)-0].length+0-1)-0] = b_67901;
										}
										
										F.line = 2288;
										i_67906 = addInt(i_67906, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67910 = addInt(i_67910, 1);
					}
			} while(false);
		} while(false);
		F.line = 102;
		nimCopy(result_67868, board_67869, NTI64020);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_67868;

}

function getScore() {
	var result_67913 = 0;

	var F={procname:"tetris.getScore",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 105;
		result_67913 = F_67424[0].score;
	framePtr = F.prev;

	return result_67913;

}

function getClearLines() {
	var result_67916 = 0;

	var F={procname:"tetris.getClearLines",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_67916 = F_67424[0].clearlines;
	framePtr = F.prev;

	return result_67916;

}

function getNext() {
										var Tmp14;

	var result_67919 = null;

	var F={procname:"tetris.getNext",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 112;
		var m_67920 = F_67424[0].minos[chckIndx(0, 0, F_67424[0].minos.length+0-1)-0];
		F.line = 113;
		var p0_67928 = modInt(((slash__22207((m_67920.shape != null ? m_67920.shape.length : 0), 2))|0), 2);
		F.line = 114;
		result_67919 = nimCopy(null, [], NTI67943);
		L1: do {
			F.line = 115;
			var __67952 = 0;
			F.line = 2045;
			var res_68044 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_68044 <= 3)) break L3;
						F.line = 2047;
						__67952 = res_68044;
						F.line = 116;
						var tmp_67969 = nimCopy(null, [], NTI67968);
						L4: do {
							F.line = 117;
							var __67978 = 0;
							F.line = 2045;
							var res_68038 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_68038 <= 3)) break L6;
										F.line = 2047;
										__67978 = res_68038;
										F.line = 118;
										if (tmp_67969 != null) { tmp_67969.push({isFilled: false, color: 0}); } else { tmp_67969 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_68038 = addInt(res_68038, 1);
									}
							} while(false);
						} while(false);
						F.line = 119;
						var Tmp7 = nimCopy(null, tmp_67969, NTI67953);
						if (result_67919 != null) { result_67919.push(Tmp7); } else { result_67919 = [Tmp7]; };
						F.line = 2048;
						res_68044 = addInt(res_68044, 1);
					}
			} while(false);
		} while(false);
		L8: do {
			F.line = 120;
			var i_68014 = 0;
			F.line = 3518;
			var colontmp__68056 = 0;
			F.line = 120;
			colontmp__68056 = (m_67920.shape != null ? m_67920.shape.length : 0);
			F.line = 3519;
			var i_68059 = 0;
			L9: do {
				F.line = 3520;
					L10: while (true) {
					if (!(i_68059 < colontmp__68056)) break L10;
						F.line = 3521;
						i_68014 = i_68059;
						L11: do {
							F.line = 121;
							var j_68030 = 0;
							F.line = 3518;
							var colontmp__68051 = 0;
							F.line = 121;
							colontmp__68051 = (m_67920.shape != null ? m_67920.shape.length : 0);
							F.line = 3519;
							var i_68054 = 0;
							L12: do {
								F.line = 3520;
									L13: while (true) {
									if (!(i_68054 < colontmp__68051)) break L13;
										F.line = 3521;
										j_68030 = i_68054;
										F.line = 122;
										if (m_67920.shape[chckIndx(i_68014, 0, m_67920.shape.length+0-1)-0][chckIndx(j_68030, 0, m_67920.shape[chckIndx(i_68014, 0, m_67920.shape.length+0-1)-0].length+0-1)-0]) {
										Tmp14 = m_67920.color;
										}
										else {
										Tmp14 = 0;
										}
										
										result_67919[chckIndx(addInt(p0_67928, i_68014), 0, result_67919.length+0-1)-0][chckIndx(addInt(p0_67928, j_68030), 0, result_67919[chckIndx(addInt(p0_67928, i_68014), 0, result_67919.length+0-1)-0].length+0-1)-0] = {isFilled: m_67920.shape[chckIndx(i_68014, 0, m_67920.shape.length+0-1)-0][chckIndx(j_68030, 0, m_67920.shape[chckIndx(i_68014, 0, m_67920.shape.length+0-1)-0].length+0-1)-0], color: Tmp14};
										F.line = 3522;
										i_68054 = addInt(i_68054, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_68059 = addInt(i_68059, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_67919;

}

function gameOver_64944() {
	var F={procname:"tetris.gameOver",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 125;
		gameOverFlag_67488[0] = true;
		F.line = 126;
		alert("gameOver!");
	framePtr = F.prev;

	
}
