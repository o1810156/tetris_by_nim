/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI68153 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI68168 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI68143 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64841 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI67700 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI67712 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI67702 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI67737 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64006 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64047 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64012 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64022 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI65461 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67630 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI67631 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64018 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64489 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64504 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64487 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64963 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64041 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64010 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI65011 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67307 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI66835 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64004 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64055 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64063 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI65835 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64212 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64247 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64174 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64197 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI64112 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64159 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI40402 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI40602 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI40602 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI40402, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI40402, name: "a1", sons: null}]};
NTI40602.node = NNI40602;
NTI64112.base = NTI130;
NTI64159.base = NTI64112;
NTI64174.base = NTI130;
NTI64197.base = NTI64174;
NTI64212.base = NTI130;
NTI64247.base = NTI64212;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI64004 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI64004, name: "dfColor", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64004, name: "iColor", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64004, name: "oColor", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI64004, name: "sColor", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI64004, name: "zColor", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI64004, name: "jColor", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI64004, name: "lColor", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI64004, name: "tColor", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI64004, name: "gColor", len: 0, sons: null}}};
NTI64004.node = NNI64004;
var NNI64055 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "isFilled", len: 0, typ: NTI130, name: "isFilled", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}]};
NTI64055.node = NNI64055;
NTI64016.base = NTI64055;
NTI64063.base = NTI64016;
NTI65835.base = NTI64063;
NTI66835.base = NTI64016;
NTI67307.base = NTI64016;
NTI64042.base = NTI130;
NTI64041.base = NTI64042;
var NNI64014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI64014.node = NNI64014;
var NNI64040 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "shape", len: 0, typ: NTI64041, name: "shape", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}, 
{kind: 1, offset: "firstPos", len: 0, typ: NTI64014, name: "firstPos", sons: null}]};
NTI64040.node = NNI64040;
NTI64010.base = NTI64040;
NTI65011.base = NTI64010;
NTI64963.base = NTI64010;
NTI64059.base = NTI64016;
NTI64487.base = NTI64059;
NTI64504.base = NTI64016;
NTI64489.base = NTI64016;
NTI64018.base = NTI64059;
NTI67630.base = NTI64016;
NTI67631.base = NTI67630;
NTI65461.base = NTI64010;
NTI64020.base = NTI64063;
var NNI64006 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI64006, name: "north", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64006, name: "east", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64006, name: "south", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI64006, name: "west", len: 0, sons: null}}};
NTI64006.node = NNI64006;
var NNI64047 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "pos", len: 0, typ: NTI64014, name: "pos", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI64010, name: "kind", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI64006, name: "dir", sons: null}, 
{kind: 1, offset: "boxs", len: 0, typ: NTI64018, name: "boxs", sons: null}]};
NTI64047.node = NNI64047;
NTI64012.base = NTI64047;
NTI64068.base = NTI64016;
NTI64067.base = NTI64068;
NTI64070.base = NTI64010;
var NNI64022 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI64020, name: "board", sons: null}, 
{kind: 1, offset: "frame", len: 0, typ: NTI104, name: "frame", sons: null}, 
{kind: 1, offset: "am", len: 0, typ: NTI64012, name: "am", sons: null}, 
{kind: 1, offset: "gm", len: 0, typ: NTI64067, name: "gm", sons: null}, 
{kind: 1, offset: "minos", len: 0, typ: NTI64070, name: "minos", sons: null}, 
{kind: 1, offset: "score", len: 0, typ: NTI104, name: "score", sons: null}, 
{kind: 1, offset: "clearlines", len: 0, typ: NTI104, name: "clearlines", sons: null}]};
NTI64022.node = NNI64022;
var NNI67700 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI67700, name: "bNon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI67700, name: "bA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI67700, name: "bB", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI67700, name: "bHd", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI67700, name: "bUp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI67700, name: "bDwn", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI67700, name: "bRgt", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI67700, name: "bLft", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI67700, name: "bHld", len: 0, sons: null}}};
NTI67700.node = NNI67700;
var NNI67712 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI67700, name: "kind", sons: null}, 
{kind: 1, offset: "isPushed", len: 0, typ: NTI130, name: "isPushed", sons: null}, 
{kind: 1, offset: "contFlames", len: 0, typ: NTI104, name: "contFlames", sons: null}]};
NTI67712.node = NNI67712;
NTI67702.base = NTI67712;
NTI67737.base = NTI67702;
var NNI64841 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI64841.node = NNI64841;
NTI68143.base = NTI64059;
NTI68168.base = NTI64016;
NTI68153.base = NTI64016;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function divInt(a_18403, b_18404) {
		      if (b_18404 == 0) raiseDivByZero();
      if (b_18404 == -1 && a_18403 == 2147483647) raiseOverflow();
      return Math.trunc(a_18403 / b_18404);
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var state_40605 = [{a0: 1773455756, a1: 4275166512}];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function getTime_58433() {
	var result_62003 = 0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1307;
		result_62003 = divInt(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62003;

}
var startMilsecs_62405 = [getTime_58433()];

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function epochTime_62006() {
	var result_62008 = 0.0;

	var F={procname:"times.epochTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1310;
		result_62008 = slash__22207(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62008;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function rotl_40802(x_40804, k_40805) {
	var result_40806 = 0;

	var F={procname:"random.rotl",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_40806 = ((x_40804 << k_40805) | ((x_40804 >>> 0) >>> ((64 - k_40805) >>> 0)));
	framePtr = F.prev;

	return result_40806;

}

function next_40842(r_40845) {
	var result_40846 = 0;

	var F={procname:"random.next",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 50;
		var s0_40847 = r_40845.a0;
		F.line = 51;
		var s1_40848 = r_40845.a1;
		F.line = 52;
		result_40846 = ((s0_40847 + s1_40848) >>> 0);
		F.line = 53;
		s1_40848 = (s1_40848 ^ s0_40847);
		F.line = 54;
		r_40845.a0 = ((rotl_40802(s0_40847, 55) ^ s1_40848) ^ (s1_40848 << 14));
		F.line = 55;
		r_40845.a1 = rotl_40802(s1_40848, 36);
	framePtr = F.prev;

	return result_40846;

}

function initRand_41465(seed_41467) {
	var result_41468 = [{a0: 0, a1: 0}];

	var F={procname:"random.initRand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 169;
		result_41468[0].a0 = chckRange(((seed_41467 ) >>> 16), 0, 4294967295);
		F.line = 170;
		result_41468[0].a1 = chckRange((seed_41467 & 65535), 0, 4294967295);
		F.line = 171;
		next_40842(result_41468[0]);
	framePtr = F.prev;

	return result_41468[0];

}

function randomize_41479(seed_41481) {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 176;
		nimCopy(state_40605[0], initRand_41465(seed_41481), NTI40602);
	framePtr = F.prev;

	
}

function randomize_63001() {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 194;
		var time_63005 = (epochTime_62006() * 1.0000000000000000e+009);
		F.line = 195;
		randomize_41479(time_63005);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function posVerify_64693(m_64696, m_64696_Idx, board_64697) {
	var result_64698 = false;

	var F={procname:"tetris.posVerify",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 150;
			var i_64731 = 0;
			F.line = 150;
			var bs_64732 = null;
			F.line = 2283;
			var colontmp__64776 = null;
			F.line = 150;
			colontmp__64776 = m_64696[m_64696_Idx].boxs;
			F.line = 2285;
			var i_64779 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_64779 < (colontmp__64776 != null ? colontmp__64776.length : 0))) break L3;
						F.line = 2287;
						i_64731 = i_64779;
						F.line = 2287;
						bs_64732 = colontmp__64776[chckIndx(i_64779, 0, colontmp__64776.length+0-1)-0];
						L4: do {
							F.line = 151;
							var j_64765 = 0;
							F.line = 151;
							var b_64766 = null;
							F.line = 2285;
							var i_64775 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_64775 < (bs_64732 != null ? bs_64732.length : 0))) break L6;
										F.line = 2287;
										j_64765 = i_64775;
										F.line = 2287;
										b_64766 = bs_64732[chckIndx(i_64775, 0, bs_64732.length+0-1)-0];
										if (b_64766.isFilled) {
										F.line = 154;
										var xp_64767 = addInt(m_64696[m_64696_Idx].pos.Field0, i_64731);
										F.line = 155;
										var yp_64768 = addInt(m_64696[m_64696_Idx].pos.Field1, j_64765);
										if (((((xp_64767 < 0) || (21 <= xp_64767)) || (yp_64768 <= 0)) || (11 <= yp_64768))) {
										F.line = 158;
										result_64698 = false;
										break BeforeRet;
										}
										
										if (board_64697[chckIndx(xp_64767, 0, board_64697.length+0-1)-0][chckIndx(yp_64768, 0, board_64697[chckIndx(xp_64767, 0, board_64697.length+0-1)-0].length+0-1)-0].isFilled) {
										F.line = 160;
										result_64698 = false;
										break BeforeRet;
										}
										
										}
										
										F.line = 2288;
										i_64775 = addInt(i_64775, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_64779 = addInt(i_64779, 1);
					}
			} while(false);
		} while(false);
		F.line = 161;
		result_64698 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64698;

}

function move_64858(m_64861, m_64861_Idx, board_64862, d_64863) {
	var result_64864 = false;

	var F={procname:"tetris.move",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 198;
		switch (d_64863) {
		case 2:
			F.line = 200;
			m_64861[m_64861_Idx].pos.Field1 = addInt(m_64861[m_64861_Idx].pos.Field1, 1);
			if (!(posVerify_64693(m_64861, m_64861_Idx, board_64862))) {
			F.line = 202;
			m_64861[m_64861_Idx].pos.Field1 = subInt(m_64861[m_64861_Idx].pos.Field1, 1);
			F.line = 203;
			result_64864 = false;
			break BeforeRet;
			}
			
			break;
		case 3:
			F.line = 205;
			m_64861[m_64861_Idx].pos.Field1 = subInt(m_64861[m_64861_Idx].pos.Field1, 1);
			if (!(posVerify_64693(m_64861, m_64861_Idx, board_64862))) {
			F.line = 207;
			m_64861[m_64861_Idx].pos.Field1 = addInt(m_64861[m_64861_Idx].pos.Field1, 1);
			F.line = 208;
			result_64864 = false;
			break BeforeRet;
			}
			
			break;
		case 1:
			F.line = 210;
			m_64861[m_64861_Idx].pos.Field0 = addInt(m_64861[m_64861_Idx].pos.Field0, 1);
			if (!(posVerify_64693(m_64861, m_64861_Idx, board_64862))) {
			F.line = 212;
			m_64861[m_64861_Idx].pos.Field0 = subInt(m_64861[m_64861_Idx].pos.Field0, 1);
			F.line = 213;
			result_64864 = false;
			break BeforeRet;
			}
			
			break;
		case 0:
			F.line = 215;
			result_64864 = false;
			break BeforeRet;
			break;
		}
		F.line = 216;
		result_64864 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64864;

}

function newSeq_65830(len_65834) {
	var result_65836 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_65836 = new Array(len_65834); for (var i=0;i<len_65834;++i) {result_65836[i]=[null, null, null, null, null, null, null, null, null, null, null, null];}	framePtr = F.prev;

	return result_65836;

}

function X5BX5D__65565(a_65573, x_65576) {
	var result_65578 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_65601 = x_65576.a;
		F.line = 3585;
		var L_65828 = addInt(subInt(subInt(22, x_65576.b), xa_65601), 1);
		F.line = 3586;
		result_65578 = nimCopy(null, newSeq_65830(chckRange(L_65828, 0, 2147483647)), NTI65835);
		L1: do {
			F.line = 3587;
			var i_65855 = 0;
			F.line = 3519;
			var i_65867 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65867 < L_65828)) break L3;
						F.line = 3521;
						i_65855 = i_65867;
						F.line = 3587;
						nimCopy(result_65578[chckIndx(i_65855, 0, result_65578.length+0-1)-0], a_65573[chckIndx(addInt(i_65855, xa_65601), 0, a_65573.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_65867 = addInt(i_65867, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65578;

}

function dotdot__51023(a_51028, b_51030) {
	var result_51038 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_51038.a = a_51028;
		F.line = 326;
		result_51038.b = b_51030;
	framePtr = F.prev;

	return result_51038;

}

function all_65912(s_65917, pred_65922) {
	var result_65923 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_65948 = null;
			F.line = 2185;
			var i_65952 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_65952 < (s_65917 != null ? s_65917.length : 0))) break L3;
						F.line = 2187;
						i_65948 = s_65917[chckIndx(i_65952, 0, s_65917.length+0-1)-0];
						if (!(pred_65922(i_65948))) {
						F.line = 436;
						result_65923 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_65952 = addInt(i_65952, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_65923 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65923;

}

function X5BX5D__66042(a_66050, x_66053) {
	var result_66055 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66201 = x_66053.a;
		F.line = 3585;
		var L_66401 = addInt(subInt(x_66053.b, xa_66201), 1);
		F.line = 3586;
		result_66055 = nimCopy(null, newSeq_65830(chckRange(L_66401, 0, 2147483647)), NTI65835);
		L1: do {
			F.line = 3587;
			var i_66417 = 0;
			F.line = 3519;
			var i_66429 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66429 < L_66401)) break L3;
						F.line = 3521;
						i_66417 = i_66429;
						F.line = 3587;
						nimCopy(result_66055[chckIndx(i_66417, 0, result_66055.length+0-1)-0], a_66050[chckIndx(addInt(i_66417, xa_66201), 0, a_66050.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_66429 = addInt(i_66429, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_66055;

}

function dotdot__50107(a_50112, b_50114) {
	var result_50116 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_50116.a = a_50112;
		F.line = 326;
		result_50116.b = b_50114;
	framePtr = F.prev;

	return result_50116;

}

function sysFatal_67247(message_67253) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_67255 = null;
		F.line = 2831;
		e_67255 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_67255.message = nimCopy(null, message_67253, NTI138);
		F.line = 2833;
		raiseException(e_67255, "RangeError");
	framePtr = F.prev;

	
}

function X5BX5Deq__66873(a_66882, x_66885, b_66888) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3591;
		var xa_67001 = x_66885.a;
		F.line = 3592;
		var L_67228 = addInt(subInt(subInt(12, x_66885.b), xa_67001), 1);
		if ((L_67228 == (b_66888 != null ? b_66888.length : 0))) {
		L1: do {
			F.line = 3594;
			var i_67243 = 0;
			F.line = 3519;
			var i_67269 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67269 < L_67228)) break L3;
						F.line = 3521;
						i_67243 = i_67269;
						F.line = 3594;
						a_66882[chckIndx(addInt(i_67243, xa_67001), 0, a_66882.length+0-1)-0] = b_66888[chckIndx(i_67243, 0, b_66888.length+0-1)-0];
						F.line = 3522;
						i_67269 = addInt(i_67269, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 3596;
		sysFatal_67247(makeNimstrLit("different lengths for slice assignment"));
		}
		
	framePtr = F.prev;

	
}

function newSeq_66830(len_66834) {
	var result_66836 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_66836 = new Array(len_66834); for (var i=0;i<len_66834;++i) {result_66836[i]=null;}	framePtr = F.prev;

	return result_66836;

}

function X5BX5D__66498(a_66506, x_66509) {
	var result_66511 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66601 = x_66509.a;
		F.line = 3585;
		var L_66828 = addInt(subInt(subInt(12, x_66509.b), xa_66601), 1);
		F.line = 3586;
		result_66511 = nimCopy(null, newSeq_66830(chckRange(L_66828, 0, 2147483647)), NTI66835);
		L1: do {
			F.line = 3587;
			var i_66855 = 0;
			F.line = 3519;
			var i_66867 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66867 < L_66828)) break L3;
						F.line = 3521;
						i_66855 = i_66867;
						F.line = 3587;
						result_66511[chckIndx(i_66855, 0, result_66511.length+0-1)-0] = a_66506[chckIndx(addInt(i_66855, xa_66601), 0, a_66506.length+0-1)-0];
						F.line = 3522;
						i_66867 = addInt(i_66867, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_66511;

}

function lineCheck_65527(f_65530) {

							function colonanonymous__65904(b_65906) {
								var result_65907 = false;

								var F={procname:"lineCheck.:anonymous",prev:framePtr,filename:"tetris_library.nim",line:0};
								framePtr = F;
								BeforeRet: do {
									F.line = 275;
									result_65907 = b_65906.isFilled;
									break BeforeRet;
								} while (false);
								framePtr = F.prev;

								return result_65907;

							}

	var result_65531 = 0;

	var F={procname:"tetris.lineCheck",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 273;
		result_65531 = 0;
		L1: do {
			F.line = 274;
			var i_65901 = 0;
			F.line = 274;
			var line_65902 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2283;
			var colontmp__67378 = null;
			F.line = 274;
			colontmp__67378 = X5BX5D__65565(f_65530.board, dotdot__51023(0, 2));
			F.line = 2285;
			var i_67381 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67381 < (colontmp__67378 != null ? colontmp__67378.length : 0))) break L3;
						F.line = 2287;
						i_65901 = i_67381;
						F.line = 2287;
						nimCopy(line_65902, colontmp__67378[chckIndx(i_67381, 0, colontmp__67378.length+0-1)-0], NTI64063);
						if (all_65912(line_65902, colonanonymous__65904)) {
						F.line = 276;
						result_65531 = addInt(result_65531, 1);
						L4: do {
							F.line = 277;
							var t_66444 = 0;
							F.line = 277;
							var line_66445 = [null, null, null, null, null, null, null, null, null, null, null, null];
							F.line = 2283;
							var colontmp__67363 = null;
							F.line = 277;
							colontmp__67363 = X5BX5D__66042(f_65530.board, dotdot__50107(0, subInt(i_65901, 1)));
							F.line = 2285;
							var i_67366 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67366 < (colontmp__67363 != null ? colontmp__67363.length : 0))) break L6;
										F.line = 2287;
										t_66444 = i_67366;
										F.line = 2287;
										nimCopy(line_66445, colontmp__67363[chckIndx(i_67366, 0, colontmp__67363.length+0-1)-0], NTI64063);
										F.line = 278;
										X5BX5Deq__66873(f_65530.board[chckIndx(addInt(t_66444, 1), 0, f_65530.board.length+0-1)-0], dotdot__51023(1, 2), X5BX5D__66498(line_66445, dotdot__51023(1, 2)));
										F.line = 2288;
										i_67366 = addInt(i_67366, 1);
									}
							} while(false);
						} while(false);
						F.line = 279;
						F.line = 279;
						var ln_67308 = nimCopy(null, [], NTI67307);
						L7: do {
							F.line = 279;
							var __67317 = 0;
							F.line = 2045;
							var res_67373 = 0;
							L8: do {
								F.line = 2046;
									L9: while (true) {
									if (!(res_67373 <= 9)) break L9;
										F.line = 2047;
										__67317 = res_67373;
										F.line = 279;
										if (ln_67308 != null) { ln_67308.push({isFilled: false, color: 0}); } else { ln_67308 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_67373 = addInt(res_67373, 1);
									}
							} while(false);
						} while(false);
						X5BX5Deq__66873(f_65530.board[chckIndx(0, 0, f_65530.board.length+0-1)-0], dotdot__51023(1, 2), ln_67308);
						}
						
						F.line = 2288;
						i_67381 = addInt(i_67381, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65531;

}

function X5BX5D__65000(s_65007, x_65010) {
	var result_65012 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		var a_65201 = x_65010.a;
		F.line = 3606;
		var L_65407 = addInt(subInt(subInt((s_65007 != null ? s_65007.length : 0), x_65010.b), a_65201), 1);
		F.line = 3607;
		result_65012 = new Array(chckRange(L_65407, 0, 2147483647)); for (var i=0;i<chckRange(L_65407, 0, 2147483647);++i) {result_65012[i]=null;}		L1: do {
			F.line = 3608;
			var i_65426 = 0;
			F.line = 3519;
			var i_65434 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65434 < L_65407)) break L3;
						F.line = 3521;
						i_65426 = i_65434;
						F.line = 3608;
						result_65012[chckIndx(i_65426, 0, result_65012.length+0-1)-0] = s_65007[chckIndx(addInt(i_65426, a_65201), 0, s_65007.length+0-1)-0];
						F.line = 3522;
						i_65434 = addInt(i_65434, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65012;

}

function pop0_64970(ms_64974, ms_64974_Idx) {
	var result_64975 = null;

	var F={procname:"tetris.pop0",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 261;
		result_64975 = ms_64974[ms_64974_Idx][chckIndx(0, 0, ms_64974[ms_64974_Idx].length+0-1)-0];
		F.line = 262;
		ms_64974[ms_64974_Idx] = nimCopy(null, X5BX5D__65000(ms_64974[ms_64974_Idx], dotdot__51023(1, 1)), NTI65011);
	framePtr = F.prev;

	return result_64975;

}

function add_65464(x_65470, x_65470_Idx, y_65473) {
	var F={procname:"add.add",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 1528;
		var xl_65481 = (x_65470[x_65470_Idx] != null ? x_65470[x_65470_Idx].length : 0);
		F.line = 1529;
		if (x_65470[x_65470_Idx].length < chckRange(addInt(xl_65481, (y_65473 != null ? y_65473.length : 0)), 0, 2147483647)) { for (var i=x_65470[x_65470_Idx].length;i<chckRange(addInt(xl_65481, (y_65473 != null ? y_65473.length : 0)), 0, 2147483647);++i) x_65470[x_65470_Idx].push(null); }
               else { x_65470[x_65470_Idx].length = chckRange(addInt(xl_65481, (y_65473 != null ? y_65473.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1530;
			var i_65513 = 0;
			F.line = 2042;
			var colontmp__65515 = 0;
			F.line = 1530;
			colontmp__65515 = (y_65473 != null ? (y_65473.length-1) : -1);
			F.line = 2045;
			var res_65518 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_65518 <= colontmp__65515)) break L3;
						F.line = 2047;
						i_65513 = res_65518;
						F.line = 1530;
						x_65470[x_65470_Idx][chckIndx(addInt(xl_65481, i_65513), 0, x_65470[x_65470_Idx].length+0-1)-0] = y_65473[chckIndx(i_65513, 0, y_65473.length+0-1)-0];
						F.line = 2048;
						res_65518 = addInt(res_65518, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function random_41127(max_41129) {
	var result_41130 = 0.0;

	var F={procname:"random.random",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 94;
		var x_41132 = next_40842(state_40605[0]);
		F.line = 96;
		result_41130 = ((x_41132 / 4294967295) * max_41129);
	framePtr = F.prev;

	return result_41130;

}

function shuffle_64930(arr_64934, arr_64934_Idx) {
	var F={procname:"tetris.shuffle",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 244;
		var n_64942 = (arr_64934[arr_64934_Idx] != null ? arr_64934[arr_64934_Idx].length : 0);
		F.line = 245;
		var t_64943 = 0;
		F.line = 246;
		var i_64944 = 0;
		L1: do {
			F.line = 248;
				L2: while (true) {
				if (!(0 < n_64942)) break L2;
					F.line = 249;
					i_64944 = ((Math.floor((random_41127(1.0000000000000000e+000) * n_64942)))|0);
					F.line = 250;
					n_64942 = subInt(n_64942, 1);
					F.line = 251;
					var __64954 = {Field0: arr_64934[arr_64934_Idx][chckIndx(i_64944, 0, arr_64934[arr_64934_Idx].length+0-1)-0], Field1: arr_64934[arr_64934_Idx][chckIndx(n_64942, 0, arr_64934[arr_64934_Idx].length+0-1)-0]};
					F.line = 251;
					arr_64934[arr_64934_Idx][chckIndx(n_64942, 0, arr_64934[arr_64934_Idx].length+0-1)-0] = __64954["Field0"];
					F.line = 251;
					arr_64934[arr_64934_Idx][chckIndx(i_64944, 0, arr_64934[arr_64934_Idx].length+0-1)-0] = __64954["Field1"];
				}
		} while(false);
	framePtr = F.prev;

	
}

function shuffled_64961(arr_64964) {
	var result_64966 = [null];

	var F={procname:"tetris.shuffled",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 254;
		result_64966[0] = nimCopy(null, arr_64964, NTI64963);
		F.line = 255;
		shuffle_64930(result_64966, 0);
	framePtr = F.prev;

	return result_64966[0];

}

function renderBox_64450(m_64453, m_64453_Idx) {

											function setBox_64454(b_64457, b_64457_Idx, m_64458, i_64459, j_64460, t_64461, s_64462) {
													var Tmp1;

												var F={procname:"renderBox.setBox",prev:framePtr,filename:"tetris_library.nim",line:0};
												framePtr = F;
													F.line = 117;
													if (m_64458.kind.shape[chckIndx(i_64459, 0, m_64458.kind.shape.length+0-1)-0][chckIndx(j_64460, 0, m_64458.kind.shape[chckIndx(i_64459, 0, m_64458.kind.shape.length+0-1)-0].length+0-1)-0]) {
													Tmp1 = m_64458.kind.color;
													}
													else {
													Tmp1 = 0;
													}
													
													var itsColor_64463 = Tmp1;
													F.line = 118;
													b_64457[b_64457_Idx][chckIndx(t_64461, 0, b_64457[b_64457_Idx].length+0-1)-0][chckIndx(s_64462, 0, b_64457[b_64457_Idx][chckIndx(t_64461, 0, b_64457[b_64457_Idx].length+0-1)-0].length+0-1)-0] = {isFilled: m_64458.kind.shape[chckIndx(i_64459, 0, m_64458.kind.shape.length+0-1)-0][chckIndx(j_64460, 0, m_64458.kind.shape[chckIndx(i_64459, 0, m_64458.kind.shape.length+0-1)-0].length+0-1)-0], color: itsColor_64463};
												framePtr = F.prev;

												
											}

	var F={procname:"tetris.renderBox",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 120;
		var l_64472 = subInt((m_64453[m_64453_Idx].kind.shape != null ? m_64453[m_64453_Idx].kind.shape.length : 0), 1);
		F.line = 122;
		var b_64488 = [nimCopy(null, [], NTI64487)];
		F.line = 123;
		var bb_64505 = nimCopy(null, [], NTI64504);
		L1: do {
			F.line = 124;
			var i_64514 = 0;
			F.line = 2045;
			var res_64633 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_64633 <= l_64472)) break L3;
						F.line = 2047;
						i_64514 = res_64633;
						L4: do {
							F.line = 125;
							var j_64523 = 0;
							F.line = 2045;
							var res_64627 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_64627 <= l_64472)) break L6;
										F.line = 2047;
										j_64523 = res_64627;
										F.line = 126;
										if (bb_64505 != null) { bb_64505.push({isFilled: false, color: 0}); } else { bb_64505 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_64627 = addInt(res_64627, 1);
									}
							} while(false);
						} while(false);
						F.line = 127;
						var Tmp7 = nimCopy(null, bb_64505, NTI64489);
						if (b_64488[0] != null) { b_64488[0].push(Tmp7); } else { b_64488[0] = [Tmp7]; };
						F.line = 2048;
						res_64633 = addInt(res_64633, 1);
					}
			} while(false);
		} while(false);
		F.line = 129;
		switch (m_64453[m_64453_Idx].dir) {
		case 0:
			L8: do {
				F.line = 131;
				var i_64552 = 0;
				F.line = 2045;
				var res_64647 = 0;
				L9: do {
					F.line = 2046;
						L10: while (true) {
						if (!(res_64647 <= l_64472)) break L10;
							F.line = 2047;
							i_64552 = res_64647;
							L11: do {
								F.line = 132;
								var j_64561 = 0;
								F.line = 2045;
								var res_64641 = 0;
								L12: do {
									F.line = 2046;
										L13: while (true) {
										if (!(res_64641 <= l_64472)) break L13;
											F.line = 2047;
											j_64561 = res_64641;
											F.line = 133;
											setBox_64454(b_64488, 0, m_64453[m_64453_Idx], i_64552, j_64561, i_64552, j_64561);
											F.line = 2048;
											res_64641 = addInt(res_64641, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64647 = addInt(res_64647, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			L14: do {
				F.line = 135;
				var i_64571 = 0;
				F.line = 2045;
				var res_64661 = 0;
				L15: do {
					F.line = 2046;
						L16: while (true) {
						if (!(res_64661 <= l_64472)) break L16;
							F.line = 2047;
							i_64571 = res_64661;
							L17: do {
								F.line = 136;
								var j_64580 = 0;
								F.line = 2045;
								var res_64655 = 0;
								L18: do {
									F.line = 2046;
										L19: while (true) {
										if (!(res_64655 <= l_64472)) break L19;
											F.line = 2047;
											j_64580 = res_64655;
											F.line = 137;
											setBox_64454(b_64488, 0, m_64453[m_64453_Idx], i_64571, j_64580, j_64580, subInt(l_64472, i_64571));
											F.line = 2048;
											res_64655 = addInt(res_64655, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64661 = addInt(res_64661, 1);
						}
				} while(false);
			} while(false);
			break;
		case 2:
			L20: do {
				F.line = 139;
				var i_64590 = 0;
				F.line = 2045;
				var res_64675 = 0;
				L21: do {
					F.line = 2046;
						L22: while (true) {
						if (!(res_64675 <= l_64472)) break L22;
							F.line = 2047;
							i_64590 = res_64675;
							L23: do {
								F.line = 140;
								var j_64599 = 0;
								F.line = 2045;
								var res_64669 = 0;
								L24: do {
									F.line = 2046;
										L25: while (true) {
										if (!(res_64669 <= l_64472)) break L25;
											F.line = 2047;
											j_64599 = res_64669;
											F.line = 141;
											setBox_64454(b_64488, 0, m_64453[m_64453_Idx], i_64590, j_64599, subInt(l_64472, i_64590), subInt(l_64472, j_64599));
											F.line = 2048;
											res_64669 = addInt(res_64669, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64675 = addInt(res_64675, 1);
						}
				} while(false);
			} while(false);
			break;
		case 3:
			L26: do {
				F.line = 143;
				var i_64609 = 0;
				F.line = 2045;
				var res_64689 = 0;
				L27: do {
					F.line = 2046;
						L28: while (true) {
						if (!(res_64689 <= l_64472)) break L28;
							F.line = 2047;
							i_64609 = res_64689;
							L29: do {
								F.line = 144;
								var j_64618 = 0;
								F.line = 2045;
								var res_64683 = 0;
								L30: do {
									F.line = 2046;
										L31: while (true) {
										if (!(res_64683 <= l_64472)) break L31;
											F.line = 2047;
											j_64618 = res_64683;
											F.line = 145;
											setBox_64454(b_64488, 0, m_64453[m_64453_Idx], i_64609, j_64618, subInt(l_64472, j_64618), i_64609);
											F.line = 2048;
											res_64683 = addInt(res_64683, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_64689 = addInt(res_64689, 1);
						}
				} while(false);
			} while(false);
			break;
		}
		F.line = 147;
		m_64453[m_64453_Idx].boxs = nimCopy(null, b_64488[0], NTI64018);
	framePtr = F.prev;

	
}

function dropStart(f_65440) {
	var F={procname:"tetris.dropStart",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 265;
		var mino_65442 = pop0_64970(f_65440, "minos");
		if (((f_65440.minos != null ? f_65440.minos.length : 0) < 4)) {
		F.line = 267;
		add_65464(f_65440, "minos", shuffled_64961([I_64161[0], O_64199[0], S_64249[0], Z_64299[0], J_64349[0], L_64399[0], T_64449[0]]));
		}
		
		F.line = 268;
		f_65440.am = {pos: nimCopy(null, mino_65442.firstPos, NTI64014), kind: mino_65442, dir: 0, boxs: null};
		F.line = 269;
		renderBox_64450(f_65440, "am");
		if (!(posVerify_64693(f_65440, "am", f_65440.board))) {
		F.line = 270;
		gameOver_64928();
		}
		
	framePtr = F.prev;

	
}

function fixAM_64919(f_64922) {
	var F={procname:"tetris.fixAM",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(posVerify_64693(f_64922, "am", f_64922.board))) {
		F.line = 282;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 283;
			var i_67400 = 0;
			F.line = 283;
			var bs_67401 = null;
			F.line = 2283;
			var colontmp__67443 = null;
			F.line = 283;
			colontmp__67443 = f_64922.am.boxs;
			F.line = 2285;
			var i_67446 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67446 < (colontmp__67443 != null ? colontmp__67443.length : 0))) break L3;
						F.line = 2287;
						i_67400 = i_67446;
						F.line = 2287;
						bs_67401 = colontmp__67443[chckIndx(i_67446, 0, colontmp__67443.length+0-1)-0];
						L4: do {
							F.line = 284;
							var j_67415 = 0;
							F.line = 284;
							var b_67416 = null;
							F.line = 2285;
							var i_67442 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67442 < (bs_67401 != null ? bs_67401.length : 0))) break L6;
										F.line = 2287;
										j_67415 = i_67442;
										F.line = 2287;
										b_67416 = bs_67401[chckIndx(i_67442, 0, bs_67401.length+0-1)-0];
										if (b_67416.isFilled) {
										F.line = 286;
										f_64922.board[chckIndx(addInt(f_64922.am.pos.Field0, i_67400), 0, f_64922.board.length+0-1)-0][chckIndx(addInt(f_64922.am.pos.Field1, j_67415), 0, f_64922.board[chckIndx(addInt(f_64922.am.pos.Field0, i_67400), 0, f_64922.board.length+0-1)-0].length+0-1)-0] = b_67416;
										}
										
										F.line = 2288;
										i_67442 = addInt(i_67442, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67446 = addInt(i_67446, 1);
					}
			} while(false);
		} while(false);
		F.line = 288;
		var cllines_67417 = lineCheck_65527(f_64922);
		F.line = 289;
		f_64922.clearlines = addInt(f_64922.clearlines, cllines_67417);
		F.line = 291;
		f_64922.score = addInt(f_64922.score, [0, 1, 3, 6, 9][chckIndx(cllines_67417, 0, [0, 1, 3, 6, 9].length+0-1)-0]);
		F.line = 292;
		dropStart(f_64922);
	} while (false);
	framePtr = F.prev;

	
}

function dropStep(f_64926) {
	var F={procname:"tetris.dropStep",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		if ((modInt(f_64926.frame, 180) == 0)) {
		if (!(move_64858(f_64926, "am", f_64926.board, 1))) {
		F.line = 225;
		fixAM_64919(f_64926);
		}
		
		}
		
	framePtr = F.prev;

	
}
randomize_63001();
var I_64161 = [{shape: nimCopy(null, [[false, false, false, false], [true, true, true, true], [false, false, false, false], [false, false, false, false]], NTI64159), color: 1, firstPos: {Field0: 0, Field1: 4}}];
var O_64199 = [{shape: nimCopy(null, [[true, true], [true, true]], NTI64197), color: 2, firstPos: {Field0: 0, Field1: 5}}];
var S_64249 = [{shape: nimCopy(null, [[false, true, true], [true, true, false], [false, false, false]], NTI64247), color: 3, firstPos: {Field0: 0, Field1: 4}}];
var Z_64299 = [{shape: nimCopy(null, [[true, true, false], [false, true, true], [false, false, false]], NTI64247), color: 4, firstPos: {Field0: 0, Field1: 4}}];
var J_64349 = [{shape: nimCopy(null, [[true, false, false], [true, true, true], [false, false, false]], NTI64247), color: 5, firstPos: {Field0: 0, Field1: 4}}];
var L_64399 = [{shape: nimCopy(null, [[false, false, true], [true, true, true], [false, false, false]], NTI64247), color: 6, firstPos: {Field0: 0, Field1: 4}}];
var T_64449 = [{shape: nimCopy(null, [[false, true, false], [true, true, true], [false, false, false]], NTI64247), color: 7, firstPos: {Field0: 0, Field1: 4}}];
var F_67624 = [{board: [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]], frame: 0, am: null, gm: null, minos: null, score: 0, clearlines: 0}];

function gameInit() {
	var F={procname:"tetris.gameInit",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 10;
		var board_67632 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
		L1: do {
			F.line = 12;
			var i_67641 = 0;
			F.line = 3519;
			var i_67689 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67689 < 21)) break L3;
						F.line = 3521;
						i_67641 = i_67689;
						F.line = 13;
						board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0][chckIndx(0, 0, board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 15;
						board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0][chckIndx(11, 0, board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						L4: do {
							F.line = 17;
							var j_67650 = 0;
							F.line = 3519;
							var i_67685 = 1;
							L5: do {
								F.line = 3520;
									L6: while (true) {
									if (!(i_67685 < 11)) break L6;
										F.line = 3521;
										j_67650 = i_67685;
										F.line = 18;
										board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0][chckIndx(j_67650, 0, board_67632[chckIndx(i_67641, 0, board_67632.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										F.line = 3522;
										i_67685 = addInt(i_67685, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_67689 = addInt(i_67689, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 20;
			var i_67659 = 0;
			F.line = 3519;
			var i_67695 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_67695 < 12)) break L9;
						F.line = 3521;
						i_67659 = i_67695;
						F.line = 22;
						board_67632[chckIndx(21, 0, board_67632.length+0-1)-0][chckIndx(i_67659, 0, board_67632[chckIndx(21, 0, board_67632.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 3522;
						i_67695 = addInt(i_67695, 1);
					}
			} while(false);
		} while(false);
		F.line = 25;
		var mns_67672 = [[I_64161[0], O_64199[0], S_64249[0], Z_64299[0], J_64349[0], L_64399[0], T_64449[0]]];
		F.line = 26;
		shuffle_64930(mns_67672, 0);
		F.line = 27;
		nimCopy(F_67624[0], {board: nimCopy(null, board_67632, NTI67631), frame: 0, minos: nimCopy(null, mns_67672[0], NTI65461), score: 0, clearlines: 0, am: null, gm: null}, NTI64022);
		F.line = 28;
		dropStart(F_67624[0]);
	framePtr = F.prev;

	
}
var gameOverFlag_67698 = [false];
var buttons_67738 = [nimCopy(null, [], NTI67737)];
L2: do {
	var b_67821 = [0];
	L3: do {
		var v_67838 = 0;
		var res_67840 = 0;
		L4: do {
				L5: while (true) {
				if (!(res_67840 <= 8)) break L5;
					v_67838 = res_67840;
					b_67821[0] = v_67838;
					if (buttons_67738[0] != null) { buttons_67738[0].push({kind: b_67821[0], isPushed: false, contFlames: 0}); } else { buttons_67738[0] = [{kind: b_67821[0], isPushed: false, contFlames: 0}]; };
					res_67840 += 1;
				}
		} while(false);
	} while(false);
} while(false);

function posCorrect_64780(m_64783, m_64783_Idx, board_64784) {
	var result_64785 = false;

	var F={procname:"tetris.posCorrect",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 164;
			var i_64801 = 0;
			F.line = 3518;
			var colontmp__64821 = 0;
			F.line = 164;
			colontmp__64821 = (m_64783[m_64783_Idx].boxs != null ? m_64783[m_64783_Idx].boxs.length : 0);
			F.line = 3519;
			var i_64824 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_64824 < colontmp__64821)) break L3;
						F.line = 3521;
						i_64801 = i_64824;
						F.line = 165;
						m_64783[m_64783_Idx].pos.Field1 = addInt(m_64783[m_64783_Idx].pos.Field1, i_64801);
						if (posVerify_64693(m_64783, m_64783_Idx, board_64784)) {
						F.line = 167;
						result_64785 = true;
						break BeforeRet;
						}
						
						F.line = 168;
						m_64783[m_64783_Idx].pos.Field1 = subInt(m_64783[m_64783_Idx].pos.Field1, mulInt(2, i_64801));
						if (posVerify_64693(m_64783, m_64783_Idx, board_64784)) {
						F.line = 170;
						result_64785 = true;
						break BeforeRet;
						}
						
						F.line = 3522;
						i_64824 = addInt(i_64824, 1);
					}
			} while(false);
		} while(false);
		F.line = 177;
		result_64785 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64785;

}

function spin_64826(m_64829, m_64829_Idx, a_64832, board_64833) {
	var F={procname:"tetris.spin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 180;
		var pre_dir_64834 = m_64829[m_64829_Idx].dir;
		F.line = 181;
		m_64829[m_64829_Idx].dir = a_64832[chckIndx(m_64829[m_64829_Idx].dir, 0, a_64832.length+0-1)-0];
		F.line = 182;
		renderBox_64450(m_64829, m_64829_Idx);
		if (!(posVerify_64693(m_64829, m_64829_Idx, board_64833))) {
		F.line = 185;
		var pre_pos_64842 = {Field0: m_64829[m_64829_Idx].pos.Field0, Field1: m_64829[m_64829_Idx].pos.Field1};
		if (!(posCorrect_64780(m_64829, m_64829_Idx, board_64833))) {
		F.line = 187;
		var __64843 = nimCopy(null, pre_pos_64842, NTI64841);
		F.line = 187;
		m_64829[m_64829_Idx].pos.Field0 = __64843["Field0"];
		F.line = 187;
		m_64829[m_64829_Idx].pos.Field1 = __64843["Field1"];
		F.line = 188;
		m_64829[m_64829_Idx].dir = pre_dir_64834;
		}
		
		F.line = 189;
		renderBox_64450(m_64829, m_64829_Idx);
		}
		
	framePtr = F.prev;

	
}

function rightSpin_64844(m_64847, m_64847_Idx, board_64848) {
	var F={procname:"tetris.rightSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 192;
		spin_64826(m_64847, m_64847_Idx, [1, 2, 3, 0], board_64848);
	framePtr = F.prev;

	
}

function leftSpin_64851(m_64854, m_64854_Idx, board_64855) {
	var F={procname:"tetris.leftSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 195;
		spin_64826(m_64854, m_64854_Idx, [3, 0, 1, 2], board_64855);
	framePtr = F.prev;

	
}

function buttonCheck_67841(c_67845) {
			var Tmp4;
			var Tmp5;

	var F={procname:"tetris.buttonCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 48;
			var i_67899 = 0;
			F.line = 48;
			var b_67900 = false;
			F.line = 2266;
			var i_68049 = 0;
			if ((i_68049 <= 7)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_67899 = i_68049;
						F.line = 2269;
						b_67900 = c_67845[chckIndx(i_68049, 0, c_67845.length+0-1)-0];
						if (!(b_67900)) {
						F.line = 50;
						buttons_67738[0][chckIndx(i_67899, 0, buttons_67738[0].length+0-1)-0].isPushed = false;
						F.line = 51;
						buttons_67738[0][chckIndx(i_67899, 0, buttons_67738[0].length+0-1)-0].contFlames = 0;
						}
						
						if ((7 <= i_68049)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_68049 = addInt(i_68049, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (c_67845[chckIndx(1, 0, c_67845.length+0-1)-0]) {
		if (!(buttons_67738[0][chckIndx(1, 0, buttons_67738[0].length+0-1)-0].isPushed)) {
		F.line = 55;
		rightSpin_64844(F_67624[0], "am", F_67624[0].board);
		F.line = 56;
		buttons_67738[0][chckIndx(1, 0, buttons_67738[0].length+0-1)-0].isPushed = true;
		}
		
		}
		else {
		if (c_67845[chckIndx(2, 0, c_67845.length+0-1)-0]) {
		if (!(buttons_67738[0][chckIndx(2, 0, buttons_67738[0].length+0-1)-0].isPushed)) {
		F.line = 59;
		leftSpin_64851(F_67624[0], "am", F_67624[0].board);
		F.line = 60;
		buttons_67738[0][chckIndx(2, 0, buttons_67738[0].length+0-1)-0].isPushed = true;
		}
		
		}
		}
		if (c_67845[chckIndx(6, 0, c_67845.length+0-1)-0]) {
			if (!(buttons_67738[0][chckIndx(6, 0, buttons_67738[0].length+0-1)-0].isPushed)) Tmp4 = true; else {				Tmp4 = (30 < buttons_67738[0][chckIndx(6, 0, buttons_67738[0].length+0-1)-0].contFlames);			}		if (Tmp4) {
		F.line = 64;
		move_64858(F_67624[0], "am", F_67624[0].board, 2);
		F.line = 65;
		buttons_67738[0][chckIndx(6, 0, buttons_67738[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 67;
		buttons_67738[0][chckIndx(6, 0, buttons_67738[0].length+0-1)-0].contFlames = addInt(buttons_67738[0][chckIndx(6, 0, buttons_67738[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		else {
		if (c_67845[chckIndx(7, 0, c_67845.length+0-1)-0]) {
			if (!(buttons_67738[0][chckIndx(7, 0, buttons_67738[0].length+0-1)-0].isPushed)) Tmp5 = true; else {				Tmp5 = (30 < buttons_67738[0][chckIndx(7, 0, buttons_67738[0].length+0-1)-0].contFlames);			}		if (Tmp5) {
		F.line = 70;
		move_64858(F_67624[0], "am", F_67624[0].board, 3);
		F.line = 71;
		buttons_67738[0][chckIndx(7, 0, buttons_67738[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 73;
		buttons_67738[0][chckIndx(7, 0, buttons_67738[0].length+0-1)-0].contFlames = addInt(buttons_67738[0][chckIndx(7, 0, buttons_67738[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		}
		if (c_67845[chckIndx(5, 0, c_67845.length+0-1)-0]) {
		F.line = 76;
		move_64858(F_67624[0], "am", F_67624[0].board, 1);
		}
		
		if (c_67845[chckIndx(3, 0, c_67845.length+0-1)-0]) {
		if (!(buttons_67738[0][chckIndx(3, 0, buttons_67738[0].length+0-1)-0].isPushed)) {
		L6: do {
			F.line = 80;
				L7: while (true) {
				if (!move_64858(F_67624[0], "am", F_67624[0].board, 1)) break L7;
				}
		} while(false);
		F.line = 81;
		fixAM_64919(F_67624[0]);
		F.line = 82;
		buttons_67738[0][chckIndx(3, 0, buttons_67738[0].length+0-1)-0].isPushed = true;
		}
		
		}
		
	framePtr = F.prev;

	
}

function gameStep(c_68055) {
	var F={procname:"tetris.gameStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (gameOverFlag_67698[0]) {
		F.line = 85;
		break BeforeRet;
		}
		
		F.line = 87;
		buttonCheck_67841(c_68055);
		F.line = 88;
		F_67624[0].frame = addInt(F_67624[0].frame, 1);
		F.line = 89;
		dropStep(F_67624[0]);
	} while (false);
	framePtr = F.prev;

	
}

function fixGhost_67447(f_67450) {
	var F={procname:"tetris.fixGhost",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 295;
			var i_67504 = 0;
			F.line = 295;
			var line_67505 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2264;
			var colontmp__67599 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
			F.line = 295;
			nimCopy(colontmp__67599, f_67450.board, NTI64020);
			F.line = 2266;
			var i_67602 = 0;
			if ((i_67602 <= 21)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_67504 = i_67602;
						F.line = 2269;
						nimCopy(line_67505, colontmp__67599[chckIndx(i_67602, 0, colontmp__67599.length+0-1)-0], NTI64063);
						L4: do {
							F.line = 296;
							var j_67559 = 0;
							F.line = 296;
							var b_67560 = null;
							F.line = 2266;
							var i_67598 = 0;
							if ((i_67598 <= 11)) {
							L5: do {
								F.line = 2268;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2269;
										j_67559 = i_67598;
										F.line = 2269;
										b_67560 = line_67505[chckIndx(i_67598, 0, line_67505.length+0-1)-0];
										if (!(b_67560.isFilled)) {
										F.line = 298;
										f_67450.board[chckIndx(i_67504, 0, f_67450.board.length+0-1)-0][chckIndx(j_67559, 0, f_67450.board[chckIndx(i_67504, 0, f_67450.board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										}
										
										if ((11 <= i_67598)) {
										F.line = 2270;
										break L5;
										}
										
										F.line = 2271;
										i_67598 = addInt(i_67598, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((21 <= i_67602)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_67602 = addInt(i_67602, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 299;
		var x_67561 = f_67450.am.pos.Field0;
		L7: do {
			F.line = 300;
				L8: while (true) {
				if (!move_64858(f_67450, "am", f_67450.board, 1)) break L8;
				}
		} while(false);
		L9: do {
			F.line = 301;
			var i_67576 = 0;
			F.line = 301;
			var bs_67577 = null;
			F.line = 2283;
			var colontmp__67610 = null;
			F.line = 301;
			colontmp__67610 = f_67450.am.boxs;
			F.line = 2285;
			var i_67613 = 0;
			L10: do {
				F.line = 2286;
					L11: while (true) {
					if (!(i_67613 < (colontmp__67610 != null ? colontmp__67610.length : 0))) break L11;
						F.line = 2287;
						i_67576 = i_67613;
						F.line = 2287;
						bs_67577 = colontmp__67610[chckIndx(i_67613, 0, colontmp__67610.length+0-1)-0];
						L12: do {
							F.line = 302;
							var j_67591 = 0;
							F.line = 302;
							var b_67592 = null;
							F.line = 2285;
							var i_67609 = 0;
							L13: do {
								F.line = 2286;
									L14: while (true) {
									if (!(i_67609 < (bs_67577 != null ? bs_67577.length : 0))) break L14;
										F.line = 2287;
										j_67591 = i_67609;
										F.line = 2287;
										b_67592 = bs_67577[chckIndx(i_67609, 0, bs_67577.length+0-1)-0];
										if (b_67592.isFilled) {
										F.line = 304;
										f_67450.board[chckIndx(addInt(f_67450.am.pos.Field0, i_67576), 0, f_67450.board.length+0-1)-0][chckIndx(addInt(f_67450.am.pos.Field1, j_67591), 0, f_67450.board[chckIndx(addInt(f_67450.am.pos.Field0, i_67576), 0, f_67450.board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 8};
										}
										
										F.line = 2288;
										i_67609 = addInt(i_67609, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67613 = addInt(i_67613, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		f_67450.am.pos.Field0 = x_67561;
	framePtr = F.prev;

	
}

function getBoard() {
	var result_68068 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];

	var F={procname:"tetris.getBoard",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 93;
		var board_68069 = nimCopy(null, F_67624[0].board, NTI64020);
		F.line = 94;
		var am_68070 = F_67624[0].am;
		F.line = 96;
		fixGhost_67447(F_67624[0]);
		L1: do {
			F.line = 97;
			var i_68085 = 0;
			F.line = 97;
			var bs_68086 = null;
			F.line = 2283;
			var colontmp__68107 = null;
			F.line = 97;
			colontmp__68107 = am_68070.boxs;
			F.line = 2285;
			var i_68110 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_68110 < (colontmp__68107 != null ? colontmp__68107.length : 0))) break L3;
						F.line = 2287;
						i_68085 = i_68110;
						F.line = 2287;
						bs_68086 = colontmp__68107[chckIndx(i_68110, 0, colontmp__68107.length+0-1)-0];
						L4: do {
							F.line = 98;
							var j_68100 = 0;
							F.line = 98;
							var b_68101 = null;
							F.line = 2285;
							var i_68106 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_68106 < (bs_68086 != null ? bs_68086.length : 0))) break L6;
										F.line = 2287;
										j_68100 = i_68106;
										F.line = 2287;
										b_68101 = bs_68086[chckIndx(i_68106, 0, bs_68086.length+0-1)-0];
										if (b_68101.isFilled) {
										F.line = 100;
										board_68069[chckIndx(addInt(am_68070.pos.Field0, i_68085), 0, board_68069.length+0-1)-0][chckIndx(addInt(am_68070.pos.Field1, j_68100), 0, board_68069[chckIndx(addInt(am_68070.pos.Field0, i_68085), 0, board_68069.length+0-1)-0].length+0-1)-0] = b_68101;
										}
										
										F.line = 2288;
										i_68106 = addInt(i_68106, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_68110 = addInt(i_68110, 1);
					}
			} while(false);
		} while(false);
		F.line = 101;
		nimCopy(result_68068, board_68069, NTI64020);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68068;

}

function getScore() {
	var result_68113 = 0;

	var F={procname:"tetris.getScore",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 104;
		result_68113 = F_67624[0].score;
	framePtr = F.prev;

	return result_68113;

}

function getClearLines() {
	var result_68116 = 0;

	var F={procname:"tetris.getClearLines",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 107;
		result_68116 = F_67624[0].clearlines;
	framePtr = F.prev;

	return result_68116;

}

function getNext() {
										var Tmp14;

	var result_68119 = null;

	var F={procname:"tetris.getNext",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 111;
		var m_68120 = F_67624[0].minos[chckIndx(0, 0, F_67624[0].minos.length+0-1)-0];
		F.line = 112;
		var p0_68128 = modInt(((slash__22207((m_68120.shape != null ? m_68120.shape.length : 0), 2))|0), 2);
		F.line = 113;
		result_68119 = nimCopy(null, [], NTI68143);
		L1: do {
			F.line = 114;
			var __68152 = 0;
			F.line = 2045;
			var res_68244 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_68244 <= 3)) break L3;
						F.line = 2047;
						__68152 = res_68244;
						F.line = 115;
						var tmp_68169 = nimCopy(null, [], NTI68168);
						L4: do {
							F.line = 116;
							var __68178 = 0;
							F.line = 2045;
							var res_68238 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_68238 <= 3)) break L6;
										F.line = 2047;
										__68178 = res_68238;
										F.line = 117;
										if (tmp_68169 != null) { tmp_68169.push({isFilled: false, color: 0}); } else { tmp_68169 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_68238 = addInt(res_68238, 1);
									}
							} while(false);
						} while(false);
						F.line = 118;
						var Tmp7 = nimCopy(null, tmp_68169, NTI68153);
						if (result_68119 != null) { result_68119.push(Tmp7); } else { result_68119 = [Tmp7]; };
						F.line = 2048;
						res_68244 = addInt(res_68244, 1);
					}
			} while(false);
		} while(false);
		L8: do {
			F.line = 119;
			var i_68214 = 0;
			F.line = 3518;
			var colontmp__68256 = 0;
			F.line = 119;
			colontmp__68256 = (m_68120.shape != null ? m_68120.shape.length : 0);
			F.line = 3519;
			var i_68259 = 0;
			L9: do {
				F.line = 3520;
					L10: while (true) {
					if (!(i_68259 < colontmp__68256)) break L10;
						F.line = 3521;
						i_68214 = i_68259;
						L11: do {
							F.line = 120;
							var j_68230 = 0;
							F.line = 3518;
							var colontmp__68251 = 0;
							F.line = 120;
							colontmp__68251 = (m_68120.shape != null ? m_68120.shape.length : 0);
							F.line = 3519;
							var i_68254 = 0;
							L12: do {
								F.line = 3520;
									L13: while (true) {
									if (!(i_68254 < colontmp__68251)) break L13;
										F.line = 3521;
										j_68230 = i_68254;
										F.line = 121;
										if (m_68120.shape[chckIndx(i_68214, 0, m_68120.shape.length+0-1)-0][chckIndx(j_68230, 0, m_68120.shape[chckIndx(i_68214, 0, m_68120.shape.length+0-1)-0].length+0-1)-0]) {
										Tmp14 = m_68120.color;
										}
										else {
										Tmp14 = 0;
										}
										
										result_68119[chckIndx(addInt(p0_68128, i_68214), 0, result_68119.length+0-1)-0][chckIndx(addInt(p0_68128, j_68230), 0, result_68119[chckIndx(addInt(p0_68128, i_68214), 0, result_68119.length+0-1)-0].length+0-1)-0] = {isFilled: m_68120.shape[chckIndx(i_68214, 0, m_68120.shape.length+0-1)-0][chckIndx(j_68230, 0, m_68120.shape[chckIndx(i_68214, 0, m_68120.shape.length+0-1)-0].length+0-1)-0], color: Tmp14};
										F.line = 3522;
										i_68254 = addInt(i_68254, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_68259 = addInt(i_68259, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_68119;

}

function gameOver_64928() {
	var F={procname:"tetris.gameOver",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 124;
		gameOverFlag_67698[0] = true;
		F.line = 125;
		alert("gameOver!");
	framePtr = F.prev;

	
}
