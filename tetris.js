/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI68553 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI68568 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI68543 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI65337 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI68100 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI68112 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI68102 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI68137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI65861 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI68030 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI68031 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64018 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64611 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64059 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64512 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64499 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI65459 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64041 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64040 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64010 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI65507 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67707 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67235 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64004 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64055 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64063 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI66235 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64226 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64261 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64188 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64211 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI64126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64173 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI40402 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI40602 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI40602 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI40402, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI40402, name: "a1", sons: null}]};
NTI40602.node = NNI40602;
NTI64126.base = NTI130;
NTI64173.base = NTI64126;
NTI64188.base = NTI130;
NTI64211.base = NTI64188;
NTI64226.base = NTI130;
NTI64261.base = NTI64226;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI64004 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI64004, name: "dfColor", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64004, name: "iColor", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64004, name: "oColor", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI64004, name: "sColor", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI64004, name: "zColor", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI64004, name: "jColor", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI64004, name: "lColor", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI64004, name: "tColor", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI64004, name: "gColor", len: 0, sons: null}}};
NTI64004.node = NNI64004;
var NNI64055 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "isFilled", len: 0, typ: NTI130, name: "isFilled", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}]};
NTI64055.node = NNI64055;
NTI64016.base = NTI64055;
NTI64063.base = NTI64016;
NTI66235.base = NTI64063;
NTI67235.base = NTI64016;
NTI67707.base = NTI64016;
NTI64042.base = NTI130;
NTI64041.base = NTI64042;
var NNI64014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI64014.node = NNI64014;
var NNI64040 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "shape", len: 0, typ: NTI64041, name: "shape", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI64004, name: "color", sons: null}, 
{kind: 1, offset: "firstPos", len: 0, typ: NTI64014, name: "firstPos", sons: null}]};
NTI64040.node = NNI64040;
NTI64010.base = NTI64040;
NTI65507.base = NTI64010;
NTI65459.base = NTI64010;
NTI64499.base = NTI64016;
NTI64512.base = NTI64016;
NTI64059.base = NTI64016;
NTI64611.base = NTI64059;
NTI64018.base = NTI64059;
NTI68030.base = NTI64016;
NTI68031.base = NTI68030;
NTI65861.base = NTI64010;
var NNI68100 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI68100, name: "bNon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI68100, name: "bA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI68100, name: "bB", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI68100, name: "bHd", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI68100, name: "bUp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI68100, name: "bDwn", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI68100, name: "bRgt", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI68100, name: "bLft", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI68100, name: "bHld", len: 0, sons: null}}};
NTI68100.node = NNI68100;
var NNI68112 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI68100, name: "kind", sons: null}, 
{kind: 1, offset: "isPushed", len: 0, typ: NTI130, name: "isPushed", sons: null}, 
{kind: 1, offset: "contFlames", len: 0, typ: NTI104, name: "contFlames", sons: null}]};
NTI68112.node = NNI68112;
NTI68102.base = NTI68112;
NTI68137.base = NTI68102;
var NNI65337 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI65337.node = NNI65337;
NTI64020.base = NTI64063;
NTI68543.base = NTI64059;
NTI68568.base = NTI64016;
NTI68553.base = NTI64016;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function divInt(a_18403, b_18404) {
		      if (b_18404 == 0) raiseDivByZero();
      if (b_18404 == -1 && a_18403 == 2147483647) raiseOverflow();
      return Math.trunc(a_18403 / b_18404);
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var state_40605 = [{a0: 1773455756, a1: 4275166512}];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function getTime_58433() {
	var result_62003 = 0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1307;
		result_62003 = divInt(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62003;

}
var startMilsecs_62405 = [getTime_58433()];

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function epochTime_62006() {
	var result_62008 = 0.0;

	var F={procname:"times.epochTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1310;
		result_62008 = slash__22207(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_62008;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function rotl_40802(x_40804, k_40805) {
	var result_40806 = 0;

	var F={procname:"random.rotl",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_40806 = ((x_40804 << k_40805) | ((x_40804 >>> 0) >>> ((64 - k_40805) >>> 0)));
	framePtr = F.prev;

	return result_40806;

}

function next_40842(r_40845) {
	var result_40846 = 0;

	var F={procname:"random.next",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 50;
		var s0_40847 = r_40845.a0;
		F.line = 51;
		var s1_40848 = r_40845.a1;
		F.line = 52;
		result_40846 = ((s0_40847 + s1_40848) >>> 0);
		F.line = 53;
		s1_40848 = (s1_40848 ^ s0_40847);
		F.line = 54;
		r_40845.a0 = ((rotl_40802(s0_40847, 55) ^ s1_40848) ^ (s1_40848 << 14));
		F.line = 55;
		r_40845.a1 = rotl_40802(s1_40848, 36);
	framePtr = F.prev;

	return result_40846;

}

function initRand_41465(seed_41467) {
	var result_41468 = [{a0: 0, a1: 0}];

	var F={procname:"random.initRand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 169;
		result_41468[0].a0 = chckRange(((seed_41467 ) >>> 16), 0, 4294967295);
		F.line = 170;
		result_41468[0].a1 = chckRange((seed_41467 & 65535), 0, 4294967295);
		F.line = 171;
		next_40842(result_41468[0]);
	framePtr = F.prev;

	return result_41468[0];

}

function randomize_41479(seed_41481) {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 176;
		nimCopy(state_40605[0], initRand_41465(seed_41481), NTI40602);
	framePtr = F.prev;

	
}

function randomize_63001() {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 194;
		var time_63005 = (epochTime_62006() * 1.0000000000000000e+009);
		F.line = 195;
		randomize_41479(time_63005);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function posVerify_65189(m_65192, m_65192_Idx, board_65193) {
	var result_65194 = false;

	var F={procname:"tetris.posVerify",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 159;
			var i_65227 = 0;
			F.line = 159;
			var bs_65228 = null;
			F.line = 2283;
			var colontmp__65272 = null;
			F.line = 159;
			colontmp__65272 = m_65192[m_65192_Idx].boxs;
			F.line = 2285;
			var i_65275 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_65275 < (colontmp__65272 != null ? colontmp__65272.length : 0))) break L3;
						F.line = 2287;
						i_65227 = i_65275;
						F.line = 2287;
						bs_65228 = colontmp__65272[chckIndx(i_65275, 0, colontmp__65272.length+0-1)-0];
						L4: do {
							F.line = 160;
							var j_65261 = 0;
							F.line = 160;
							var b_65262 = null;
							F.line = 2285;
							var i_65271 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_65271 < (bs_65228 != null ? bs_65228.length : 0))) break L6;
										F.line = 2287;
										j_65261 = i_65271;
										F.line = 2287;
										b_65262 = bs_65228[chckIndx(i_65271, 0, bs_65228.length+0-1)-0];
										if (b_65262.isFilled) {
										F.line = 163;
										var xp_65263 = addInt(m_65192[m_65192_Idx].pos.Field0, i_65227);
										F.line = 164;
										var yp_65264 = addInt(m_65192[m_65192_Idx].pos.Field1, j_65261);
										if (((((xp_65263 < 0) || (21 <= xp_65263)) || (yp_65264 <= 0)) || (11 <= yp_65264))) {
										F.line = 167;
										result_65194 = false;
										break BeforeRet;
										}
										
										if (board_65193[chckIndx(xp_65263, 0, board_65193.length+0-1)-0][chckIndx(yp_65264, 0, board_65193[chckIndx(xp_65263, 0, board_65193.length+0-1)-0].length+0-1)-0].isFilled) {
										F.line = 169;
										result_65194 = false;
										break BeforeRet;
										}
										
										}
										
										F.line = 2288;
										i_65271 = addInt(i_65271, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_65275 = addInt(i_65275, 1);
					}
			} while(false);
		} while(false);
		F.line = 170;
		result_65194 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65194;

}

function move_65354(m_65357, m_65357_Idx, board_65358, d_65359) {
	var result_65360 = false;

	var F={procname:"tetris.move",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 207;
		switch (d_65359) {
		case 2:
			F.line = 209;
			m_65357[m_65357_Idx].pos.Field1 = addInt(m_65357[m_65357_Idx].pos.Field1, 1);
			if (!(posVerify_65189(m_65357, m_65357_Idx, board_65358))) {
			F.line = 211;
			m_65357[m_65357_Idx].pos.Field1 = subInt(m_65357[m_65357_Idx].pos.Field1, 1);
			F.line = 212;
			result_65360 = false;
			break BeforeRet;
			}
			
			break;
		case 3:
			F.line = 214;
			m_65357[m_65357_Idx].pos.Field1 = subInt(m_65357[m_65357_Idx].pos.Field1, 1);
			if (!(posVerify_65189(m_65357, m_65357_Idx, board_65358))) {
			F.line = 216;
			m_65357[m_65357_Idx].pos.Field1 = addInt(m_65357[m_65357_Idx].pos.Field1, 1);
			F.line = 217;
			result_65360 = false;
			break BeforeRet;
			}
			
			break;
		case 1:
			F.line = 219;
			m_65357[m_65357_Idx].pos.Field0 = addInt(m_65357[m_65357_Idx].pos.Field0, 1);
			if (!(posVerify_65189(m_65357, m_65357_Idx, board_65358))) {
			F.line = 221;
			m_65357[m_65357_Idx].pos.Field0 = subInt(m_65357[m_65357_Idx].pos.Field0, 1);
			F.line = 222;
			result_65360 = false;
			break BeforeRet;
			}
			
			break;
		case 0:
			F.line = 224;
			result_65360 = false;
			break BeforeRet;
			break;
		}
		F.line = 225;
		result_65360 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65360;

}

function newSeq_66230(len_66234) {
	var result_66236 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_66236 = new Array(len_66234); for (var i=0;i<len_66234;++i) {result_66236[i]=[null, null, null, null, null, null, null, null, null, null, null, null];}	framePtr = F.prev;

	return result_66236;

}

function X5BX5D__65965(a_65973, x_65976) {
	var result_65978 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66001 = x_65976.a;
		F.line = 3585;
		var L_66228 = addInt(subInt(subInt(22, x_65976.b), xa_66001), 1);
		F.line = 3586;
		result_65978 = nimCopy(null, newSeq_66230(chckRange(L_66228, 0, 2147483647)), NTI66235);
		L1: do {
			F.line = 3587;
			var i_66255 = 0;
			F.line = 3519;
			var i_66267 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66267 < L_66228)) break L3;
						F.line = 3521;
						i_66255 = i_66267;
						F.line = 3587;
						nimCopy(result_65978[chckIndx(i_66255, 0, result_65978.length+0-1)-0], a_65973[chckIndx(addInt(i_66255, xa_66001), 0, a_65973.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_66267 = addInt(i_66267, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65978;

}

function dotdot__51023(a_51028, b_51030) {
	var result_51038 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_51038.a = a_51028;
		F.line = 326;
		result_51038.b = b_51030;
	framePtr = F.prev;

	return result_51038;

}

function all_66312(s_66317, pred_66322) {
	var result_66323 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_66348 = null;
			F.line = 2185;
			var i_66352 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_66352 < (s_66317 != null ? s_66317.length : 0))) break L3;
						F.line = 2187;
						i_66348 = s_66317[chckIndx(i_66352, 0, s_66317.length+0-1)-0];
						if (!(pred_66322(i_66348))) {
						F.line = 436;
						result_66323 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_66352 = addInt(i_66352, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_66323 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_66323;

}

function X5BX5D__66442(a_66450, x_66453) {
	var result_66455 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_66601 = x_66453.a;
		F.line = 3585;
		var L_66801 = addInt(subInt(x_66453.b, xa_66601), 1);
		F.line = 3586;
		result_66455 = nimCopy(null, newSeq_66230(chckRange(L_66801, 0, 2147483647)), NTI66235);
		L1: do {
			F.line = 3587;
			var i_66817 = 0;
			F.line = 3519;
			var i_66829 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_66829 < L_66801)) break L3;
						F.line = 3521;
						i_66817 = i_66829;
						F.line = 3587;
						nimCopy(result_66455[chckIndx(i_66817, 0, result_66455.length+0-1)-0], a_66450[chckIndx(addInt(i_66817, xa_66601), 0, a_66450.length+0-1)-0], NTI64063);
						F.line = 3522;
						i_66829 = addInt(i_66829, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_66455;

}

function dotdot__50107(a_50112, b_50114) {
	var result_50116 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_50116.a = a_50112;
		F.line = 326;
		result_50116.b = b_50114;
	framePtr = F.prev;

	return result_50116;

}

function sysFatal_67647(message_67653) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_67655 = null;
		F.line = 2831;
		e_67655 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_67655.message = nimCopy(null, message_67653, NTI138);
		F.line = 2833;
		raiseException(e_67655, "RangeError");
	framePtr = F.prev;

	
}

function X5BX5Deq__67273(a_67282, x_67285, b_67288) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3591;
		var xa_67401 = x_67285.a;
		F.line = 3592;
		var L_67628 = addInt(subInt(subInt(12, x_67285.b), xa_67401), 1);
		if ((L_67628 == (b_67288 != null ? b_67288.length : 0))) {
		L1: do {
			F.line = 3594;
			var i_67643 = 0;
			F.line = 3519;
			var i_67669 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67669 < L_67628)) break L3;
						F.line = 3521;
						i_67643 = i_67669;
						F.line = 3594;
						a_67282[chckIndx(addInt(i_67643, xa_67401), 0, a_67282.length+0-1)-0] = b_67288[chckIndx(i_67643, 0, b_67288.length+0-1)-0];
						F.line = 3522;
						i_67669 = addInt(i_67669, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 3596;
		sysFatal_67647(makeNimstrLit("different lengths for slice assignment"));
		}
		
	framePtr = F.prev;

	
}

function newSeq_67230(len_67234) {
	var result_67236 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_67236 = new Array(len_67234); for (var i=0;i<len_67234;++i) {result_67236[i]=null;}	framePtr = F.prev;

	return result_67236;

}

function X5BX5D__66898(a_66906, x_66909) {
	var result_66911 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_67001 = x_66909.a;
		F.line = 3585;
		var L_67228 = addInt(subInt(subInt(12, x_66909.b), xa_67001), 1);
		F.line = 3586;
		result_66911 = nimCopy(null, newSeq_67230(chckRange(L_67228, 0, 2147483647)), NTI67235);
		L1: do {
			F.line = 3587;
			var i_67255 = 0;
			F.line = 3519;
			var i_67267 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_67267 < L_67228)) break L3;
						F.line = 3521;
						i_67255 = i_67267;
						F.line = 3587;
						result_66911[chckIndx(i_67255, 0, result_66911.length+0-1)-0] = a_66906[chckIndx(addInt(i_67255, xa_67001), 0, a_66906.length+0-1)-0];
						F.line = 3522;
						i_67267 = addInt(i_67267, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_66911;

}

function lineCheck_65927(f_65930, f_65930_Idx) {

							function colonanonymous__66304(b_66306) {
								var result_66307 = false;

								var F={procname:"lineCheck.:anonymous",prev:framePtr,filename:"tetris_library.nim",line:0};
								framePtr = F;
								BeforeRet: do {
									F.line = 303;
									result_66307 = b_66306.isFilled;
									break BeforeRet;
								} while (false);
								framePtr = F.prev;

								return result_66307;

							}

	var result_65931 = 0;

	var F={procname:"tetris.lineCheck",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 301;
		result_65931 = 0;
		L1: do {
			F.line = 302;
			var i_66301 = 0;
			F.line = 302;
			var line_66302 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2283;
			var colontmp__67778 = null;
			F.line = 302;
			colontmp__67778 = X5BX5D__65965(f_65930[f_65930_Idx].board, dotdot__51023(0, 2));
			F.line = 2285;
			var i_67781 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67781 < (colontmp__67778 != null ? colontmp__67778.length : 0))) break L3;
						F.line = 2287;
						i_66301 = i_67781;
						F.line = 2287;
						nimCopy(line_66302, colontmp__67778[chckIndx(i_67781, 0, colontmp__67778.length+0-1)-0], NTI64063);
						if (all_66312(line_66302, colonanonymous__66304)) {
						F.line = 304;
						result_65931 = addInt(result_65931, 1);
						L4: do {
							F.line = 305;
							var t_66844 = 0;
							F.line = 305;
							var line_66845 = [null, null, null, null, null, null, null, null, null, null, null, null];
							F.line = 2283;
							var colontmp__67763 = null;
							F.line = 305;
							colontmp__67763 = X5BX5D__66442(f_65930[f_65930_Idx].board, dotdot__50107(0, subInt(i_66301, 1)));
							F.line = 2285;
							var i_67766 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67766 < (colontmp__67763 != null ? colontmp__67763.length : 0))) break L6;
										F.line = 2287;
										t_66844 = i_67766;
										F.line = 2287;
										nimCopy(line_66845, colontmp__67763[chckIndx(i_67766, 0, colontmp__67763.length+0-1)-0], NTI64063);
										F.line = 306;
										X5BX5Deq__67273(f_65930[f_65930_Idx].board[chckIndx(addInt(t_66844, 1), 0, f_65930[f_65930_Idx].board.length+0-1)-0], dotdot__51023(1, 2), X5BX5D__66898(line_66845, dotdot__51023(1, 2)));
										F.line = 2288;
										i_67766 = addInt(i_67766, 1);
									}
							} while(false);
						} while(false);
						F.line = 307;
						F.line = 307;
						var ln_67708 = nimCopy(null, [], NTI67707);
						L7: do {
							F.line = 307;
							var __67717 = 0;
							F.line = 2045;
							var res_67773 = 0;
							L8: do {
								F.line = 2046;
									L9: while (true) {
									if (!(res_67773 <= 9)) break L9;
										F.line = 2047;
										__67717 = res_67773;
										F.line = 307;
										if (ln_67708 != null) { ln_67708.push({isFilled: false, color: 0}); } else { ln_67708 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_67773 = addInt(res_67773, 1);
									}
							} while(false);
						} while(false);
						X5BX5Deq__67273(f_65930[f_65930_Idx].board[chckIndx(0, 0, f_65930[f_65930_Idx].board.length+0-1)-0], dotdot__51023(1, 2), ln_67708);
						}
						
						F.line = 2288;
						i_67781 = addInt(i_67781, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65931;

}

function X5BX5D__65496(s_65503, x_65506) {
	var result_65508 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		var a_65601 = x_65506.a;
		F.line = 3606;
		var L_65807 = addInt(subInt(subInt((s_65503 != null ? s_65503.length : 0), x_65506.b), a_65601), 1);
		F.line = 3607;
		result_65508 = new Array(chckRange(L_65807, 0, 2147483647)); for (var i=0;i<chckRange(L_65807, 0, 2147483647);++i) {result_65508[i]=null;}		L1: do {
			F.line = 3608;
			var i_65826 = 0;
			F.line = 3519;
			var i_65834 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65834 < L_65807)) break L3;
						F.line = 3521;
						i_65826 = i_65834;
						F.line = 3608;
						result_65508[chckIndx(i_65826, 0, result_65508.length+0-1)-0] = s_65503[chckIndx(addInt(i_65826, a_65601), 0, s_65503.length+0-1)-0];
						F.line = 3522;
						i_65834 = addInt(i_65834, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_65508;

}

function pop0_65466(ms_65470, ms_65470_Idx) {
	var result_65471 = null;

	var F={procname:"tetris.pop0",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 272;
		result_65471 = ms_65470[ms_65470_Idx][chckIndx(0, 0, ms_65470[ms_65470_Idx].length+0-1)-0];
		F.line = 273;
		ms_65470[ms_65470_Idx] = nimCopy(null, X5BX5D__65496(ms_65470[ms_65470_Idx], dotdot__51023(1, 1)), NTI65507);
	framePtr = F.prev;

	return result_65471;

}

function add_65864(x_65870, x_65870_Idx, y_65873) {
	var F={procname:"add.add",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 1528;
		var xl_65881 = (x_65870[x_65870_Idx] != null ? x_65870[x_65870_Idx].length : 0);
		F.line = 1529;
		if (x_65870[x_65870_Idx].length < chckRange(addInt(xl_65881, (y_65873 != null ? y_65873.length : 0)), 0, 2147483647)) { for (var i=x_65870[x_65870_Idx].length;i<chckRange(addInt(xl_65881, (y_65873 != null ? y_65873.length : 0)), 0, 2147483647);++i) x_65870[x_65870_Idx].push(null); }
               else { x_65870[x_65870_Idx].length = chckRange(addInt(xl_65881, (y_65873 != null ? y_65873.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1530;
			var i_65913 = 0;
			F.line = 2042;
			var colontmp__65915 = 0;
			F.line = 1530;
			colontmp__65915 = (y_65873 != null ? (y_65873.length-1) : -1);
			F.line = 2045;
			var res_65918 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_65918 <= colontmp__65915)) break L3;
						F.line = 2047;
						i_65913 = res_65918;
						F.line = 1530;
						x_65870[x_65870_Idx][chckIndx(addInt(xl_65881, i_65913), 0, x_65870[x_65870_Idx].length+0-1)-0] = y_65873[chckIndx(i_65913, 0, y_65873.length+0-1)-0];
						F.line = 2048;
						res_65918 = addInt(res_65918, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function random_41127(max_41129) {
	var result_41130 = 0.0;

	var F={procname:"random.random",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 94;
		var x_41132 = next_40842(state_40605[0]);
		F.line = 96;
		result_41130 = ((x_41132 / 4294967295) * max_41129);
	framePtr = F.prev;

	return result_41130;

}

function shuffle_65426(arr_65430, arr_65430_Idx) {
	var F={procname:"tetris.shuffle",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 254;
		var n_65438 = (arr_65430[arr_65430_Idx] != null ? arr_65430[arr_65430_Idx].length : 0);
		F.line = 255;
		var t_65439 = 0;
		F.line = 256;
		var i_65440 = 0;
		L1: do {
			F.line = 258;
				L2: while (true) {
				if (!(0 < n_65438)) break L2;
					F.line = 259;
					i_65440 = ((Math.floor((random_41127(1.0000000000000000e+000) * n_65438)))|0);
					F.line = 260;
					n_65438 = subInt(n_65438, 1);
					F.line = 261;
					var __65450 = {Field0: arr_65430[arr_65430_Idx][chckIndx(i_65440, 0, arr_65430[arr_65430_Idx].length+0-1)-0], Field1: arr_65430[arr_65430_Idx][chckIndx(n_65438, 0, arr_65430[arr_65430_Idx].length+0-1)-0]};
					F.line = 261;
					arr_65430[arr_65430_Idx][chckIndx(n_65438, 0, arr_65430[arr_65430_Idx].length+0-1)-0] = __65450["Field0"];
					F.line = 261;
					arr_65430[arr_65430_Idx][chckIndx(i_65440, 0, arr_65430[arr_65430_Idx].length+0-1)-0] = __65450["Field1"];
				}
		} while(false);
	framePtr = F.prev;

	
}

function shuffled_65457(arr_65460) {
	var result_65462 = [null];

	var F={procname:"tetris.shuffled",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 265;
		result_65462[0] = nimCopy(null, arr_65460, NTI65459);
		F.line = 266;
		shuffle_65426(result_65462, 0);
	framePtr = F.prev;

	return result_65462[0];

}

function X5BX5D__64600(s_64607, x_64610) {
	var result_64612 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		var a_64801 = x_64610.a;
		F.line = 3606;
		var L_65007 = addInt(subInt(subInt((s_64607 != null ? s_64607.length : 0), x_64610.b), a_64801), 1);
		F.line = 3607;
		result_64612 = new Array(chckRange(L_65007, 0, 2147483647)); for (var i=0;i<chckRange(L_65007, 0, 2147483647);++i) {result_64612[i]=null;}		L1: do {
			F.line = 3608;
			var i_65026 = 0;
			F.line = 3519;
			var i_65034 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65034 < L_65007)) break L3;
						F.line = 3521;
						i_65026 = i_65034;
						F.line = 3608;
						result_64612[chckIndx(i_65026, 0, result_64612.length+0-1)-0] = nimCopy(null, s_64607[chckIndx(addInt(i_65026, a_64801), 0, s_64607.length+0-1)-0], NTI64059);
						F.line = 3522;
						i_65034 = addInt(i_65034, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_64612;

}

function renderBox_64464(m_64467, m_64467_Idx) {

											function setBox_64468(b_64471, b_64471_Idx, m_64472, i_64473, j_64474, t_64475, s_64476) {
													var Tmp1;

												var F={procname:"renderBox.setBox",prev:framePtr,filename:"tetris_library.nim",line:0};
												framePtr = F;
													F.line = 122;
													if (m_64472.kind.shape[chckIndx(i_64473, 0, m_64472.kind.shape.length+0-1)-0][chckIndx(j_64474, 0, m_64472.kind.shape[chckIndx(i_64473, 0, m_64472.kind.shape.length+0-1)-0].length+0-1)-0]) {
													Tmp1 = m_64472.kind.color;
													}
													else {
													Tmp1 = 0;
													}
													
													var itsColor_64477 = Tmp1;
													F.line = 123;
													b_64471[b_64471_Idx][chckIndx(t_64475, 0, b_64471[b_64471_Idx].length+0-1)-0][chckIndx(s_64476, 0, b_64471[b_64471_Idx][chckIndx(t_64475, 0, b_64471[b_64471_Idx].length+0-1)-0].length+0-1)-0] = {isFilled: m_64472.kind.shape[chckIndx(i_64473, 0, m_64472.kind.shape.length+0-1)-0][chckIndx(j_64474, 0, m_64472.kind.shape[chckIndx(i_64473, 0, m_64472.kind.shape.length+0-1)-0].length+0-1)-0], color: itsColor_64477};
												framePtr = F.prev;

												
											}

	var F={procname:"tetris.renderBox",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 125;
		var l_64486 = subInt((m_64467[m_64467_Idx].kind.shape != null ? m_64467[m_64467_Idx].kind.shape.length : 0), 1);
		F.line = 127;
		var b_64511 = [[[{isFilled: false, color: 0}]]];
		F.line = 128;
		var bb_64525 = [{isFilled: false, color: 0}];
		L1: do {
			F.line = 130;
			var i_64534 = 0;
			F.line = 2045;
			var res_65128 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_65128 <= l_64486)) break L3;
						F.line = 2047;
						i_64534 = res_65128;
						F.line = 131;
						bb_64525 = nimCopy(null, [{isFilled: false, color: 0}], NTI64499);
						L4: do {
							F.line = 132;
							var j_64555 = 0;
							F.line = 2045;
							var res_65122 = 1;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_65122 <= l_64486)) break L6;
										F.line = 2047;
										j_64555 = res_65122;
										F.line = 133;
										if (bb_64525 != null) { bb_64525.push({isFilled: false, color: 0}); } else { bb_64525 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_65122 = addInt(res_65122, 1);
									}
							} while(false);
						} while(false);
						F.line = 134;
						var Tmp7 = nimCopy(null, bb_64525, NTI64512);
						if (b_64511[0] != null) { b_64511[0].push(Tmp7); } else { b_64511[0] = [Tmp7]; };
						F.line = 2048;
						res_65128 = addInt(res_65128, 1);
					}
			} while(false);
		} while(false);
		F.line = 136;
		b_64511[0] = nimCopy(null, X5BX5D__64600(b_64511[0], dotdot__51023(1, 1)), NTI64611);
		F.line = 138;
		switch (m_64467[m_64467_Idx].dir) {
		case 0:
			L8: do {
				F.line = 140;
				var i_65044 = 0;
				F.line = 2045;
				var res_65143 = 0;
				L9: do {
					F.line = 2046;
						L10: while (true) {
						if (!(res_65143 <= l_64486)) break L10;
							F.line = 2047;
							i_65044 = res_65143;
							L11: do {
								F.line = 141;
								var j_65053 = 0;
								F.line = 2045;
								var res_65137 = 0;
								L12: do {
									F.line = 2046;
										L13: while (true) {
										if (!(res_65137 <= l_64486)) break L13;
											F.line = 2047;
											j_65053 = res_65137;
											F.line = 142;
											setBox_64468(b_64511, 0, m_64467[m_64467_Idx], i_65044, j_65053, i_65044, j_65053);
											F.line = 2048;
											res_65137 = addInt(res_65137, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_65143 = addInt(res_65143, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			L14: do {
				F.line = 144;
				var i_65063 = 0;
				F.line = 2045;
				var res_65157 = 0;
				L15: do {
					F.line = 2046;
						L16: while (true) {
						if (!(res_65157 <= l_64486)) break L16;
							F.line = 2047;
							i_65063 = res_65157;
							L17: do {
								F.line = 145;
								var j_65072 = 0;
								F.line = 2045;
								var res_65151 = 0;
								L18: do {
									F.line = 2046;
										L19: while (true) {
										if (!(res_65151 <= l_64486)) break L19;
											F.line = 2047;
											j_65072 = res_65151;
											F.line = 146;
											setBox_64468(b_64511, 0, m_64467[m_64467_Idx], i_65063, j_65072, j_65072, subInt(l_64486, i_65063));
											F.line = 2048;
											res_65151 = addInt(res_65151, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_65157 = addInt(res_65157, 1);
						}
				} while(false);
			} while(false);
			break;
		case 2:
			L20: do {
				F.line = 148;
				var i_65082 = 0;
				F.line = 2045;
				var res_65171 = 0;
				L21: do {
					F.line = 2046;
						L22: while (true) {
						if (!(res_65171 <= l_64486)) break L22;
							F.line = 2047;
							i_65082 = res_65171;
							L23: do {
								F.line = 149;
								var j_65091 = 0;
								F.line = 2045;
								var res_65165 = 0;
								L24: do {
									F.line = 2046;
										L25: while (true) {
										if (!(res_65165 <= l_64486)) break L25;
											F.line = 2047;
											j_65091 = res_65165;
											F.line = 150;
											setBox_64468(b_64511, 0, m_64467[m_64467_Idx], i_65082, j_65091, subInt(l_64486, i_65082), subInt(l_64486, j_65091));
											F.line = 2048;
											res_65165 = addInt(res_65165, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_65171 = addInt(res_65171, 1);
						}
				} while(false);
			} while(false);
			break;
		case 3:
			L26: do {
				F.line = 152;
				var i_65101 = 0;
				F.line = 2045;
				var res_65185 = 0;
				L27: do {
					F.line = 2046;
						L28: while (true) {
						if (!(res_65185 <= l_64486)) break L28;
							F.line = 2047;
							i_65101 = res_65185;
							L29: do {
								F.line = 153;
								var j_65110 = 0;
								F.line = 2045;
								var res_65179 = 0;
								L30: do {
									F.line = 2046;
										L31: while (true) {
										if (!(res_65179 <= l_64486)) break L31;
											F.line = 2047;
											j_65110 = res_65179;
											F.line = 154;
											setBox_64468(b_64511, 0, m_64467[m_64467_Idx], i_65101, j_65110, subInt(l_64486, j_65110), i_65101);
											F.line = 2048;
											res_65179 = addInt(res_65179, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_65185 = addInt(res_65185, 1);
						}
				} while(false);
			} while(false);
			break;
		}
		F.line = 156;
		m_64467[m_64467_Idx].boxs = nimCopy(null, b_64511[0], NTI64018);
	framePtr = F.prev;

	
}

function dropStart(f_65840, f_65840_Idx) {
	var F={procname:"tetris.dropStart",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 282;
		var mino_65842 = pop0_65466(f_65840[f_65840_Idx], "minos");
		if (((f_65840[f_65840_Idx].minos != null ? f_65840[f_65840_Idx].minos.length : 0) < 4)) {
		F.line = 284;
		add_65864(f_65840[f_65840_Idx], "minos", shuffled_65457([I_64175[0], O_64213[0], S_64263[0], Z_64313[0], J_64363[0], L_64413[0], T_64463[0]]));
		}
		
		F.line = 296;
		f_65840[f_65840_Idx].am = {pos: nimCopy(null, mino_65842.firstPos, NTI64014), kind: mino_65842, dir: 0, boxs: null};
		F.line = 297;
		renderBox_64464(f_65840[f_65840_Idx], "am");
		if (!(posVerify_65189(f_65840[f_65840_Idx], "am", f_65840[f_65840_Idx].board))) {
		F.line = 298;
		gameOver_65424();
		}
		
	framePtr = F.prev;

	
}

function fixAM_65415(f_65418, f_65418_Idx) {
	var F={procname:"tetris.fixAM",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(posVerify_65189(f_65418[f_65418_Idx], "am", f_65418[f_65418_Idx].board))) {
		F.line = 310;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 311;
			var i_67800 = 0;
			F.line = 311;
			var bs_67801 = null;
			F.line = 2283;
			var colontmp__67843 = null;
			F.line = 311;
			colontmp__67843 = f_65418[f_65418_Idx].am.boxs;
			F.line = 2285;
			var i_67846 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_67846 < (colontmp__67843 != null ? colontmp__67843.length : 0))) break L3;
						F.line = 2287;
						i_67800 = i_67846;
						F.line = 2287;
						bs_67801 = colontmp__67843[chckIndx(i_67846, 0, colontmp__67843.length+0-1)-0];
						L4: do {
							F.line = 312;
							var j_67815 = 0;
							F.line = 312;
							var b_67816 = null;
							F.line = 2285;
							var i_67842 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_67842 < (bs_67801 != null ? bs_67801.length : 0))) break L6;
										F.line = 2287;
										j_67815 = i_67842;
										F.line = 2287;
										b_67816 = bs_67801[chckIndx(i_67842, 0, bs_67801.length+0-1)-0];
										if (b_67816.isFilled) {
										F.line = 314;
										f_65418[f_65418_Idx].board[chckIndx(addInt(f_65418[f_65418_Idx].am.pos.Field0, i_67800), 0, f_65418[f_65418_Idx].board.length+0-1)-0][chckIndx(addInt(f_65418[f_65418_Idx].am.pos.Field1, j_67815), 0, f_65418[f_65418_Idx].board[chckIndx(addInt(f_65418[f_65418_Idx].am.pos.Field0, i_67800), 0, f_65418[f_65418_Idx].board.length+0-1)-0].length+0-1)-0] = b_67816;
										}
										
										F.line = 2288;
										i_67842 = addInt(i_67842, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_67846 = addInt(i_67846, 1);
					}
			} while(false);
		} while(false);
		F.line = 316;
		var cllines_67817 = lineCheck_65927(f_65418, f_65418_Idx);
		F.line = 317;
		f_65418[f_65418_Idx].clearlines = addInt(f_65418[f_65418_Idx].clearlines, cllines_67817);
		F.line = 319;
		f_65418[f_65418_Idx].score = addInt(f_65418[f_65418_Idx].score, [0, 1, 3, 6, 9][chckIndx(cllines_67817, 0, [0, 1, 3, 6, 9].length+0-1)-0]);
		F.line = 320;
		dropStart(f_65418, f_65418_Idx);
	} while (false);
	framePtr = F.prev;

	
}

function dropStep(f_65422, f_65422_Idx) {
	var F={procname:"tetris.dropStep",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		if ((modInt(f_65422[f_65422_Idx].frame, 180) == 0)) {
		if (!(move_65354(f_65422[f_65422_Idx], "am", f_65422[f_65422_Idx].board, 1))) {
		F.line = 234;
		fixAM_65415(f_65422, f_65422_Idx);
		}
		
		}
		
	framePtr = F.prev;

	
}
randomize_63001();
var I_64175 = [{shape: nimCopy(null, [[false, false, false, false], [true, true, true, true], [false, false, false, false], [false, false, false, false]], NTI64173), color: 1, firstPos: {Field0: 0, Field1: 4}}];
var O_64213 = [{shape: nimCopy(null, [[true, true], [true, true]], NTI64211), color: 2, firstPos: {Field0: 0, Field1: 5}}];
var S_64263 = [{shape: nimCopy(null, [[false, true, true], [true, true, false], [false, false, false]], NTI64261), color: 3, firstPos: {Field0: 0, Field1: 4}}];
var Z_64313 = [{shape: nimCopy(null, [[true, true, false], [false, true, true], [false, false, false]], NTI64261), color: 4, firstPos: {Field0: 0, Field1: 4}}];
var J_64363 = [{shape: nimCopy(null, [[true, false, false], [true, true, true], [false, false, false]], NTI64261), color: 5, firstPos: {Field0: 0, Field1: 4}}];
var L_64413 = [{shape: nimCopy(null, [[false, false, true], [true, true, true], [false, false, false]], NTI64261), color: 6, firstPos: {Field0: 0, Field1: 4}}];
var T_64463 = [{shape: nimCopy(null, [[false, true, false], [true, true, true], [false, false, false]], NTI64261), color: 7, firstPos: {Field0: 0, Field1: 4}}];
var F_68024 = [null];

function gameInit() {
	var F={procname:"tetris.gameInit",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 10;
		var board_68032 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
		L1: do {
			F.line = 12;
			var i_68041 = 0;
			F.line = 3519;
			var i_68089 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_68089 < 21)) break L3;
						F.line = 3521;
						i_68041 = i_68089;
						F.line = 13;
						board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0][chckIndx(0, 0, board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 15;
						board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0][chckIndx(11, 0, board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						L4: do {
							F.line = 17;
							var j_68050 = 0;
							F.line = 3519;
							var i_68085 = 1;
							L5: do {
								F.line = 3520;
									L6: while (true) {
									if (!(i_68085 < 11)) break L6;
										F.line = 3521;
										j_68050 = i_68085;
										F.line = 18;
										board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0][chckIndx(j_68050, 0, board_68032[chckIndx(i_68041, 0, board_68032.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										F.line = 3522;
										i_68085 = addInt(i_68085, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_68089 = addInt(i_68089, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 20;
			var i_68059 = 0;
			F.line = 3519;
			var i_68095 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_68095 < 12)) break L9;
						F.line = 3521;
						i_68059 = i_68095;
						F.line = 22;
						board_68032[chckIndx(21, 0, board_68032.length+0-1)-0][chckIndx(i_68059, 0, board_68032[chckIndx(21, 0, board_68032.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 3522;
						i_68095 = addInt(i_68095, 1);
					}
			} while(false);
		} while(false);
		F.line = 25;
		var mns_68072 = [[I_64175[0], O_64213[0], S_64263[0], Z_64313[0], J_64363[0], L_64413[0], T_64463[0]]];
		F.line = 27;
		shuffle_65426(mns_68072, 0);
		F.line = 28;
		F_68024[0] = {board: nimCopy(null, board_68032, NTI68031), frame: 0, minos: nimCopy(null, mns_68072[0], NTI65861), score: 0, clearlines: 0, am: null, gm: null};
		F.line = 29;
		dropStart(F_68024, 0);
	framePtr = F.prev;

	
}
var gameOverFlag_68098 = [false];
var buttons_68138 = [nimCopy(null, [], NTI68137)];
L2: do {
	var b_68221 = [0];
	L3: do {
		var v_68238 = 0;
		var res_68240 = 0;
		L4: do {
				L5: while (true) {
				if (!(res_68240 <= 8)) break L5;
					v_68238 = res_68240;
					b_68221[0] = v_68238;
					if (buttons_68138[0] != null) { buttons_68138[0].push({kind: b_68221[0], isPushed: false, contFlames: 0}); } else { buttons_68138[0] = [{kind: b_68221[0], isPushed: false, contFlames: 0}]; };
					res_68240 += 1;
				}
		} while(false);
	} while(false);
} while(false);

function posCorrect_65276(m_65279, m_65279_Idx, board_65280) {
	var result_65281 = false;

	var F={procname:"tetris.posCorrect",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 173;
			var i_65297 = 0;
			F.line = 3518;
			var colontmp__65317 = 0;
			F.line = 173;
			colontmp__65317 = (m_65279[m_65279_Idx].boxs != null ? m_65279[m_65279_Idx].boxs.length : 0);
			F.line = 3519;
			var i_65320 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_65320 < colontmp__65317)) break L3;
						F.line = 3521;
						i_65297 = i_65320;
						F.line = 174;
						m_65279[m_65279_Idx].pos.Field1 = addInt(m_65279[m_65279_Idx].pos.Field1, i_65297);
						if (posVerify_65189(m_65279, m_65279_Idx, board_65280)) {
						F.line = 176;
						result_65281 = true;
						break BeforeRet;
						}
						
						F.line = 177;
						m_65279[m_65279_Idx].pos.Field1 = subInt(m_65279[m_65279_Idx].pos.Field1, mulInt(2, i_65297));
						if (posVerify_65189(m_65279, m_65279_Idx, board_65280)) {
						F.line = 179;
						result_65281 = true;
						break BeforeRet;
						}
						
						F.line = 3522;
						i_65320 = addInt(i_65320, 1);
					}
			} while(false);
		} while(false);
		F.line = 186;
		result_65281 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65281;

}

function spin_65322(m_65325, m_65325_Idx, a_65328, board_65329) {
	var F={procname:"tetris.spin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 189;
		var pre_dir_65330 = m_65325[m_65325_Idx].dir;
		F.line = 190;
		m_65325[m_65325_Idx].dir = a_65328[chckIndx(m_65325[m_65325_Idx].dir, 0, a_65328.length+0-1)-0];
		F.line = 191;
		renderBox_64464(m_65325, m_65325_Idx);
		if (!(posVerify_65189(m_65325, m_65325_Idx, board_65329))) {
		F.line = 194;
		var pre_pos_65338 = {Field0: m_65325[m_65325_Idx].pos.Field0, Field1: m_65325[m_65325_Idx].pos.Field1};
		if (!(posCorrect_65276(m_65325, m_65325_Idx, board_65329))) {
		F.line = 196;
		var __65339 = nimCopy(null, pre_pos_65338, NTI65337);
		F.line = 196;
		m_65325[m_65325_Idx].pos.Field0 = __65339["Field0"];
		F.line = 196;
		m_65325[m_65325_Idx].pos.Field1 = __65339["Field1"];
		F.line = 197;
		m_65325[m_65325_Idx].dir = pre_dir_65330;
		}
		
		F.line = 198;
		renderBox_64464(m_65325, m_65325_Idx);
		}
		
	framePtr = F.prev;

	
}

function rightSpin_65340(m_65343, m_65343_Idx, board_65344) {
	var F={procname:"tetris.rightSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 201;
		spin_65322(m_65343, m_65343_Idx, [1, 2, 3, 0], board_65344);
	framePtr = F.prev;

	
}

function leftSpin_65347(m_65350, m_65350_Idx, board_65351) {
	var F={procname:"tetris.leftSpin",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		F.line = 204;
		spin_65322(m_65350, m_65350_Idx, [3, 0, 1, 2], board_65351);
	framePtr = F.prev;

	
}

function buttonCheck_68241(c_68245) {
			var Tmp4;
			var Tmp5;

	var F={procname:"tetris.buttonCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 49;
			var i_68299 = 0;
			F.line = 49;
			var b_68300 = false;
			F.line = 2266;
			var i_68449 = 0;
			if ((i_68449 <= 7)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_68299 = i_68449;
						F.line = 2269;
						b_68300 = c_68245[chckIndx(i_68449, 0, c_68245.length+0-1)-0];
						if (!(b_68300)) {
						F.line = 51;
						buttons_68138[0][chckIndx(i_68299, 0, buttons_68138[0].length+0-1)-0].isPushed = false;
						F.line = 52;
						buttons_68138[0][chckIndx(i_68299, 0, buttons_68138[0].length+0-1)-0].contFlames = 0;
						}
						
						if ((7 <= i_68449)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_68449 = addInt(i_68449, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (c_68245[chckIndx(1, 0, c_68245.length+0-1)-0]) {
		if (!(buttons_68138[0][chckIndx(1, 0, buttons_68138[0].length+0-1)-0].isPushed)) {
		F.line = 56;
		rightSpin_65340(F_68024[0], "am", F_68024[0].board);
		F.line = 57;
		buttons_68138[0][chckIndx(1, 0, buttons_68138[0].length+0-1)-0].isPushed = true;
		}
		
		}
		else {
		if (c_68245[chckIndx(2, 0, c_68245.length+0-1)-0]) {
		if (!(buttons_68138[0][chckIndx(2, 0, buttons_68138[0].length+0-1)-0].isPushed)) {
		F.line = 60;
		leftSpin_65347(F_68024[0], "am", F_68024[0].board);
		F.line = 61;
		buttons_68138[0][chckIndx(2, 0, buttons_68138[0].length+0-1)-0].isPushed = true;
		}
		
		}
		}
		if (c_68245[chckIndx(6, 0, c_68245.length+0-1)-0]) {
			if (!(buttons_68138[0][chckIndx(6, 0, buttons_68138[0].length+0-1)-0].isPushed)) Tmp4 = true; else {				Tmp4 = (30 < buttons_68138[0][chckIndx(6, 0, buttons_68138[0].length+0-1)-0].contFlames);			}		if (Tmp4) {
		F.line = 65;
		move_65354(F_68024[0], "am", F_68024[0].board, 2);
		F.line = 66;
		buttons_68138[0][chckIndx(6, 0, buttons_68138[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 68;
		buttons_68138[0][chckIndx(6, 0, buttons_68138[0].length+0-1)-0].contFlames = addInt(buttons_68138[0][chckIndx(6, 0, buttons_68138[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		else {
		if (c_68245[chckIndx(7, 0, c_68245.length+0-1)-0]) {
			if (!(buttons_68138[0][chckIndx(7, 0, buttons_68138[0].length+0-1)-0].isPushed)) Tmp5 = true; else {				Tmp5 = (30 < buttons_68138[0][chckIndx(7, 0, buttons_68138[0].length+0-1)-0].contFlames);			}		if (Tmp5) {
		F.line = 71;
		move_65354(F_68024[0], "am", F_68024[0].board, 3);
		F.line = 72;
		buttons_68138[0][chckIndx(7, 0, buttons_68138[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 74;
		buttons_68138[0][chckIndx(7, 0, buttons_68138[0].length+0-1)-0].contFlames = addInt(buttons_68138[0][chckIndx(7, 0, buttons_68138[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		}
		if (c_68245[chckIndx(5, 0, c_68245.length+0-1)-0]) {
		F.line = 77;
		move_65354(F_68024[0], "am", F_68024[0].board, 1);
		}
		
		if (c_68245[chckIndx(3, 0, c_68245.length+0-1)-0]) {
		if (!(buttons_68138[0][chckIndx(3, 0, buttons_68138[0].length+0-1)-0].isPushed)) {
		L6: do {
			F.line = 81;
				L7: while (true) {
				if (!move_65354(F_68024[0], "am", F_68024[0].board, 1)) break L7;
				}
		} while(false);
		F.line = 82;
		fixAM_65415(F_68024, 0);
		F.line = 83;
		buttons_68138[0][chckIndx(3, 0, buttons_68138[0].length+0-1)-0].isPushed = true;
		}
		
		}
		
	framePtr = F.prev;

	
}

function gameStep(c_68455) {
	var F={procname:"tetris.gameStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (gameOverFlag_68098[0]) {
		F.line = 86;
		break BeforeRet;
		}
		
		F.line = 88;
		buttonCheck_68241(c_68455);
		F.line = 89;
		F_68024[0].frame = addInt(F_68024[0].frame, 1);
		F.line = 90;
		dropStep(F_68024, 0);
	} while (false);
	framePtr = F.prev;

	
}

function fixGhost_67847(f_67850, f_67850_Idx) {
	var F={procname:"tetris.fixGhost",prev:framePtr,filename:"tetris_library.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 323;
			var i_67904 = 0;
			F.line = 323;
			var line_67905 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2264;
			var colontmp__67999 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
			F.line = 323;
			nimCopy(colontmp__67999, f_67850[f_67850_Idx].board, NTI64020);
			F.line = 2266;
			var i_68002 = 0;
			if ((i_68002 <= 21)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_67904 = i_68002;
						F.line = 2269;
						nimCopy(line_67905, colontmp__67999[chckIndx(i_68002, 0, colontmp__67999.length+0-1)-0], NTI64063);
						L4: do {
							F.line = 324;
							var j_67959 = 0;
							F.line = 324;
							var b_67960 = null;
							F.line = 2266;
							var i_67998 = 0;
							if ((i_67998 <= 11)) {
							L5: do {
								F.line = 2268;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2269;
										j_67959 = i_67998;
										F.line = 2269;
										b_67960 = line_67905[chckIndx(i_67998, 0, line_67905.length+0-1)-0];
										if (!(b_67960.isFilled)) {
										F.line = 326;
										f_67850[f_67850_Idx].board[chckIndx(i_67904, 0, f_67850[f_67850_Idx].board.length+0-1)-0][chckIndx(j_67959, 0, f_67850[f_67850_Idx].board[chckIndx(i_67904, 0, f_67850[f_67850_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										}
										
										if ((11 <= i_67998)) {
										F.line = 2270;
										break L5;
										}
										
										F.line = 2271;
										i_67998 = addInt(i_67998, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((21 <= i_68002)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_68002 = addInt(i_68002, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 327;
		var x_67961 = f_67850[f_67850_Idx].am.pos.Field0;
		L7: do {
			F.line = 328;
				L8: while (true) {
				if (!move_65354(f_67850[f_67850_Idx], "am", f_67850[f_67850_Idx].board, 1)) break L8;
				}
		} while(false);
		L9: do {
			F.line = 329;
			var i_67976 = 0;
			F.line = 329;
			var bs_67977 = null;
			F.line = 2283;
			var colontmp__68010 = null;
			F.line = 329;
			colontmp__68010 = f_67850[f_67850_Idx].am.boxs;
			F.line = 2285;
			var i_68013 = 0;
			L10: do {
				F.line = 2286;
					L11: while (true) {
					if (!(i_68013 < (colontmp__68010 != null ? colontmp__68010.length : 0))) break L11;
						F.line = 2287;
						i_67976 = i_68013;
						F.line = 2287;
						bs_67977 = colontmp__68010[chckIndx(i_68013, 0, colontmp__68010.length+0-1)-0];
						L12: do {
							F.line = 330;
							var j_67991 = 0;
							F.line = 330;
							var b_67992 = null;
							F.line = 2285;
							var i_68009 = 0;
							L13: do {
								F.line = 2286;
									L14: while (true) {
									if (!(i_68009 < (bs_67977 != null ? bs_67977.length : 0))) break L14;
										F.line = 2287;
										j_67991 = i_68009;
										F.line = 2287;
										b_67992 = bs_67977[chckIndx(i_68009, 0, bs_67977.length+0-1)-0];
										if (b_67992.isFilled) {
										F.line = 332;
										f_67850[f_67850_Idx].board[chckIndx(addInt(f_67850[f_67850_Idx].am.pos.Field0, i_67976), 0, f_67850[f_67850_Idx].board.length+0-1)-0][chckIndx(addInt(f_67850[f_67850_Idx].am.pos.Field1, j_67991), 0, f_67850[f_67850_Idx].board[chckIndx(addInt(f_67850[f_67850_Idx].am.pos.Field0, i_67976), 0, f_67850[f_67850_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 8};
										}
										
										F.line = 2288;
										i_68009 = addInt(i_68009, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_68013 = addInt(i_68013, 1);
					}
			} while(false);
		} while(false);
		F.line = 333;
		f_67850[f_67850_Idx].am.pos.Field0 = x_67961;
	framePtr = F.prev;

	
}

function getBoard() {
	var result_68468 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];

	var F={procname:"tetris.getBoard",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		var board_68469 = nimCopy(null, F_68024[0].board, NTI64020);
		F.line = 95;
		var am_68470 = F_68024[0].am;
		F.line = 97;
		fixGhost_67847(F_68024, 0);
		L1: do {
			F.line = 98;
			var i_68485 = 0;
			F.line = 98;
			var bs_68486 = null;
			F.line = 2283;
			var colontmp__68507 = null;
			F.line = 98;
			colontmp__68507 = am_68470.boxs;
			F.line = 2285;
			var i_68510 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_68510 < (colontmp__68507 != null ? colontmp__68507.length : 0))) break L3;
						F.line = 2287;
						i_68485 = i_68510;
						F.line = 2287;
						bs_68486 = colontmp__68507[chckIndx(i_68510, 0, colontmp__68507.length+0-1)-0];
						L4: do {
							F.line = 99;
							var j_68500 = 0;
							F.line = 99;
							var b_68501 = null;
							F.line = 2285;
							var i_68506 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_68506 < (bs_68486 != null ? bs_68486.length : 0))) break L6;
										F.line = 2287;
										j_68500 = i_68506;
										F.line = 2287;
										b_68501 = bs_68486[chckIndx(i_68506, 0, bs_68486.length+0-1)-0];
										if (b_68501.isFilled) {
										F.line = 101;
										board_68469[chckIndx(addInt(am_68470.pos.Field0, i_68485), 0, board_68469.length+0-1)-0][chckIndx(addInt(am_68470.pos.Field1, j_68500), 0, board_68469[chckIndx(addInt(am_68470.pos.Field0, i_68485), 0, board_68469.length+0-1)-0].length+0-1)-0] = b_68501;
										}
										
										F.line = 2288;
										i_68506 = addInt(i_68506, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_68510 = addInt(i_68510, 1);
					}
			} while(false);
		} while(false);
		F.line = 102;
		nimCopy(result_68468, board_68469, NTI64020);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68468;

}

function getScore() {
	var result_68513 = 0;

	var F={procname:"tetris.getScore",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 105;
		result_68513 = F_68024[0].score;
	framePtr = F.prev;

	return result_68513;

}

function getClearLines() {
	var result_68516 = 0;

	var F={procname:"tetris.getClearLines",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 108;
		result_68516 = F_68024[0].clearlines;
	framePtr = F.prev;

	return result_68516;

}

function getNext() {
										var Tmp14;

	var result_68519 = null;

	var F={procname:"tetris.getNext",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 112;
		var m_68520 = F_68024[0].minos[chckIndx(0, 0, F_68024[0].minos.length+0-1)-0];
		F.line = 113;
		var p0_68528 = modInt(((slash__22207((m_68520.shape != null ? m_68520.shape.length : 0), 2))|0), 2);
		F.line = 114;
		result_68519 = nimCopy(null, [], NTI68543);
		L1: do {
			F.line = 115;
			var __68552 = 0;
			F.line = 2045;
			var res_68644 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_68644 <= 3)) break L3;
						F.line = 2047;
						__68552 = res_68644;
						F.line = 116;
						var tmp_68569 = nimCopy(null, [], NTI68568);
						L4: do {
							F.line = 117;
							var __68578 = 0;
							F.line = 2045;
							var res_68638 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_68638 <= 3)) break L6;
										F.line = 2047;
										__68578 = res_68638;
										F.line = 118;
										if (tmp_68569 != null) { tmp_68569.push({isFilled: false, color: 0}); } else { tmp_68569 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_68638 = addInt(res_68638, 1);
									}
							} while(false);
						} while(false);
						F.line = 119;
						var Tmp7 = nimCopy(null, tmp_68569, NTI68553);
						if (result_68519 != null) { result_68519.push(Tmp7); } else { result_68519 = [Tmp7]; };
						F.line = 2048;
						res_68644 = addInt(res_68644, 1);
					}
			} while(false);
		} while(false);
		L8: do {
			F.line = 120;
			var i_68614 = 0;
			F.line = 3518;
			var colontmp__68656 = 0;
			F.line = 120;
			colontmp__68656 = (m_68520.shape != null ? m_68520.shape.length : 0);
			F.line = 3519;
			var i_68659 = 0;
			L9: do {
				F.line = 3520;
					L10: while (true) {
					if (!(i_68659 < colontmp__68656)) break L10;
						F.line = 3521;
						i_68614 = i_68659;
						L11: do {
							F.line = 121;
							var j_68630 = 0;
							F.line = 3518;
							var colontmp__68651 = 0;
							F.line = 121;
							colontmp__68651 = (m_68520.shape != null ? m_68520.shape.length : 0);
							F.line = 3519;
							var i_68654 = 0;
							L12: do {
								F.line = 3520;
									L13: while (true) {
									if (!(i_68654 < colontmp__68651)) break L13;
										F.line = 3521;
										j_68630 = i_68654;
										F.line = 122;
										if (m_68520.shape[chckIndx(i_68614, 0, m_68520.shape.length+0-1)-0][chckIndx(j_68630, 0, m_68520.shape[chckIndx(i_68614, 0, m_68520.shape.length+0-1)-0].length+0-1)-0]) {
										Tmp14 = m_68520.color;
										}
										else {
										Tmp14 = 0;
										}
										
										result_68519[chckIndx(addInt(p0_68528, i_68614), 0, result_68519.length+0-1)-0][chckIndx(addInt(p0_68528, j_68630), 0, result_68519[chckIndx(addInt(p0_68528, i_68614), 0, result_68519.length+0-1)-0].length+0-1)-0] = {isFilled: m_68520.shape[chckIndx(i_68614, 0, m_68520.shape.length+0-1)-0][chckIndx(j_68630, 0, m_68520.shape[chckIndx(i_68614, 0, m_68520.shape.length+0-1)-0].length+0-1)-0], color: Tmp14};
										F.line = 3522;
										i_68654 = addInt(i_68654, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_68659 = addInt(i_68659, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_68519;

}

function gameOver_65424() {
	var F={procname:"tetris.gameOver",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 125;
		gameOverFlag_68098[0] = true;
		F.line = 126;
		alert("gameOver!");
	framePtr = F.prev;

	
}
