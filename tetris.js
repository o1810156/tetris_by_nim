/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI35023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI38307 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI37835 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35070 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI36835 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35845 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35027 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI35085 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35029 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI38501 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38433 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI38434 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI35065 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35021 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI35508 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35940 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35007 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI35048 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35047 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35046 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI36005 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI35239 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35274 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35200 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35223 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI35138 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35185 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
NTI35138.base = NTI130;
NTI35185.base = NTI35138;
NTI35200.base = NTI130;
NTI35223.base = NTI35200;
NTI35239.base = NTI130;
NTI35274.base = NTI35239;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
NTI35048.base = NTI130;
NTI35047.base = NTI35048;
var NNI35007 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI35007, name: "dfColor", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI35007, name: "iColor", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI35007, name: "oColor", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI35007, name: "sColor", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI35007, name: "zColor", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI35007, name: "jColor", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI35007, name: "lColor", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI35007, name: "tColor", len: 0, sons: null}}};
NTI35007.node = NNI35007;
var NNI35017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI35017.node = NNI35017;
var NNI35046 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "shape", len: 0, typ: NTI35047, name: "shape", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI35007, name: "color", sons: null}, 
{kind: 1, offset: "firstPos", len: 0, typ: NTI35017, name: "firstPos", sons: null}]};
NTI35046.node = NNI35046;
NTI35013.base = NTI35046;
NTI36005.base = NTI35013;
NTI35940.base = NTI35013;
var NNI35061 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "isFilled", len: 0, typ: NTI130, name: "isFilled", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI35007, name: "color", sons: null}]};
NTI35061.node = NNI35061;
NTI35019.base = NTI35061;
NTI35508.base = NTI35019;
NTI35065.base = NTI35019;
NTI35021.base = NTI35065;
NTI38433.base = NTI35019;
NTI38434.base = NTI38433;
var NNI35027 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI35027, name: "bNon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI35027, name: "bA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI35027, name: "bB", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI35027, name: "bHd", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI35027, name: "bUp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI35027, name: "bDwn", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI35027, name: "bRgt", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI35027, name: "bLft", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI35027, name: "bHld", len: 0, sons: null}}};
NTI35027.node = NNI35027;
var NNI35085 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI35027, name: "kind", sons: null}, 
{kind: 1, offset: "isPushed", len: 0, typ: NTI130, name: "isPushed", sons: null}, 
{kind: 1, offset: "contFlames", len: 0, typ: NTI104, name: "contFlames", sons: null}]};
NTI35085.node = NNI35085;
NTI35029.base = NTI35085;
NTI38501.base = NTI35029;
var NNI35845 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI35845.node = NNI35845;
NTI35070.base = NTI35019;
NTI36835.base = NTI35070;
NTI37835.base = NTI35019;
NTI38307.base = NTI35019;
NTI35023.base = NTI35070;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}
var I_35187 = [{shape: nimCopy(null, [[false, false, false, false], [true, true, true, true], [false, false, false, false], [false, false, false, false]], NTI35185), color: 1, firstPos: {Field0: 0, Field1: 4}}];
var O_35226 = [{shape: nimCopy(null, [[true, true], [true, true]], NTI35223), color: 2, firstPos: {Field0: 0, Field1: 5}}];
var S_35276 = [{shape: nimCopy(null, [[false, true, true], [true, true, false], [false, false, false]], NTI35274), color: 3, firstPos: {Field0: 0, Field1: 4}}];
var Z_35326 = [{shape: nimCopy(null, [[true, true, false], [false, true, true], [false, false, false]], NTI35274), color: 4, firstPos: {Field0: 0, Field1: 4}}];
var J_35376 = [{shape: nimCopy(null, [[true, false, false], [true, true, true], [false, false, false]], NTI35274), color: 5, firstPos: {Field0: 0, Field1: 4}}];
var L_35426 = [{shape: nimCopy(null, [[false, false, true], [true, true, true], [false, false, false]], NTI35274), color: 6, firstPos: {Field0: 0, Field1: 4}}];
var T_35476 = [{shape: nimCopy(null, [[false, true, false], [true, true, true], [false, false, false]], NTI35274), color: 7, firstPos: {Field0: 0, Field1: 4}}];

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function posVerify_35697(m_35700, m_35700_Idx, board_35701) {
	var result_35702 = false;

	var F={procname:"tetris.posVerify",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 169;
			var i_35735 = 0;
			F.line = 169;
			var bs_35736 = null;
			F.line = 2283;
			var colontmp__35780 = null;
			F.line = 169;
			colontmp__35780 = m_35700[m_35700_Idx].boxs;
			F.line = 2285;
			var i_35783 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_35783 < (colontmp__35780 != null ? colontmp__35780.length : 0))) break L3;
						F.line = 2287;
						i_35735 = i_35783;
						F.line = 2287;
						bs_35736 = colontmp__35780[chckIndx(i_35783, 0, colontmp__35780.length+0-1)-0];
						L4: do {
							F.line = 170;
							var j_35769 = 0;
							F.line = 170;
							var b_35770 = null;
							F.line = 2285;
							var i_35779 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_35779 < (bs_35736 != null ? bs_35736.length : 0))) break L6;
										F.line = 2287;
										j_35769 = i_35779;
										F.line = 2287;
										b_35770 = bs_35736[chckIndx(i_35779, 0, bs_35736.length+0-1)-0];
										if (b_35770.isFilled) {
										F.line = 173;
										var xp_35771 = addInt(m_35700[m_35700_Idx].pos.Field0, i_35735);
										F.line = 174;
										var yp_35772 = addInt(m_35700[m_35700_Idx].pos.Field1, j_35769);
										if (((((xp_35771 < 0) || (21 <= xp_35771)) || (yp_35772 <= 0)) || (11 <= yp_35772))) {
										F.line = 177;
										result_35702 = false;
										break BeforeRet;
										}
										
										if (board_35701[chckIndx(xp_35771, 0, board_35701.length+0-1)-0][chckIndx(yp_35772, 0, board_35701[chckIndx(xp_35771, 0, board_35701.length+0-1)-0].length+0-1)-0].isFilled) {
										F.line = 179;
										result_35702 = false;
										break BeforeRet;
										}
										
										}
										
										F.line = 2288;
										i_35779 = addInt(i_35779, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_35783 = addInt(i_35783, 1);
					}
			} while(false);
		} while(false);
		F.line = 180;
		result_35702 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35702;

}

function move_35862(m_35865, m_35865_Idx, board_35866, d_35867) {
	var result_35868 = false;

	var F={procname:"tetris.move",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 217;
		switch (d_35867) {
		case 2:
			F.line = 219;
			m_35865[m_35865_Idx].pos.Field1 = addInt(m_35865[m_35865_Idx].pos.Field1, 1);
			if (!(posVerify_35697(m_35865, m_35865_Idx, board_35866))) {
			F.line = 221;
			m_35865[m_35865_Idx].pos.Field1 = subInt(m_35865[m_35865_Idx].pos.Field1, 1);
			F.line = 222;
			result_35868 = false;
			break BeforeRet;
			}
			
			break;
		case 3:
			F.line = 224;
			m_35865[m_35865_Idx].pos.Field1 = subInt(m_35865[m_35865_Idx].pos.Field1, 1);
			if (!(posVerify_35697(m_35865, m_35865_Idx, board_35866))) {
			F.line = 226;
			m_35865[m_35865_Idx].pos.Field1 = addInt(m_35865[m_35865_Idx].pos.Field1, 1);
			F.line = 227;
			result_35868 = false;
			break BeforeRet;
			}
			
			break;
		case 1:
			F.line = 229;
			m_35865[m_35865_Idx].pos.Field0 = addInt(m_35865[m_35865_Idx].pos.Field0, 1);
			if (!(posVerify_35697(m_35865, m_35865_Idx, board_35866))) {
			F.line = 231;
			m_35865[m_35865_Idx].pos.Field0 = subInt(m_35865[m_35865_Idx].pos.Field0, 1);
			F.line = 232;
			result_35868 = false;
			break BeforeRet;
			}
			
			break;
		case 0:
			F.line = 234;
			result_35868 = false;
			break BeforeRet;
			break;
		}
		F.line = 235;
		result_35868 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35868;

}

function dropStep(f_35930, f_35930_Idx) {
	var F={procname:"tetris.dropStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		if ((modInt(f_35930[f_35930_Idx].frame, 90) == 0)) {
		if (!(move_35862(f_35930[f_35930_Idx], "am", f_35930[f_35930_Idx].board, 1))) {
		F.line = 243;
		fixAM_35923(f_35930, f_35930_Idx);
		}
		
		}
		
	framePtr = F.prev;

	
}
var minos_35956 = [[I_35187[0], O_35226[0], S_35276[0], Z_35326[0], J_35376[0], L_35426[0], T_35476[0]]];
shuffle(minos_35956[0]);

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function X5BX5D__35994(s_36001, x_36004) {
	var result_36006 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		var a_36201 = x_36004.a;
		F.line = 3606;
		var L_36407 = addInt(subInt(subInt((s_36001 != null ? s_36001.length : 0), x_36004.b), a_36201), 1);
		F.line = 3607;
		result_36006 = new Array(chckRange(L_36407, 0, 2147483647)); for (var i=0;i<chckRange(L_36407, 0, 2147483647);++i) {result_36006[i]=null;}		L1: do {
			F.line = 3608;
			var i_36426 = 0;
			F.line = 3519;
			var i_36434 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_36434 < L_36407)) break L3;
						F.line = 3521;
						i_36426 = i_36434;
						F.line = 3608;
						result_36006[chckIndx(i_36426, 0, result_36006.length+0-1)-0] = s_36001[chckIndx(addInt(i_36426, a_36201), 0, s_36001.length+0-1)-0];
						F.line = 3522;
						i_36434 = addInt(i_36434, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_36006;

}

function dotdot__35964(a_35969, b_35971) {
	var result_35979 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_35979.a = a_35969;
		F.line = 326;
		result_35979.b = b_35971;
	framePtr = F.prev;

	return result_35979;

}

function pop0_35957(ms_35961, ms_35961_Idx) {
	var result_35962 = null;

	var F={procname:"tetris.pop0",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 257;
		result_35962 = ms_35961[ms_35961_Idx][chckIndx(0, 0, ms_35961[ms_35961_Idx].length+0-1)-0];
		F.line = 258;
		ms_35961[ms_35961_Idx] = nimCopy(null, X5BX5D__35994(ms_35961[ms_35961_Idx], dotdot__35964(1, 1)), NTI36005);
	framePtr = F.prev;

	return result_35962;

}

function add_36464(x_36470, x_36470_Idx, y_36473) {
	var F={procname:"add.add",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 1528;
		var xl_36481 = (x_36470[x_36470_Idx] != null ? x_36470[x_36470_Idx].length : 0);
		F.line = 1529;
		if (x_36470[x_36470_Idx].length < chckRange(addInt(xl_36481, (y_36473 != null ? y_36473.length : 0)), 0, 2147483647)) { for (var i=x_36470[x_36470_Idx].length;i<chckRange(addInt(xl_36481, (y_36473 != null ? y_36473.length : 0)), 0, 2147483647);++i) x_36470[x_36470_Idx].push(null); }
               else { x_36470[x_36470_Idx].length = chckRange(addInt(xl_36481, (y_36473 != null ? y_36473.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1530;
			var i_36513 = 0;
			F.line = 2042;
			var colontmp__36515 = 0;
			F.line = 1530;
			colontmp__36515 = (y_36473 != null ? (y_36473.length-1) : -1);
			F.line = 2045;
			var res_36518 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_36518 <= colontmp__36515)) break L3;
						F.line = 2047;
						i_36513 = res_36518;
						F.line = 1530;
						x_36470[x_36470_Idx][chckIndx(addInt(xl_36481, i_36513), 0, x_36470[x_36470_Idx].length+0-1)-0] = y_36473[chckIndx(i_36513, 0, y_36473.length+0-1)-0];
						F.line = 2048;
						res_36518 = addInt(res_36518, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function shuffled_35938(arr_35941) {
	var result_35943 = null;

	var F={procname:"tetris.shuffled",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 250;
		result_35943 = nimCopy(null, arr_35941, NTI35940);
		F.line = 251;
		shuffle(result_35943);
	framePtr = F.prev;

	return result_35943;

}

function renderBox_35484(m_35487, m_35487_Idx) {

											function setBox_35488(b_35491, b_35491_Idx, m_35492, i_35493, j_35494, t_35495, s_35496) {
													var Tmp1;

												var F={procname:"renderBox.setBox",prev:framePtr,filename:"tetris.nim",line:0};
												framePtr = F;
													F.line = 132;
													if (m_35492.kind.shape[chckIndx(i_35493, 0, m_35492.kind.shape.length+0-1)-0][chckIndx(j_35494, 0, m_35492.kind.shape[chckIndx(i_35493, 0, m_35492.kind.shape.length+0-1)-0].length+0-1)-0]) {
													Tmp1 = m_35492.kind.color;
													}
													else {
													Tmp1 = 0;
													}
													
													var itsColor_35497 = Tmp1;
													F.line = 133;
													b_35491[b_35491_Idx][chckIndx(t_35495, 0, b_35491[b_35491_Idx].length+0-1)-0][chckIndx(s_35496, 0, b_35491[b_35491_Idx][chckIndx(t_35495, 0, b_35491[b_35491_Idx].length+0-1)-0].length+0-1)-0] = {isFilled: m_35492.kind.shape[chckIndx(i_35493, 0, m_35492.kind.shape.length+0-1)-0][chckIndx(j_35494, 0, m_35492.kind.shape[chckIndx(i_35493, 0, m_35492.kind.shape.length+0-1)-0].length+0-1)-0], color: itsColor_35497};
												framePtr = F.prev;

												
											}

	var F={procname:"tetris.renderBox",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 135;
		var l_35506 = subInt((m_35487[m_35487_Idx].kind.shape != null ? m_35487[m_35487_Idx].kind.shape.length : 0), 1);
		F.line = 137;
		var b_35507 = [null];
		F.line = 138;
		var bb_35509 = null;
		L1: do {
			F.line = 139;
			var i_35518 = 0;
			F.line = 2045;
			var res_35637 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_35637 <= l_35506)) break L3;
						F.line = 2047;
						i_35518 = res_35637;
						L4: do {
							F.line = 140;
							var j_35527 = 0;
							F.line = 2045;
							var res_35631 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_35631 <= l_35506)) break L6;
										F.line = 2047;
										j_35527 = res_35631;
										F.line = 141;
										if (bb_35509 != null) { bb_35509.push({isFilled: false, color: 0}); } else { bb_35509 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_35631 = addInt(res_35631, 1);
									}
							} while(false);
						} while(false);
						F.line = 142;
						var Tmp7 = nimCopy(null, bb_35509, NTI35508);
						if (b_35507[0] != null) { b_35507[0].push(Tmp7); } else { b_35507[0] = [Tmp7]; };
						F.line = 2048;
						res_35637 = addInt(res_35637, 1);
					}
			} while(false);
		} while(false);
		F.line = 144;
		switch (m_35487[m_35487_Idx].dir) {
		case 0:
			L8: do {
				F.line = 146;
				var i_35556 = 0;
				F.line = 2045;
				var res_35651 = 0;
				L9: do {
					F.line = 2046;
						L10: while (true) {
						if (!(res_35651 <= l_35506)) break L10;
							F.line = 2047;
							i_35556 = res_35651;
							L11: do {
								F.line = 147;
								var j_35565 = 0;
								F.line = 2045;
								var res_35645 = 0;
								L12: do {
									F.line = 2046;
										L13: while (true) {
										if (!(res_35645 <= l_35506)) break L13;
											F.line = 2047;
											j_35565 = res_35645;
											F.line = 149;
											setBox_35488(b_35507, 0, m_35487[m_35487_Idx], i_35556, j_35565, i_35556, j_35565);
											F.line = 2048;
											res_35645 = addInt(res_35645, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35651 = addInt(res_35651, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			L14: do {
				F.line = 151;
				var i_35575 = 0;
				F.line = 2045;
				var res_35665 = 0;
				L15: do {
					F.line = 2046;
						L16: while (true) {
						if (!(res_35665 <= l_35506)) break L16;
							F.line = 2047;
							i_35575 = res_35665;
							L17: do {
								F.line = 152;
								var j_35584 = 0;
								F.line = 2045;
								var res_35659 = 0;
								L18: do {
									F.line = 2046;
										L19: while (true) {
										if (!(res_35659 <= l_35506)) break L19;
											F.line = 2047;
											j_35584 = res_35659;
											F.line = 154;
											setBox_35488(b_35507, 0, m_35487[m_35487_Idx], i_35575, j_35584, j_35584, subInt(l_35506, i_35575));
											F.line = 2048;
											res_35659 = addInt(res_35659, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35665 = addInt(res_35665, 1);
						}
				} while(false);
			} while(false);
			break;
		case 2:
			L20: do {
				F.line = 156;
				var i_35594 = 0;
				F.line = 2045;
				var res_35679 = 0;
				L21: do {
					F.line = 2046;
						L22: while (true) {
						if (!(res_35679 <= l_35506)) break L22;
							F.line = 2047;
							i_35594 = res_35679;
							L23: do {
								F.line = 157;
								var j_35603 = 0;
								F.line = 2045;
								var res_35673 = 0;
								L24: do {
									F.line = 2046;
										L25: while (true) {
										if (!(res_35673 <= l_35506)) break L25;
											F.line = 2047;
											j_35603 = res_35673;
											F.line = 159;
											setBox_35488(b_35507, 0, m_35487[m_35487_Idx], i_35594, j_35603, subInt(l_35506, i_35594), subInt(l_35506, j_35603));
											F.line = 2048;
											res_35673 = addInt(res_35673, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35679 = addInt(res_35679, 1);
						}
				} while(false);
			} while(false);
			break;
		case 3:
			L26: do {
				F.line = 161;
				var i_35613 = 0;
				F.line = 2045;
				var res_35693 = 0;
				L27: do {
					F.line = 2046;
						L28: while (true) {
						if (!(res_35693 <= l_35506)) break L28;
							F.line = 2047;
							i_35613 = res_35693;
							L29: do {
								F.line = 162;
								var j_35622 = 0;
								F.line = 2045;
								var res_35687 = 0;
								L30: do {
									F.line = 2046;
										L31: while (true) {
										if (!(res_35687 <= l_35506)) break L31;
											F.line = 2047;
											j_35622 = res_35687;
											F.line = 164;
											setBox_35488(b_35507, 0, m_35487[m_35487_Idx], i_35613, j_35622, subInt(l_35506, j_35622), i_35613);
											F.line = 2048;
											res_35687 = addInt(res_35687, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35693 = addInt(res_35693, 1);
						}
				} while(false);
			} while(false);
			break;
		}
		F.line = 166;
		m_35487[m_35487_Idx].boxs = nimCopy(null, b_35507[0], NTI35021);
	framePtr = F.prev;

	
}

function dropStart(f_36440, f_36440_Idx) {
	var F={procname:"tetris.dropStart",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 261;
		var mino_36442 = pop0_35957(minos_35956, 0);
		if (((minos_35956[0] != null ? minos_35956[0].length : 0) < 4)) {
		F.line = 263;
		add_36464(minos_35956, 0, shuffled_35938([I_35187[0], O_35226[0], S_35276[0], Z_35326[0], J_35376[0], L_35426[0], T_35476[0]]));
		}
		
		F.line = 264;
		f_36440[f_36440_Idx].am = {pos: nimCopy(null, mino_36442.firstPos, NTI35017), kind: mino_36442, dir: 0, boxs: null};
		F.line = 265;
		renderBox_35484(f_36440[f_36440_Idx], "am");
		if (!(posVerify_35697(f_36440[f_36440_Idx], "am", f_36440[f_36440_Idx].board))) {
		F.line = 266;
		gameOver_35932();
		}
		
	framePtr = F.prev;

	
}
var F_38427 = [null];

function gameInit() {
	var F={procname:"tetris.gameInit",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 293;
		var board_38435 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
		L1: do {
			F.line = 295;
			var i_38444 = 0;
			F.line = 3519;
			var i_38476 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_38476 < 21)) break L3;
						F.line = 3521;
						i_38444 = i_38476;
						F.line = 296;
						board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0][chckIndx(0, 0, board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 298;
						board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0][chckIndx(11, 0, board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						L4: do {
							F.line = 300;
							var j_38453 = 0;
							F.line = 3519;
							var i_38472 = 1;
							L5: do {
								F.line = 3520;
									L6: while (true) {
									if (!(i_38472 < 11)) break L6;
										F.line = 3521;
										j_38453 = i_38472;
										F.line = 301;
										board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0][chckIndx(j_38453, 0, board_38435[chckIndx(i_38444, 0, board_38435.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										F.line = 3522;
										i_38472 = addInt(i_38472, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_38476 = addInt(i_38476, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 303;
			var i_38462 = 0;
			F.line = 3519;
			var i_38482 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_38482 < 12)) break L9;
						F.line = 3521;
						i_38462 = i_38482;
						F.line = 305;
						board_38435[chckIndx(21, 0, board_38435.length+0-1)-0][chckIndx(i_38462, 0, board_38435[chckIndx(21, 0, board_38435.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 3522;
						i_38482 = addInt(i_38482, 1);
					}
			} while(false);
		} while(false);
		F.line = 308;
		F_38427[0] = {board: nimCopy(null, board_38435, NTI38434), frame: 0, am: null};
		F.line = 309;
		dropStart(F_38427, 0);
	framePtr = F.prev;

	
}
var gameOverFlag_38485 = [false];
var buttons_38502 = [nimCopy(null, [], NTI38501)];
L2: do {
	var b_38621 = [0];
	L3: do {
		var v_38638 = 0;
		var res_38640 = 0;
		L4: do {
				L5: while (true) {
				if (!(res_38640 <= 8)) break L5;
					v_38638 = res_38640;
					b_38621[0] = v_38638;
					if (buttons_38502[0] != null) { buttons_38502[0].push({kind: b_38621[0], isPushed: false, contFlames: 0}); } else { buttons_38502[0] = [{kind: b_38621[0], isPushed: false, contFlames: 0}]; };
					res_38640 += 1;
				}
		} while(false);
	} while(false);
} while(false);

function posCorrect_35784(m_35787, m_35787_Idx, board_35788) {
	var result_35789 = false;

	var F={procname:"tetris.posCorrect",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 183;
			var i_35805 = 0;
			F.line = 3518;
			var colontmp__35825 = 0;
			F.line = 183;
			colontmp__35825 = (m_35787[m_35787_Idx].boxs != null ? m_35787[m_35787_Idx].boxs.length : 0);
			F.line = 3519;
			var i_35828 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_35828 < colontmp__35825)) break L3;
						F.line = 3521;
						i_35805 = i_35828;
						F.line = 184;
						m_35787[m_35787_Idx].pos.Field1 = addInt(m_35787[m_35787_Idx].pos.Field1, i_35805);
						if (posVerify_35697(m_35787, m_35787_Idx, board_35788)) {
						F.line = 186;
						result_35789 = true;
						break BeforeRet;
						}
						
						F.line = 187;
						m_35787[m_35787_Idx].pos.Field1 = subInt(m_35787[m_35787_Idx].pos.Field1, mulInt(2, i_35805));
						if (posVerify_35697(m_35787, m_35787_Idx, board_35788)) {
						F.line = 189;
						result_35789 = true;
						break BeforeRet;
						}
						
						F.line = 3522;
						i_35828 = addInt(i_35828, 1);
					}
			} while(false);
		} while(false);
		F.line = 196;
		result_35789 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35789;

}

function spin_35830(m_35833, m_35833_Idx, a_35836, board_35837) {
	var F={procname:"tetris.spin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 199;
		var pre_dir_35838 = m_35833[m_35833_Idx].dir;
		F.line = 200;
		m_35833[m_35833_Idx].dir = a_35836[chckIndx(m_35833[m_35833_Idx].dir, 0, a_35836.length+0-1)-0];
		F.line = 201;
		renderBox_35484(m_35833, m_35833_Idx);
		if (!(posVerify_35697(m_35833, m_35833_Idx, board_35837))) {
		F.line = 204;
		var pre_pos_35846 = {Field0: m_35833[m_35833_Idx].pos.Field0, Field1: m_35833[m_35833_Idx].pos.Field1};
		if (!(posCorrect_35784(m_35833, m_35833_Idx, board_35837))) {
		F.line = 206;
		var __35847 = nimCopy(null, pre_pos_35846, NTI35845);
		F.line = 206;
		m_35833[m_35833_Idx].pos.Field0 = __35847["Field0"];
		F.line = 206;
		m_35833[m_35833_Idx].pos.Field1 = __35847["Field1"];
		F.line = 207;
		m_35833[m_35833_Idx].dir = pre_dir_35838;
		}
		
		F.line = 208;
		renderBox_35484(m_35833, m_35833_Idx);
		}
		
	framePtr = F.prev;

	
}

function rightSpin_35848(m_35851, m_35851_Idx, board_35852) {
	var F={procname:"tetris.rightSpin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 211;
		spin_35830(m_35851, m_35851_Idx, [1, 2, 3, 0], board_35852);
	framePtr = F.prev;

	
}

function leftSpin_35855(m_35858, m_35858_Idx, board_35859) {
	var F={procname:"tetris.leftSpin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 214;
		spin_35830(m_35858, m_35858_Idx, [3, 0, 1, 2], board_35859);
	framePtr = F.prev;

	
}

function newSeq_36830(len_36834) {
	var result_36836 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_36836 = new Array(len_36834); for (var i=0;i<len_36834;++i) {result_36836[i]=[null, null, null, null, null, null, null, null, null, null, null, null];}	framePtr = F.prev;

	return result_36836;

}

function X5BX5D__36564(a_36572, x_36575) {
	var result_36577 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_36601 = x_36575.a;
		F.line = 3585;
		var L_36828 = addInt(subInt(subInt(22, x_36575.b), xa_36601), 1);
		F.line = 3586;
		result_36577 = nimCopy(null, newSeq_36830(chckRange(L_36828, 0, 2147483647)), NTI36835);
		L1: do {
			F.line = 3587;
			var i_36855 = 0;
			F.line = 3519;
			var i_36867 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_36867 < L_36828)) break L3;
						F.line = 3521;
						i_36855 = i_36867;
						F.line = 3587;
						nimCopy(result_36577[chckIndx(i_36855, 0, result_36577.length+0-1)-0], a_36572[chckIndx(addInt(i_36855, xa_36601), 0, a_36572.length+0-1)-0], NTI35070);
						F.line = 3522;
						i_36867 = addInt(i_36867, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_36577;

}

function all_36912(s_36917, pred_36922) {
	var result_36923 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_36948 = null;
			F.line = 2185;
			var i_36952 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_36952 < (s_36917 != null ? s_36917.length : 0))) break L3;
						F.line = 2187;
						i_36948 = s_36917[chckIndx(i_36952, 0, s_36917.length+0-1)-0];
						if (!(pred_36922(i_36948))) {
						F.line = 436;
						result_36923 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_36952 = addInt(i_36952, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_36923 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_36923;

}

function X5BX5D__37049(a_37057, x_37060) {
	var result_37062 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_37201 = x_37060.a;
		F.line = 3585;
		var L_37401 = addInt(subInt(x_37060.b, xa_37201), 1);
		F.line = 3586;
		result_37062 = nimCopy(null, newSeq_36830(chckRange(L_37401, 0, 2147483647)), NTI36835);
		L1: do {
			F.line = 3587;
			var i_37417 = 0;
			F.line = 3519;
			var i_37429 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_37429 < L_37401)) break L3;
						F.line = 3521;
						i_37417 = i_37429;
						F.line = 3587;
						nimCopy(result_37062[chckIndx(i_37417, 0, result_37062.length+0-1)-0], a_37057[chckIndx(addInt(i_37417, xa_37201), 0, a_37057.length+0-1)-0], NTI35070);
						F.line = 3522;
						i_37429 = addInt(i_37429, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_37062;

}

function dotdot__37010(a_37015, b_37017) {
	var result_37025 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_37025.a = a_37015;
		F.line = 326;
		result_37025.b = b_37017;
	framePtr = F.prev;

	return result_37025;

}

function sysFatal_38247(message_38253) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_38255 = null;
		F.line = 2831;
		e_38255 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_38255.message = nimCopy(null, message_38253, NTI138);
		F.line = 2833;
		raiseException(e_38255, "RangeError");
	framePtr = F.prev;

	
}

function X5BX5Deq__37873(a_37882, x_37885, b_37888) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3591;
		var xa_38001 = x_37885.a;
		F.line = 3592;
		var L_38228 = addInt(subInt(subInt(12, x_37885.b), xa_38001), 1);
		if ((L_38228 == (b_37888 != null ? b_37888.length : 0))) {
		L1: do {
			F.line = 3594;
			var i_38243 = 0;
			F.line = 3519;
			var i_38269 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_38269 < L_38228)) break L3;
						F.line = 3521;
						i_38243 = i_38269;
						F.line = 3594;
						a_37882[chckIndx(addInt(i_38243, xa_38001), 0, a_37882.length+0-1)-0] = b_37888[chckIndx(i_38243, 0, b_37888.length+0-1)-0];
						F.line = 3522;
						i_38269 = addInt(i_38269, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 3596;
		sysFatal_38247(makeNimstrLit("different lengths for slice assignment"));
		}
		
	framePtr = F.prev;

	
}

function newSeq_37830(len_37834) {
	var result_37836 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_37836 = new Array(len_37834); for (var i=0;i<len_37834;++i) {result_37836[i]=null;}	framePtr = F.prev;

	return result_37836;

}

function X5BX5D__37498(a_37506, x_37509) {
	var result_37511 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_37601 = x_37509.a;
		F.line = 3585;
		var L_37828 = addInt(subInt(subInt(12, x_37509.b), xa_37601), 1);
		F.line = 3586;
		result_37511 = nimCopy(null, newSeq_37830(chckRange(L_37828, 0, 2147483647)), NTI37835);
		L1: do {
			F.line = 3587;
			var i_37855 = 0;
			F.line = 3519;
			var i_37867 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_37867 < L_37828)) break L3;
						F.line = 3521;
						i_37855 = i_37867;
						F.line = 3587;
						result_37511[chckIndx(i_37855, 0, result_37511.length+0-1)-0] = a_37506[chckIndx(addInt(i_37855, xa_37601), 0, a_37506.length+0-1)-0];
						F.line = 3522;
						i_37867 = addInt(i_37867, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_37511;

}

function lineCheck_36527(f_36530, f_36530_Idx) {

							function colonanonymous__36904(b_36906) {
								var result_36907 = false;

								var F={procname:"lineCheck.:anonymous",prev:framePtr,filename:"tetris.nim",line:0};
								framePtr = F;
								BeforeRet: do {
									F.line = 270;
									result_36907 = b_36906.isFilled;
									break BeforeRet;
								} while (false);
								framePtr = F.prev;

								return result_36907;

							}

	var F={procname:"tetris.lineCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 269;
			var i_36901 = 0;
			F.line = 269;
			var line_36902 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2283;
			var colontmp__38379 = null;
			F.line = 269;
			colontmp__38379 = X5BX5D__36564(f_36530[f_36530_Idx].board, dotdot__35964(0, 2));
			F.line = 2285;
			var i_38382 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38382 < (colontmp__38379 != null ? colontmp__38379.length : 0))) break L3;
						F.line = 2287;
						i_36901 = i_38382;
						F.line = 2287;
						nimCopy(line_36902, colontmp__38379[chckIndx(i_38382, 0, colontmp__38379.length+0-1)-0], NTI35070);
						if (all_36912(line_36902, colonanonymous__36904)) {
						L4: do {
							F.line = 271;
							var t_37444 = 0;
							F.line = 271;
							var line_37445 = [null, null, null, null, null, null, null, null, null, null, null, null];
							F.line = 2283;
							var colontmp__38364 = null;
							F.line = 271;
							colontmp__38364 = X5BX5D__37049(f_36530[f_36530_Idx].board, dotdot__37010(0, subInt(i_36901, 1)));
							F.line = 2285;
							var i_38367 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38367 < (colontmp__38364 != null ? colontmp__38364.length : 0))) break L6;
										F.line = 2287;
										t_37444 = i_38367;
										F.line = 2287;
										nimCopy(line_37445, colontmp__38364[chckIndx(i_38367, 0, colontmp__38364.length+0-1)-0], NTI35070);
										F.line = 272;
										X5BX5Deq__37873(f_36530[f_36530_Idx].board[chckIndx(addInt(t_37444, 1), 0, f_36530[f_36530_Idx].board.length+0-1)-0], dotdot__35964(1, 2), X5BX5D__37498(line_37445, dotdot__35964(1, 2)));
										F.line = 2288;
										i_38367 = addInt(i_38367, 1);
									}
							} while(false);
						} while(false);
						F.line = 273;
						F.line = 273;
						var ln_38308 = nimCopy(null, [], NTI38307);
						L7: do {
							F.line = 273;
							var __38318 = 0;
							F.line = 2045;
							var res_38374 = 0;
							L8: do {
								F.line = 2046;
									L9: while (true) {
									if (!(res_38374 <= 9)) break L9;
										F.line = 2047;
										__38318 = res_38374;
										F.line = 273;
										if (ln_38308 != null) { ln_38308.push({isFilled: false, color: 0}); } else { ln_38308 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_38374 = addInt(res_38374, 1);
									}
							} while(false);
						} while(false);
						X5BX5Deq__37873(f_36530[f_36530_Idx].board[chckIndx(0, 0, f_36530[f_36530_Idx].board.length+0-1)-0], dotdot__35964(1, 2), ln_38308);
						}
						
						F.line = 2288;
						i_38382 = addInt(i_38382, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function fixAM_35923(f_35926, f_35926_Idx) {
	var F={procname:"tetris.fixAM",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(posVerify_35697(f_35926[f_35926_Idx], "am", f_35926[f_35926_Idx].board))) {
		F.line = 276;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 277;
			var i_38401 = 0;
			F.line = 277;
			var bs_38402 = null;
			F.line = 2283;
			var colontmp__38423 = null;
			F.line = 277;
			colontmp__38423 = f_35926[f_35926_Idx].am.boxs;
			F.line = 2285;
			var i_38426 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38426 < (colontmp__38423 != null ? colontmp__38423.length : 0))) break L3;
						F.line = 2287;
						i_38401 = i_38426;
						F.line = 2287;
						bs_38402 = colontmp__38423[chckIndx(i_38426, 0, colontmp__38423.length+0-1)-0];
						L4: do {
							F.line = 278;
							var j_38416 = 0;
							F.line = 278;
							var b_38417 = null;
							F.line = 2285;
							var i_38422 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38422 < (bs_38402 != null ? bs_38402.length : 0))) break L6;
										F.line = 2287;
										j_38416 = i_38422;
										F.line = 2287;
										b_38417 = bs_38402[chckIndx(i_38422, 0, bs_38402.length+0-1)-0];
										if (b_38417.isFilled) {
										F.line = 280;
										f_35926[f_35926_Idx].board[chckIndx(addInt(f_35926[f_35926_Idx].am.pos.Field0, i_38401), 0, f_35926[f_35926_Idx].board.length+0-1)-0][chckIndx(addInt(f_35926[f_35926_Idx].am.pos.Field1, j_38416), 0, f_35926[f_35926_Idx].board[chckIndx(addInt(f_35926[f_35926_Idx].am.pos.Field0, i_38401), 0, f_35926[f_35926_Idx].board.length+0-1)-0].length+0-1)-0] = b_38417;
										}
										
										F.line = 2288;
										i_38422 = addInt(i_38422, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_38426 = addInt(i_38426, 1);
					}
			} while(false);
		} while(false);
		F.line = 282;
		lineCheck_36527(f_35926, f_35926_Idx);
		F.line = 283;
		dropStart(f_35926, f_35926_Idx);
	} while (false);
	framePtr = F.prev;

	
}

function buttonCheck_38641(c_38645) {
			var Tmp4;
			var Tmp5;

	var F={procname:"tetris.buttonCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 320;
			var i_38699 = 0;
			F.line = 320;
			var b_38700 = false;
			F.line = 2266;
			var i_38850 = 0;
			if ((i_38850 <= 7)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_38699 = i_38850;
						F.line = 2269;
						b_38700 = c_38645[chckIndx(i_38850, 0, c_38645.length+0-1)-0];
						if (!(b_38700)) {
						F.line = 322;
						buttons_38502[0][chckIndx(i_38699, 0, buttons_38502[0].length+0-1)-0].isPushed = false;
						F.line = 323;
						buttons_38502[0][chckIndx(i_38699, 0, buttons_38502[0].length+0-1)-0].contFlames = 0;
						}
						
						if ((7 <= i_38850)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_38850 = addInt(i_38850, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (c_38645[chckIndx(1, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38502[0][chckIndx(1, 0, buttons_38502[0].length+0-1)-0].isPushed)) {
		F.line = 327;
		rightSpin_35848(F_38427[0], "am", F_38427[0].board);
		F.line = 328;
		buttons_38502[0][chckIndx(1, 0, buttons_38502[0].length+0-1)-0].isPushed = true;
		}
		
		}
		else {
		if (c_38645[chckIndx(2, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38502[0][chckIndx(2, 0, buttons_38502[0].length+0-1)-0].isPushed)) {
		F.line = 331;
		leftSpin_35855(F_38427[0], "am", F_38427[0].board);
		F.line = 332;
		buttons_38502[0][chckIndx(2, 0, buttons_38502[0].length+0-1)-0].isPushed = true;
		}
		
		}
		}
		if (c_38645[chckIndx(6, 0, c_38645.length+0-1)-0]) {
			if (!(buttons_38502[0][chckIndx(6, 0, buttons_38502[0].length+0-1)-0].isPushed)) Tmp4 = true; else {				Tmp4 = (30 < buttons_38502[0][chckIndx(6, 0, buttons_38502[0].length+0-1)-0].contFlames);			}		if (Tmp4) {
		F.line = 336;
		move_35862(F_38427[0], "am", F_38427[0].board, 2);
		F.line = 337;
		buttons_38502[0][chckIndx(6, 0, buttons_38502[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 339;
		buttons_38502[0][chckIndx(6, 0, buttons_38502[0].length+0-1)-0].contFlames = addInt(buttons_38502[0][chckIndx(6, 0, buttons_38502[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		else {
		if (c_38645[chckIndx(7, 0, c_38645.length+0-1)-0]) {
			if (!(buttons_38502[0][chckIndx(7, 0, buttons_38502[0].length+0-1)-0].isPushed)) Tmp5 = true; else {				Tmp5 = (30 < buttons_38502[0][chckIndx(7, 0, buttons_38502[0].length+0-1)-0].contFlames);			}		if (Tmp5) {
		F.line = 342;
		move_35862(F_38427[0], "am", F_38427[0].board, 3);
		F.line = 343;
		buttons_38502[0][chckIndx(7, 0, buttons_38502[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 345;
		buttons_38502[0][chckIndx(7, 0, buttons_38502[0].length+0-1)-0].contFlames = addInt(buttons_38502[0][chckIndx(7, 0, buttons_38502[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		}
		if (c_38645[chckIndx(5, 0, c_38645.length+0-1)-0]) {
		F.line = 348;
		move_35862(F_38427[0], "am", F_38427[0].board, 1);
		}
		
		if (c_38645[chckIndx(3, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38502[0][chckIndx(3, 0, buttons_38502[0].length+0-1)-0].isPushed)) {
		L6: do {
			F.line = 352;
				L7: while (true) {
				if (!move_35862(F_38427[0], "am", F_38427[0].board, 1)) break L7;
				}
		} while(false);
		F.line = 353;
		fixAM_35923(F_38427, 0);
		F.line = 354;
		buttons_38502[0][chckIndx(3, 0, buttons_38502[0].length+0-1)-0].isPushed = true;
		}
		
		}
		
	framePtr = F.prev;

	
}

function gameStep(c_38856) {
	var F={procname:"tetris.gameStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (gameOverFlag_38485[0]) {
		F.line = 357;
		break BeforeRet;
		}
		
		F.line = 359;
		buttonCheck_38641(c_38856);
		F.line = 360;
		F_38427[0].frame = addInt(F_38427[0].frame, 1);
		F.line = 361;
		dropStep(F_38427, 0);
	} while (false);
	framePtr = F.prev;

	
}

function getBoard() {
	var result_38869 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];

	var F={procname:"tetris.getBoard",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 365;
		var board_38870 = nimCopy(null, F_38427[0].board, NTI35023);
		F.line = 366;
		var am_38871 = F_38427[0].am;
		L1: do {
			F.line = 368;
			var i_38885 = 0;
			F.line = 368;
			var bs_38886 = null;
			F.line = 2283;
			var colontmp__38907 = null;
			F.line = 368;
			colontmp__38907 = am_38871.boxs;
			F.line = 2285;
			var i_38910 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38910 < (colontmp__38907 != null ? colontmp__38907.length : 0))) break L3;
						F.line = 2287;
						i_38885 = i_38910;
						F.line = 2287;
						bs_38886 = colontmp__38907[chckIndx(i_38910, 0, colontmp__38907.length+0-1)-0];
						L4: do {
							F.line = 369;
							var j_38900 = 0;
							F.line = 369;
							var b_38901 = null;
							F.line = 2285;
							var i_38906 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38906 < (bs_38886 != null ? bs_38886.length : 0))) break L6;
										F.line = 2287;
										j_38900 = i_38906;
										F.line = 2287;
										b_38901 = bs_38886[chckIndx(i_38906, 0, bs_38886.length+0-1)-0];
										if (b_38901.isFilled) {
										F.line = 371;
										board_38870[chckIndx(addInt(am_38871.pos.Field0, i_38885), 0, board_38870.length+0-1)-0][chckIndx(addInt(am_38871.pos.Field1, j_38900), 0, board_38870[chckIndx(addInt(am_38871.pos.Field0, i_38885), 0, board_38870.length+0-1)-0].length+0-1)-0] = b_38901;
										}
										
										F.line = 2288;
										i_38906 = addInt(i_38906, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_38910 = addInt(i_38910, 1);
					}
			} while(false);
		} while(false);
		F.line = 372;
		nimCopy(result_38869, board_38870, NTI35023);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_38869;

}

function gameOver_35932() {
	var F={procname:"tetris.gameOver",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 375;
		gameOverFlag_38485[0] = true;
		F.line = 376;
		alert("gameOver!");
	framePtr = F.prev;

	
}
