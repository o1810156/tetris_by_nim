/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI38954 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38969 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38944 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI38107 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI37635 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35067 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI36635 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35837 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI38488 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI38500 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI38490 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI38525 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI36261 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38421 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI38422 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI35062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35021 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35058 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI35500 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35932 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35007 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI35045 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35044 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI35013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI35984 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI35231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35266 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35192 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35215 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI35130 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI35177 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
NTI35130.base = NTI130;
NTI35177.base = NTI35130;
NTI35192.base = NTI130;
NTI35215.base = NTI35192;
NTI35231.base = NTI130;
NTI35266.base = NTI35231;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
NTI35045.base = NTI130;
NTI35044.base = NTI35045;
var NNI35007 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI35007, name: "dfColor", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI35007, name: "iColor", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI35007, name: "oColor", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI35007, name: "sColor", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI35007, name: "zColor", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI35007, name: "jColor", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI35007, name: "lColor", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI35007, name: "tColor", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI35007, name: "gColor", len: 0, sons: null}}};
NTI35007.node = NNI35007;
var NNI35017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI35017.node = NNI35017;
var NNI35043 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "shape", len: 0, typ: NTI35044, name: "shape", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI35007, name: "color", sons: null}, 
{kind: 1, offset: "firstPos", len: 0, typ: NTI35017, name: "firstPos", sons: null}]};
NTI35043.node = NNI35043;
NTI35013.base = NTI35043;
NTI35984.base = NTI35013;
NTI35932.base = NTI35013;
var NNI35058 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "isFilled", len: 0, typ: NTI130, name: "isFilled", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI35007, name: "color", sons: null}]};
NTI35058.node = NNI35058;
NTI35019.base = NTI35058;
NTI35500.base = NTI35019;
NTI35062.base = NTI35019;
NTI35021.base = NTI35062;
NTI38421.base = NTI35019;
NTI38422.base = NTI38421;
NTI36261.base = NTI35013;
var NNI38488 = {kind: 2, offset: 0, typ: null, name: null, len: 9, sons: {"0": {kind: 1, offset: 0, typ: NTI38488, name: "bNon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI38488, name: "bA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI38488, name: "bB", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI38488, name: "bHd", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI38488, name: "bUp", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI38488, name: "bDwn", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI38488, name: "bRgt", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI38488, name: "bLft", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI38488, name: "bHld", len: 0, sons: null}}};
NTI38488.node = NNI38488;
var NNI38500 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI38488, name: "kind", sons: null}, 
{kind: 1, offset: "isPushed", len: 0, typ: NTI130, name: "isPushed", sons: null}, 
{kind: 1, offset: "contFlames", len: 0, typ: NTI104, name: "contFlames", sons: null}]};
NTI38500.node = NNI38500;
NTI38490.base = NTI38500;
NTI38525.base = NTI38490;
var NNI35837 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI35837.node = NNI35837;
NTI35067.base = NTI35019;
NTI36635.base = NTI35067;
NTI37635.base = NTI35019;
NTI38107.base = NTI35019;
NTI35023.base = NTI35067;
NTI38944.base = NTI35062;
NTI38969.base = NTI35019;
NTI38954.base = NTI35019;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function modInt(a_18603, b_18604) {
		      if (b_18604 == 0) raiseDivByZero();
      if (b_18604 == -1 && a_18603 == 2147483647) raiseOverflow();
      return Math.trunc(a_18603 % b_18604);
    

	
}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}
var I_35179 = [{shape: nimCopy(null, [[false, false, false, false], [true, true, true, true], [false, false, false, false], [false, false, false, false]], NTI35177), color: 1, firstPos: {Field0: 0, Field1: 4}}];
var O_35218 = [{shape: nimCopy(null, [[true, true], [true, true]], NTI35215), color: 2, firstPos: {Field0: 0, Field1: 5}}];
var S_35268 = [{shape: nimCopy(null, [[false, true, true], [true, true, false], [false, false, false]], NTI35266), color: 3, firstPos: {Field0: 0, Field1: 4}}];
var Z_35318 = [{shape: nimCopy(null, [[true, true, false], [false, true, true], [false, false, false]], NTI35266), color: 4, firstPos: {Field0: 0, Field1: 4}}];
var J_35368 = [{shape: nimCopy(null, [[true, false, false], [true, true, true], [false, false, false]], NTI35266), color: 5, firstPos: {Field0: 0, Field1: 4}}];
var L_35418 = [{shape: nimCopy(null, [[false, false, true], [true, true, true], [false, false, false]], NTI35266), color: 6, firstPos: {Field0: 0, Field1: 4}}];
var T_35468 = [{shape: nimCopy(null, [[false, true, false], [true, true, true], [false, false, false]], NTI35266), color: 7, firstPos: {Field0: 0, Field1: 4}}];

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function posVerify_35689(m_35692, m_35692_Idx, board_35693) {
	var result_35694 = false;

	var F={procname:"tetris.posVerify",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 148;
			var i_35727 = 0;
			F.line = 148;
			var bs_35728 = null;
			F.line = 2283;
			var colontmp__35772 = null;
			F.line = 148;
			colontmp__35772 = m_35692[m_35692_Idx].boxs;
			F.line = 2285;
			var i_35775 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_35775 < (colontmp__35772 != null ? colontmp__35772.length : 0))) break L3;
						F.line = 2287;
						i_35727 = i_35775;
						F.line = 2287;
						bs_35728 = colontmp__35772[chckIndx(i_35775, 0, colontmp__35772.length+0-1)-0];
						L4: do {
							F.line = 149;
							var j_35761 = 0;
							F.line = 149;
							var b_35762 = null;
							F.line = 2285;
							var i_35771 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_35771 < (bs_35728 != null ? bs_35728.length : 0))) break L6;
										F.line = 2287;
										j_35761 = i_35771;
										F.line = 2287;
										b_35762 = bs_35728[chckIndx(i_35771, 0, bs_35728.length+0-1)-0];
										if (b_35762.isFilled) {
										F.line = 152;
										var xp_35763 = addInt(m_35692[m_35692_Idx].pos.Field0, i_35727);
										F.line = 153;
										var yp_35764 = addInt(m_35692[m_35692_Idx].pos.Field1, j_35761);
										if (((((xp_35763 < 0) || (21 <= xp_35763)) || (yp_35764 <= 0)) || (11 <= yp_35764))) {
										F.line = 156;
										result_35694 = false;
										break BeforeRet;
										}
										
										if (board_35693[chckIndx(xp_35763, 0, board_35693.length+0-1)-0][chckIndx(yp_35764, 0, board_35693[chckIndx(xp_35763, 0, board_35693.length+0-1)-0].length+0-1)-0].isFilled) {
										F.line = 158;
										result_35694 = false;
										break BeforeRet;
										}
										
										}
										
										F.line = 2288;
										i_35771 = addInt(i_35771, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_35775 = addInt(i_35775, 1);
					}
			} while(false);
		} while(false);
		F.line = 159;
		result_35694 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35694;

}

function move_35854(m_35857, m_35857_Idx, board_35858, d_35859) {
	var result_35860 = false;

	var F={procname:"tetris.move",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 196;
		switch (d_35859) {
		case 2:
			F.line = 198;
			m_35857[m_35857_Idx].pos.Field1 = addInt(m_35857[m_35857_Idx].pos.Field1, 1);
			if (!(posVerify_35689(m_35857, m_35857_Idx, board_35858))) {
			F.line = 200;
			m_35857[m_35857_Idx].pos.Field1 = subInt(m_35857[m_35857_Idx].pos.Field1, 1);
			F.line = 201;
			result_35860 = false;
			break BeforeRet;
			}
			
			break;
		case 3:
			F.line = 203;
			m_35857[m_35857_Idx].pos.Field1 = subInt(m_35857[m_35857_Idx].pos.Field1, 1);
			if (!(posVerify_35689(m_35857, m_35857_Idx, board_35858))) {
			F.line = 205;
			m_35857[m_35857_Idx].pos.Field1 = addInt(m_35857[m_35857_Idx].pos.Field1, 1);
			F.line = 206;
			result_35860 = false;
			break BeforeRet;
			}
			
			break;
		case 1:
			F.line = 208;
			m_35857[m_35857_Idx].pos.Field0 = addInt(m_35857[m_35857_Idx].pos.Field0, 1);
			if (!(posVerify_35689(m_35857, m_35857_Idx, board_35858))) {
			F.line = 210;
			m_35857[m_35857_Idx].pos.Field0 = subInt(m_35857[m_35857_Idx].pos.Field0, 1);
			F.line = 211;
			result_35860 = false;
			break BeforeRet;
			}
			
			break;
		case 0:
			F.line = 213;
			result_35860 = false;
			break BeforeRet;
			break;
		}
		F.line = 214;
		result_35860 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35860;

}

function dropStep(f_35922, f_35922_Idx) {
	var F={procname:"tetris.dropStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		if ((modInt(f_35922[f_35922_Idx].frame, 180) == 0)) {
		if (!(move_35854(f_35922[f_35922_Idx], "am", f_35922[f_35922_Idx].board, 1))) {
		F.line = 223;
		fixAM_35915(f_35922, f_35922_Idx);
		}
		
		}
		
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function X5BX5D__35973(s_35980, x_35983) {
	var result_35985 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		var a_36001 = x_35983.a;
		F.line = 3606;
		var L_36207 = addInt(subInt(subInt((s_35980 != null ? s_35980.length : 0), x_35983.b), a_36001), 1);
		F.line = 3607;
		result_35985 = new Array(chckRange(L_36207, 0, 2147483647)); for (var i=0;i<chckRange(L_36207, 0, 2147483647);++i) {result_35985[i]=null;}		L1: do {
			F.line = 3608;
			var i_36226 = 0;
			F.line = 3519;
			var i_36234 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_36234 < L_36207)) break L3;
						F.line = 3521;
						i_36226 = i_36234;
						F.line = 3608;
						result_35985[chckIndx(i_36226, 0, result_35985.length+0-1)-0] = s_35980[chckIndx(addInt(i_36226, a_36001), 0, s_35980.length+0-1)-0];
						F.line = 3522;
						i_36234 = addInt(i_36234, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_35985;

}

function dotdot__35943(a_35948, b_35950) {
	var result_35958 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_35958.a = a_35948;
		F.line = 326;
		result_35958.b = b_35950;
	framePtr = F.prev;

	return result_35958;

}

function pop0_35936(ms_35940, ms_35940_Idx) {
	var result_35941 = null;

	var F={procname:"tetris.pop0",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 237;
		result_35941 = ms_35940[ms_35940_Idx][chckIndx(0, 0, ms_35940[ms_35940_Idx].length+0-1)-0];
		F.line = 238;
		ms_35940[ms_35940_Idx] = nimCopy(null, X5BX5D__35973(ms_35940[ms_35940_Idx], dotdot__35943(1, 1)), NTI35984);
	framePtr = F.prev;

	return result_35941;

}

function add_36264(x_36270, x_36270_Idx, y_36273) {
	var F={procname:"add.add",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 1528;
		var xl_36281 = (x_36270[x_36270_Idx] != null ? x_36270[x_36270_Idx].length : 0);
		F.line = 1529;
		if (x_36270[x_36270_Idx].length < chckRange(addInt(xl_36281, (y_36273 != null ? y_36273.length : 0)), 0, 2147483647)) { for (var i=x_36270[x_36270_Idx].length;i<chckRange(addInt(xl_36281, (y_36273 != null ? y_36273.length : 0)), 0, 2147483647);++i) x_36270[x_36270_Idx].push(null); }
               else { x_36270[x_36270_Idx].length = chckRange(addInt(xl_36281, (y_36273 != null ? y_36273.length : 0)), 0, 2147483647); };
		L1: do {
			F.line = 1530;
			var i_36313 = 0;
			F.line = 2042;
			var colontmp__36315 = 0;
			F.line = 1530;
			colontmp__36315 = (y_36273 != null ? (y_36273.length-1) : -1);
			F.line = 2045;
			var res_36318 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_36318 <= colontmp__36315)) break L3;
						F.line = 2047;
						i_36313 = res_36318;
						F.line = 1530;
						x_36270[x_36270_Idx][chckIndx(addInt(xl_36281, i_36313), 0, x_36270[x_36270_Idx].length+0-1)-0] = y_36273[chckIndx(i_36313, 0, y_36273.length+0-1)-0];
						F.line = 2048;
						res_36318 = addInt(res_36318, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function shuffled_35930(arr_35933) {
	var result_35935 = null;

	var F={procname:"tetris.shuffled",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 230;
		result_35935 = nimCopy(null, arr_35933, NTI35932);
		F.line = 231;
		shuffle(result_35935);
	framePtr = F.prev;

	return result_35935;

}

function renderBox_35476(m_35479, m_35479_Idx) {

											function setBox_35480(b_35483, b_35483_Idx, m_35484, i_35485, j_35486, t_35487, s_35488) {
													var Tmp1;

												var F={procname:"renderBox.setBox",prev:framePtr,filename:"tetris.nim",line:0};
												framePtr = F;
													F.line = 115;
													if (m_35484.kind.shape[chckIndx(i_35485, 0, m_35484.kind.shape.length+0-1)-0][chckIndx(j_35486, 0, m_35484.kind.shape[chckIndx(i_35485, 0, m_35484.kind.shape.length+0-1)-0].length+0-1)-0]) {
													Tmp1 = m_35484.kind.color;
													}
													else {
													Tmp1 = 0;
													}
													
													var itsColor_35489 = Tmp1;
													F.line = 116;
													b_35483[b_35483_Idx][chckIndx(t_35487, 0, b_35483[b_35483_Idx].length+0-1)-0][chckIndx(s_35488, 0, b_35483[b_35483_Idx][chckIndx(t_35487, 0, b_35483[b_35483_Idx].length+0-1)-0].length+0-1)-0] = {isFilled: m_35484.kind.shape[chckIndx(i_35485, 0, m_35484.kind.shape.length+0-1)-0][chckIndx(j_35486, 0, m_35484.kind.shape[chckIndx(i_35485, 0, m_35484.kind.shape.length+0-1)-0].length+0-1)-0], color: itsColor_35489};
												framePtr = F.prev;

												
											}

	var F={procname:"tetris.renderBox",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 118;
		var l_35498 = subInt((m_35479[m_35479_Idx].kind.shape != null ? m_35479[m_35479_Idx].kind.shape.length : 0), 1);
		F.line = 120;
		var b_35499 = [null];
		F.line = 121;
		var bb_35501 = null;
		L1: do {
			F.line = 122;
			var i_35510 = 0;
			F.line = 2045;
			var res_35629 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_35629 <= l_35498)) break L3;
						F.line = 2047;
						i_35510 = res_35629;
						L4: do {
							F.line = 123;
							var j_35519 = 0;
							F.line = 2045;
							var res_35623 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_35623 <= l_35498)) break L6;
										F.line = 2047;
										j_35519 = res_35623;
										F.line = 124;
										if (bb_35501 != null) { bb_35501.push({isFilled: false, color: 0}); } else { bb_35501 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_35623 = addInt(res_35623, 1);
									}
							} while(false);
						} while(false);
						F.line = 125;
						var Tmp7 = nimCopy(null, bb_35501, NTI35500);
						if (b_35499[0] != null) { b_35499[0].push(Tmp7); } else { b_35499[0] = [Tmp7]; };
						F.line = 2048;
						res_35629 = addInt(res_35629, 1);
					}
			} while(false);
		} while(false);
		F.line = 127;
		switch (m_35479[m_35479_Idx].dir) {
		case 0:
			L8: do {
				F.line = 129;
				var i_35548 = 0;
				F.line = 2045;
				var res_35643 = 0;
				L9: do {
					F.line = 2046;
						L10: while (true) {
						if (!(res_35643 <= l_35498)) break L10;
							F.line = 2047;
							i_35548 = res_35643;
							L11: do {
								F.line = 130;
								var j_35557 = 0;
								F.line = 2045;
								var res_35637 = 0;
								L12: do {
									F.line = 2046;
										L13: while (true) {
										if (!(res_35637 <= l_35498)) break L13;
											F.line = 2047;
											j_35557 = res_35637;
											F.line = 131;
											setBox_35480(b_35499, 0, m_35479[m_35479_Idx], i_35548, j_35557, i_35548, j_35557);
											F.line = 2048;
											res_35637 = addInt(res_35637, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35643 = addInt(res_35643, 1);
						}
				} while(false);
			} while(false);
			break;
		case 1:
			L14: do {
				F.line = 133;
				var i_35567 = 0;
				F.line = 2045;
				var res_35657 = 0;
				L15: do {
					F.line = 2046;
						L16: while (true) {
						if (!(res_35657 <= l_35498)) break L16;
							F.line = 2047;
							i_35567 = res_35657;
							L17: do {
								F.line = 134;
								var j_35576 = 0;
								F.line = 2045;
								var res_35651 = 0;
								L18: do {
									F.line = 2046;
										L19: while (true) {
										if (!(res_35651 <= l_35498)) break L19;
											F.line = 2047;
											j_35576 = res_35651;
											F.line = 135;
											setBox_35480(b_35499, 0, m_35479[m_35479_Idx], i_35567, j_35576, j_35576, subInt(l_35498, i_35567));
											F.line = 2048;
											res_35651 = addInt(res_35651, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35657 = addInt(res_35657, 1);
						}
				} while(false);
			} while(false);
			break;
		case 2:
			L20: do {
				F.line = 137;
				var i_35586 = 0;
				F.line = 2045;
				var res_35671 = 0;
				L21: do {
					F.line = 2046;
						L22: while (true) {
						if (!(res_35671 <= l_35498)) break L22;
							F.line = 2047;
							i_35586 = res_35671;
							L23: do {
								F.line = 138;
								var j_35595 = 0;
								F.line = 2045;
								var res_35665 = 0;
								L24: do {
									F.line = 2046;
										L25: while (true) {
										if (!(res_35665 <= l_35498)) break L25;
											F.line = 2047;
											j_35595 = res_35665;
											F.line = 139;
											setBox_35480(b_35499, 0, m_35479[m_35479_Idx], i_35586, j_35595, subInt(l_35498, i_35586), subInt(l_35498, j_35595));
											F.line = 2048;
											res_35665 = addInt(res_35665, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35671 = addInt(res_35671, 1);
						}
				} while(false);
			} while(false);
			break;
		case 3:
			L26: do {
				F.line = 141;
				var i_35605 = 0;
				F.line = 2045;
				var res_35685 = 0;
				L27: do {
					F.line = 2046;
						L28: while (true) {
						if (!(res_35685 <= l_35498)) break L28;
							F.line = 2047;
							i_35605 = res_35685;
							L29: do {
								F.line = 142;
								var j_35614 = 0;
								F.line = 2045;
								var res_35679 = 0;
								L30: do {
									F.line = 2046;
										L31: while (true) {
										if (!(res_35679 <= l_35498)) break L31;
											F.line = 2047;
											j_35614 = res_35679;
											F.line = 143;
											setBox_35480(b_35499, 0, m_35479[m_35479_Idx], i_35605, j_35614, subInt(l_35498, j_35614), i_35605);
											F.line = 2048;
											res_35679 = addInt(res_35679, 1);
										}
								} while(false);
							} while(false);
							F.line = 2048;
							res_35685 = addInt(res_35685, 1);
						}
				} while(false);
			} while(false);
			break;
		}
		F.line = 145;
		m_35479[m_35479_Idx].boxs = nimCopy(null, b_35499[0], NTI35021);
	framePtr = F.prev;

	
}

function dropStart(f_36240, f_36240_Idx) {
	var F={procname:"tetris.dropStart",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 241;
		var mino_36242 = pop0_35936(f_36240[f_36240_Idx], "minos");
		if (((f_36240[f_36240_Idx].minos != null ? f_36240[f_36240_Idx].minos.length : 0) < 4)) {
		F.line = 243;
		add_36264(f_36240[f_36240_Idx], "minos", shuffled_35930([I_35179[0], O_35218[0], S_35268[0], Z_35318[0], J_35368[0], L_35418[0], T_35468[0]]));
		}
		
		F.line = 244;
		f_36240[f_36240_Idx].am = {pos: nimCopy(null, mino_36242.firstPos, NTI35017), kind: mino_36242, dir: 0, boxs: null};
		F.line = 245;
		renderBox_35476(f_36240[f_36240_Idx], "am");
		if (!(posVerify_35689(f_36240[f_36240_Idx], "am", f_36240[f_36240_Idx].board))) {
		F.line = 246;
		gameOver_35924();
		}
		
	framePtr = F.prev;

	
}
var F_38415 = [null];

function gameInit() {
	var F={procname:"tetris.gameInit",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 289;
		var board_38423 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
		L1: do {
			F.line = 291;
			var i_38432 = 0;
			F.line = 3519;
			var i_38477 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_38477 < 21)) break L3;
						F.line = 3521;
						i_38432 = i_38477;
						F.line = 292;
						board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0][chckIndx(0, 0, board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 294;
						board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0][chckIndx(11, 0, board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						L4: do {
							F.line = 296;
							var j_38441 = 0;
							F.line = 3519;
							var i_38473 = 1;
							L5: do {
								F.line = 3520;
									L6: while (true) {
									if (!(i_38473 < 11)) break L6;
										F.line = 3521;
										j_38441 = i_38473;
										F.line = 297;
										board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0][chckIndx(j_38441, 0, board_38423[chckIndx(i_38432, 0, board_38423.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										F.line = 3522;
										i_38473 = addInt(i_38473, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_38477 = addInt(i_38477, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 299;
			var i_38450 = 0;
			F.line = 3519;
			var i_38483 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_38483 < 12)) break L9;
						F.line = 3521;
						i_38450 = i_38483;
						F.line = 301;
						board_38423[chckIndx(21, 0, board_38423.length+0-1)-0][chckIndx(i_38450, 0, board_38423[chckIndx(21, 0, board_38423.length+0-1)-0].length+0-1)-0] = {isFilled: true, color: 0};
						F.line = 3522;
						i_38483 = addInt(i_38483, 1);
					}
			} while(false);
		} while(false);
		F.line = 304;
		var mns_38463 = [I_35179[0], O_35218[0], S_35268[0], Z_35318[0], J_35368[0], L_35418[0], T_35468[0]];
		F.line = 305;
		shuffle(mns_38463);
		F.line = 306;
		F_38415[0] = {board: nimCopy(null, board_38423, NTI38422), frame: 0, minos: nimCopy(null, mns_38463, NTI36261), score: 0, clearlines: 0, am: null, gm: null};
		F.line = 307;
		dropStart(F_38415, 0);
	framePtr = F.prev;

	
}
var gameOverFlag_38486 = [false];
var buttons_38526 = [nimCopy(null, [], NTI38525)];
L2: do {
	var b_38621 = [0];
	L3: do {
		var v_38638 = 0;
		var res_38640 = 0;
		L4: do {
				L5: while (true) {
				if (!(res_38640 <= 8)) break L5;
					v_38638 = res_38640;
					b_38621[0] = v_38638;
					if (buttons_38526[0] != null) { buttons_38526[0].push({kind: b_38621[0], isPushed: false, contFlames: 0}); } else { buttons_38526[0] = [{kind: b_38621[0], isPushed: false, contFlames: 0}]; };
					res_38640 += 1;
				}
		} while(false);
	} while(false);
} while(false);

function posCorrect_35776(m_35779, m_35779_Idx, board_35780) {
	var result_35781 = false;

	var F={procname:"tetris.posCorrect",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 162;
			var i_35797 = 0;
			F.line = 3518;
			var colontmp__35817 = 0;
			F.line = 162;
			colontmp__35817 = (m_35779[m_35779_Idx].boxs != null ? m_35779[m_35779_Idx].boxs.length : 0);
			F.line = 3519;
			var i_35820 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_35820 < colontmp__35817)) break L3;
						F.line = 3521;
						i_35797 = i_35820;
						F.line = 163;
						m_35779[m_35779_Idx].pos.Field1 = addInt(m_35779[m_35779_Idx].pos.Field1, i_35797);
						if (posVerify_35689(m_35779, m_35779_Idx, board_35780)) {
						F.line = 165;
						result_35781 = true;
						break BeforeRet;
						}
						
						F.line = 166;
						m_35779[m_35779_Idx].pos.Field1 = subInt(m_35779[m_35779_Idx].pos.Field1, mulInt(2, i_35797));
						if (posVerify_35689(m_35779, m_35779_Idx, board_35780)) {
						F.line = 168;
						result_35781 = true;
						break BeforeRet;
						}
						
						F.line = 3522;
						i_35820 = addInt(i_35820, 1);
					}
			} while(false);
		} while(false);
		F.line = 175;
		result_35781 = false;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_35781;

}

function spin_35822(m_35825, m_35825_Idx, a_35828, board_35829) {
	var F={procname:"tetris.spin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 178;
		var pre_dir_35830 = m_35825[m_35825_Idx].dir;
		F.line = 179;
		m_35825[m_35825_Idx].dir = a_35828[chckIndx(m_35825[m_35825_Idx].dir, 0, a_35828.length+0-1)-0];
		F.line = 180;
		renderBox_35476(m_35825, m_35825_Idx);
		if (!(posVerify_35689(m_35825, m_35825_Idx, board_35829))) {
		F.line = 183;
		var pre_pos_35838 = {Field0: m_35825[m_35825_Idx].pos.Field0, Field1: m_35825[m_35825_Idx].pos.Field1};
		if (!(posCorrect_35776(m_35825, m_35825_Idx, board_35829))) {
		F.line = 185;
		var __35839 = nimCopy(null, pre_pos_35838, NTI35837);
		F.line = 185;
		m_35825[m_35825_Idx].pos.Field0 = __35839["Field0"];
		F.line = 185;
		m_35825[m_35825_Idx].pos.Field1 = __35839["Field1"];
		F.line = 186;
		m_35825[m_35825_Idx].dir = pre_dir_35830;
		}
		
		F.line = 187;
		renderBox_35476(m_35825, m_35825_Idx);
		}
		
	framePtr = F.prev;

	
}

function rightSpin_35840(m_35843, m_35843_Idx, board_35844) {
	var F={procname:"tetris.rightSpin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 190;
		spin_35822(m_35843, m_35843_Idx, [1, 2, 3, 0], board_35844);
	framePtr = F.prev;

	
}

function leftSpin_35847(m_35850, m_35850_Idx, board_35851) {
	var F={procname:"tetris.leftSpin",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 193;
		spin_35822(m_35850, m_35850_Idx, [3, 0, 1, 2], board_35851);
	framePtr = F.prev;

	
}

function newSeq_36630(len_36634) {
	var result_36636 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_36636 = new Array(len_36634); for (var i=0;i<len_36634;++i) {result_36636[i]=[null, null, null, null, null, null, null, null, null, null, null, null];}	framePtr = F.prev;

	return result_36636;

}

function X5BX5D__36365(a_36373, x_36376) {
	var result_36378 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_36401 = x_36376.a;
		F.line = 3585;
		var L_36628 = addInt(subInt(subInt(22, x_36376.b), xa_36401), 1);
		F.line = 3586;
		result_36378 = nimCopy(null, newSeq_36630(chckRange(L_36628, 0, 2147483647)), NTI36635);
		L1: do {
			F.line = 3587;
			var i_36655 = 0;
			F.line = 3519;
			var i_36667 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_36667 < L_36628)) break L3;
						F.line = 3521;
						i_36655 = i_36667;
						F.line = 3587;
						nimCopy(result_36378[chckIndx(i_36655, 0, result_36378.length+0-1)-0], a_36373[chckIndx(addInt(i_36655, xa_36401), 0, a_36373.length+0-1)-0], NTI35067);
						F.line = 3522;
						i_36667 = addInt(i_36667, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_36378;

}

function all_36712(s_36717, pred_36722) {
	var result_36723 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_36748 = null;
			F.line = 2185;
			var i_36752 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_36752 < (s_36717 != null ? s_36717.length : 0))) break L3;
						F.line = 2187;
						i_36748 = s_36717[chckIndx(i_36752, 0, s_36717.length+0-1)-0];
						if (!(pred_36722(i_36748))) {
						F.line = 436;
						result_36723 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_36752 = addInt(i_36752, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_36723 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_36723;

}

function X5BX5D__36849(a_36857, x_36860) {
	var result_36862 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_37001 = x_36860.a;
		F.line = 3585;
		var L_37201 = addInt(subInt(x_36860.b, xa_37001), 1);
		F.line = 3586;
		result_36862 = nimCopy(null, newSeq_36630(chckRange(L_37201, 0, 2147483647)), NTI36635);
		L1: do {
			F.line = 3587;
			var i_37217 = 0;
			F.line = 3519;
			var i_37229 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_37229 < L_37201)) break L3;
						F.line = 3521;
						i_37217 = i_37229;
						F.line = 3587;
						nimCopy(result_36862[chckIndx(i_37217, 0, result_36862.length+0-1)-0], a_36857[chckIndx(addInt(i_37217, xa_37001), 0, a_36857.length+0-1)-0], NTI35067);
						F.line = 3522;
						i_37229 = addInt(i_37229, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_36862;

}

function dotdot__36810(a_36815, b_36817) {
	var result_36825 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 325;
		result_36825.a = a_36815;
		F.line = 326;
		result_36825.b = b_36817;
	framePtr = F.prev;

	return result_36825;

}

function sysFatal_38047(message_38053) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_38055 = null;
		F.line = 2831;
		e_38055 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_38055.message = nimCopy(null, message_38053, NTI138);
		F.line = 2833;
		raiseException(e_38055, "RangeError");
	framePtr = F.prev;

	
}

function X5BX5Deq__37673(a_37682, x_37685, b_37688) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3591;
		var xa_37801 = x_37685.a;
		F.line = 3592;
		var L_38028 = addInt(subInt(subInt(12, x_37685.b), xa_37801), 1);
		if ((L_38028 == (b_37688 != null ? b_37688.length : 0))) {
		L1: do {
			F.line = 3594;
			var i_38043 = 0;
			F.line = 3519;
			var i_38069 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_38069 < L_38028)) break L3;
						F.line = 3521;
						i_38043 = i_38069;
						F.line = 3594;
						a_37682[chckIndx(addInt(i_38043, xa_37801), 0, a_37682.length+0-1)-0] = b_37688[chckIndx(i_38043, 0, b_37688.length+0-1)-0];
						F.line = 3522;
						i_38069 = addInt(i_38069, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 3596;
		sysFatal_38047(makeNimstrLit("different lengths for slice assignment"));
		}
		
	framePtr = F.prev;

	
}

function newSeq_37630(len_37634) {
	var result_37636 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 742;
		result_37636 = new Array(len_37634); for (var i=0;i<len_37634;++i) {result_37636[i]=null;}	framePtr = F.prev;

	return result_37636;

}

function X5BX5D__37298(a_37306, x_37309) {
	var result_37311 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3584;
		var xa_37401 = x_37309.a;
		F.line = 3585;
		var L_37628 = addInt(subInt(subInt(12, x_37309.b), xa_37401), 1);
		F.line = 3586;
		result_37311 = nimCopy(null, newSeq_37630(chckRange(L_37628, 0, 2147483647)), NTI37635);
		L1: do {
			F.line = 3587;
			var i_37655 = 0;
			F.line = 3519;
			var i_37667 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_37667 < L_37628)) break L3;
						F.line = 3521;
						i_37655 = i_37667;
						F.line = 3587;
						result_37311[chckIndx(i_37655, 0, result_37311.length+0-1)-0] = a_37306[chckIndx(addInt(i_37655, xa_37401), 0, a_37306.length+0-1)-0];
						F.line = 3522;
						i_37667 = addInt(i_37667, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_37311;

}

function lineCheck_36327(f_36330, f_36330_Idx) {

							function colonanonymous__36704(b_36706) {
								var result_36707 = false;

								var F={procname:"lineCheck.:anonymous",prev:framePtr,filename:"tetris.nim",line:0};
								framePtr = F;
								BeforeRet: do {
									F.line = 251;
									result_36707 = b_36706.isFilled;
									break BeforeRet;
								} while (false);
								framePtr = F.prev;

								return result_36707;

							}

	var result_36331 = 0;

	var F={procname:"tetris.lineCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 249;
		result_36331 = 0;
		L1: do {
			F.line = 250;
			var i_36701 = 0;
			F.line = 250;
			var line_36702 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2283;
			var colontmp__38179 = null;
			F.line = 250;
			colontmp__38179 = X5BX5D__36365(f_36330[f_36330_Idx].board, dotdot__35943(0, 2));
			F.line = 2285;
			var i_38182 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38182 < (colontmp__38179 != null ? colontmp__38179.length : 0))) break L3;
						F.line = 2287;
						i_36701 = i_38182;
						F.line = 2287;
						nimCopy(line_36702, colontmp__38179[chckIndx(i_38182, 0, colontmp__38179.length+0-1)-0], NTI35067);
						if (all_36712(line_36702, colonanonymous__36704)) {
						F.line = 252;
						result_36331 = addInt(result_36331, 1);
						L4: do {
							F.line = 253;
							var t_37244 = 0;
							F.line = 253;
							var line_37245 = [null, null, null, null, null, null, null, null, null, null, null, null];
							F.line = 2283;
							var colontmp__38164 = null;
							F.line = 253;
							colontmp__38164 = X5BX5D__36849(f_36330[f_36330_Idx].board, dotdot__36810(0, subInt(i_36701, 1)));
							F.line = 2285;
							var i_38167 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38167 < (colontmp__38164 != null ? colontmp__38164.length : 0))) break L6;
										F.line = 2287;
										t_37244 = i_38167;
										F.line = 2287;
										nimCopy(line_37245, colontmp__38164[chckIndx(i_38167, 0, colontmp__38164.length+0-1)-0], NTI35067);
										F.line = 254;
										X5BX5Deq__37673(f_36330[f_36330_Idx].board[chckIndx(addInt(t_37244, 1), 0, f_36330[f_36330_Idx].board.length+0-1)-0], dotdot__35943(1, 2), X5BX5D__37298(line_37245, dotdot__35943(1, 2)));
										F.line = 2288;
										i_38167 = addInt(i_38167, 1);
									}
							} while(false);
						} while(false);
						F.line = 255;
						F.line = 255;
						var ln_38108 = nimCopy(null, [], NTI38107);
						L7: do {
							F.line = 255;
							var __38118 = 0;
							F.line = 2045;
							var res_38174 = 0;
							L8: do {
								F.line = 2046;
									L9: while (true) {
									if (!(res_38174 <= 9)) break L9;
										F.line = 2047;
										__38118 = res_38174;
										F.line = 255;
										if (ln_38108 != null) { ln_38108.push({isFilled: false, color: 0}); } else { ln_38108 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_38174 = addInt(res_38174, 1);
									}
							} while(false);
						} while(false);
						X5BX5Deq__37673(f_36330[f_36330_Idx].board[chckIndx(0, 0, f_36330[f_36330_Idx].board.length+0-1)-0], dotdot__35943(1, 2), ln_38108);
						}
						
						F.line = 2288;
						i_38182 = addInt(i_38182, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_36331;

}

function fixAM_35915(f_35918, f_35918_Idx) {
	var F={procname:"tetris.fixAM",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(posVerify_35689(f_35918[f_35918_Idx], "am", f_35918[f_35918_Idx].board))) {
		F.line = 258;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 259;
			var i_38201 = 0;
			F.line = 259;
			var bs_38202 = null;
			F.line = 2283;
			var colontmp__38244 = null;
			F.line = 259;
			colontmp__38244 = f_35918[f_35918_Idx].am.boxs;
			F.line = 2285;
			var i_38247 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38247 < (colontmp__38244 != null ? colontmp__38244.length : 0))) break L3;
						F.line = 2287;
						i_38201 = i_38247;
						F.line = 2287;
						bs_38202 = colontmp__38244[chckIndx(i_38247, 0, colontmp__38244.length+0-1)-0];
						L4: do {
							F.line = 260;
							var j_38216 = 0;
							F.line = 260;
							var b_38217 = null;
							F.line = 2285;
							var i_38243 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38243 < (bs_38202 != null ? bs_38202.length : 0))) break L6;
										F.line = 2287;
										j_38216 = i_38243;
										F.line = 2287;
										b_38217 = bs_38202[chckIndx(i_38243, 0, bs_38202.length+0-1)-0];
										if (b_38217.isFilled) {
										F.line = 262;
										f_35918[f_35918_Idx].board[chckIndx(addInt(f_35918[f_35918_Idx].am.pos.Field0, i_38201), 0, f_35918[f_35918_Idx].board.length+0-1)-0][chckIndx(addInt(f_35918[f_35918_Idx].am.pos.Field1, j_38216), 0, f_35918[f_35918_Idx].board[chckIndx(addInt(f_35918[f_35918_Idx].am.pos.Field0, i_38201), 0, f_35918[f_35918_Idx].board.length+0-1)-0].length+0-1)-0] = b_38217;
										}
										
										F.line = 2288;
										i_38243 = addInt(i_38243, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_38247 = addInt(i_38247, 1);
					}
			} while(false);
		} while(false);
		F.line = 264;
		var cllines_38218 = lineCheck_36327(f_35918, f_35918_Idx);
		F.line = 265;
		f_35918[f_35918_Idx].clearlines = addInt(f_35918[f_35918_Idx].clearlines, cllines_38218);
		F.line = 266;
		f_35918[f_35918_Idx].score = addInt(f_35918[f_35918_Idx].score, [0, 1, 3, 6, 10][chckIndx(cllines_38218, 0, [0, 1, 3, 6, 10].length+0-1)-0]);
		F.line = 267;
		dropStart(f_35918, f_35918_Idx);
	} while (false);
	framePtr = F.prev;

	
}

function buttonCheck_38641(c_38645) {
			var Tmp4;
			var Tmp5;

	var F={procname:"tetris.buttonCheck",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 327;
			var i_38699 = 0;
			F.line = 327;
			var b_38700 = false;
			F.line = 2266;
			var i_38850 = 0;
			if ((i_38850 <= 7)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_38699 = i_38850;
						F.line = 2269;
						b_38700 = c_38645[chckIndx(i_38850, 0, c_38645.length+0-1)-0];
						if (!(b_38700)) {
						F.line = 329;
						buttons_38526[0][chckIndx(i_38699, 0, buttons_38526[0].length+0-1)-0].isPushed = false;
						F.line = 330;
						buttons_38526[0][chckIndx(i_38699, 0, buttons_38526[0].length+0-1)-0].contFlames = 0;
						}
						
						if ((7 <= i_38850)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_38850 = addInt(i_38850, 1);
					}
			} while(false);
			}
			
		} while(false);
		if (c_38645[chckIndx(1, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38526[0][chckIndx(1, 0, buttons_38526[0].length+0-1)-0].isPushed)) {
		F.line = 334;
		rightSpin_35840(F_38415[0], "am", F_38415[0].board);
		F.line = 335;
		buttons_38526[0][chckIndx(1, 0, buttons_38526[0].length+0-1)-0].isPushed = true;
		}
		
		}
		else {
		if (c_38645[chckIndx(2, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38526[0][chckIndx(2, 0, buttons_38526[0].length+0-1)-0].isPushed)) {
		F.line = 338;
		leftSpin_35847(F_38415[0], "am", F_38415[0].board);
		F.line = 339;
		buttons_38526[0][chckIndx(2, 0, buttons_38526[0].length+0-1)-0].isPushed = true;
		}
		
		}
		}
		if (c_38645[chckIndx(6, 0, c_38645.length+0-1)-0]) {
			if (!(buttons_38526[0][chckIndx(6, 0, buttons_38526[0].length+0-1)-0].isPushed)) Tmp4 = true; else {				Tmp4 = (30 < buttons_38526[0][chckIndx(6, 0, buttons_38526[0].length+0-1)-0].contFlames);			}		if (Tmp4) {
		F.line = 343;
		move_35854(F_38415[0], "am", F_38415[0].board, 2);
		F.line = 344;
		buttons_38526[0][chckIndx(6, 0, buttons_38526[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 346;
		buttons_38526[0][chckIndx(6, 0, buttons_38526[0].length+0-1)-0].contFlames = addInt(buttons_38526[0][chckIndx(6, 0, buttons_38526[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		else {
		if (c_38645[chckIndx(7, 0, c_38645.length+0-1)-0]) {
			if (!(buttons_38526[0][chckIndx(7, 0, buttons_38526[0].length+0-1)-0].isPushed)) Tmp5 = true; else {				Tmp5 = (30 < buttons_38526[0][chckIndx(7, 0, buttons_38526[0].length+0-1)-0].contFlames);			}		if (Tmp5) {
		F.line = 349;
		move_35854(F_38415[0], "am", F_38415[0].board, 3);
		F.line = 350;
		buttons_38526[0][chckIndx(7, 0, buttons_38526[0].length+0-1)-0].isPushed = true;
		}
		else {
			F.line = 352;
		buttons_38526[0][chckIndx(7, 0, buttons_38526[0].length+0-1)-0].contFlames = addInt(buttons_38526[0][chckIndx(7, 0, buttons_38526[0].length+0-1)-0].contFlames, 1);
		}
		
		}
		}
		if (c_38645[chckIndx(5, 0, c_38645.length+0-1)-0]) {
		F.line = 355;
		move_35854(F_38415[0], "am", F_38415[0].board, 1);
		}
		
		if (c_38645[chckIndx(3, 0, c_38645.length+0-1)-0]) {
		if (!(buttons_38526[0][chckIndx(3, 0, buttons_38526[0].length+0-1)-0].isPushed)) {
		L6: do {
			F.line = 359;
				L7: while (true) {
				if (!move_35854(F_38415[0], "am", F_38415[0].board, 1)) break L7;
				}
		} while(false);
		F.line = 360;
		fixAM_35915(F_38415, 0);
		F.line = 361;
		buttons_38526[0][chckIndx(3, 0, buttons_38526[0].length+0-1)-0].isPushed = true;
		}
		
		}
		
	framePtr = F.prev;

	
}

function gameStep(c_38856) {
	var F={procname:"tetris.gameStep",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (gameOverFlag_38486[0]) {
		F.line = 364;
		break BeforeRet;
		}
		
		F.line = 366;
		buttonCheck_38641(c_38856);
		F.line = 367;
		F_38415[0].frame = addInt(F_38415[0].frame, 1);
		F.line = 368;
		dropStep(F_38415, 0);
	} while (false);
	framePtr = F.prev;

	
}

function fixGhost_38248(f_38251, f_38251_Idx) {
	var F={procname:"tetris.fixGhost",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 270;
			var i_38305 = 0;
			F.line = 270;
			var line_38306 = [null, null, null, null, null, null, null, null, null, null, null, null];
			F.line = 2264;
			var colontmp__38400 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];
			F.line = 270;
			nimCopy(colontmp__38400, f_38251[f_38251_Idx].board, NTI35023);
			F.line = 2266;
			var i_38403 = 0;
			if ((i_38403 <= 21)) {
			L2: do {
				F.line = 2268;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2269;
						i_38305 = i_38403;
						F.line = 2269;
						nimCopy(line_38306, colontmp__38400[chckIndx(i_38403, 0, colontmp__38400.length+0-1)-0], NTI35067);
						L4: do {
							F.line = 271;
							var j_38360 = 0;
							F.line = 271;
							var b_38361 = null;
							F.line = 2266;
							var i_38399 = 0;
							if ((i_38399 <= 11)) {
							L5: do {
								F.line = 2268;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2269;
										j_38360 = i_38399;
										F.line = 2269;
										b_38361 = line_38306[chckIndx(i_38399, 0, line_38306.length+0-1)-0];
										if (!(b_38361.isFilled)) {
										F.line = 273;
										f_38251[f_38251_Idx].board[chckIndx(i_38305, 0, f_38251[f_38251_Idx].board.length+0-1)-0][chckIndx(j_38360, 0, f_38251[f_38251_Idx].board[chckIndx(i_38305, 0, f_38251[f_38251_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 0};
										}
										
										if ((11 <= i_38399)) {
										F.line = 2270;
										break L5;
										}
										
										F.line = 2271;
										i_38399 = addInt(i_38399, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((21 <= i_38403)) {
						F.line = 2270;
						break L2;
						}
						
						F.line = 2271;
						i_38403 = addInt(i_38403, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 274;
		var x_38362 = f_38251[f_38251_Idx].am.pos.Field0;
		L7: do {
			F.line = 275;
				L8: while (true) {
				if (!move_35854(f_38251[f_38251_Idx], "am", f_38251[f_38251_Idx].board, 1)) break L8;
				}
		} while(false);
		L9: do {
			F.line = 276;
			var i_38377 = 0;
			F.line = 276;
			var bs_38378 = null;
			F.line = 2283;
			var colontmp__38411 = null;
			F.line = 276;
			colontmp__38411 = f_38251[f_38251_Idx].am.boxs;
			F.line = 2285;
			var i_38414 = 0;
			L10: do {
				F.line = 2286;
					L11: while (true) {
					if (!(i_38414 < (colontmp__38411 != null ? colontmp__38411.length : 0))) break L11;
						F.line = 2287;
						i_38377 = i_38414;
						F.line = 2287;
						bs_38378 = colontmp__38411[chckIndx(i_38414, 0, colontmp__38411.length+0-1)-0];
						L12: do {
							F.line = 277;
							var j_38392 = 0;
							F.line = 277;
							var b_38393 = null;
							F.line = 2285;
							var i_38410 = 0;
							L13: do {
								F.line = 2286;
									L14: while (true) {
									if (!(i_38410 < (bs_38378 != null ? bs_38378.length : 0))) break L14;
										F.line = 2287;
										j_38392 = i_38410;
										F.line = 2287;
										b_38393 = bs_38378[chckIndx(i_38410, 0, bs_38378.length+0-1)-0];
										if (b_38393.isFilled) {
										F.line = 279;
										f_38251[f_38251_Idx].board[chckIndx(addInt(f_38251[f_38251_Idx].am.pos.Field0, i_38377), 0, f_38251[f_38251_Idx].board.length+0-1)-0][chckIndx(addInt(f_38251[f_38251_Idx].am.pos.Field1, j_38392), 0, f_38251[f_38251_Idx].board[chckIndx(addInt(f_38251[f_38251_Idx].am.pos.Field0, i_38377), 0, f_38251[f_38251_Idx].board.length+0-1)-0].length+0-1)-0] = {isFilled: false, color: 8};
										}
										
										F.line = 2288;
										i_38410 = addInt(i_38410, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_38414 = addInt(i_38414, 1);
					}
			} while(false);
		} while(false);
		F.line = 280;
		f_38251[f_38251_Idx].am.pos.Field0 = x_38362;
	framePtr = F.prev;

	
}

function getBoard() {
	var result_38869 = [[null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null]];

	var F={procname:"tetris.getBoard",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 372;
		var board_38870 = nimCopy(null, F_38415[0].board, NTI35023);
		F.line = 373;
		var am_38871 = F_38415[0].am;
		F.line = 375;
		fixGhost_38248(F_38415, 0);
		L1: do {
			F.line = 376;
			var i_38886 = 0;
			F.line = 376;
			var bs_38887 = null;
			F.line = 2283;
			var colontmp__38908 = null;
			F.line = 376;
			colontmp__38908 = am_38871.boxs;
			F.line = 2285;
			var i_38911 = 0;
			L2: do {
				F.line = 2286;
					L3: while (true) {
					if (!(i_38911 < (colontmp__38908 != null ? colontmp__38908.length : 0))) break L3;
						F.line = 2287;
						i_38886 = i_38911;
						F.line = 2287;
						bs_38887 = colontmp__38908[chckIndx(i_38911, 0, colontmp__38908.length+0-1)-0];
						L4: do {
							F.line = 377;
							var j_38901 = 0;
							F.line = 377;
							var b_38902 = null;
							F.line = 2285;
							var i_38907 = 0;
							L5: do {
								F.line = 2286;
									L6: while (true) {
									if (!(i_38907 < (bs_38887 != null ? bs_38887.length : 0))) break L6;
										F.line = 2287;
										j_38901 = i_38907;
										F.line = 2287;
										b_38902 = bs_38887[chckIndx(i_38907, 0, bs_38887.length+0-1)-0];
										if (b_38902.isFilled) {
										F.line = 379;
										board_38870[chckIndx(addInt(am_38871.pos.Field0, i_38886), 0, board_38870.length+0-1)-0][chckIndx(addInt(am_38871.pos.Field1, j_38901), 0, board_38870[chckIndx(addInt(am_38871.pos.Field0, i_38886), 0, board_38870.length+0-1)-0].length+0-1)-0] = b_38902;
										}
										
										F.line = 2288;
										i_38907 = addInt(i_38907, 1);
									}
							} while(false);
						} while(false);
						F.line = 2288;
						i_38911 = addInt(i_38911, 1);
					}
			} while(false);
		} while(false);
		F.line = 380;
		nimCopy(result_38869, board_38870, NTI35023);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_38869;

}

function getScore() {
	var result_38914 = 0;

	var F={procname:"tetris.getScore",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 383;
		result_38914 = F_38415[0].score;
	framePtr = F.prev;

	return result_38914;

}

function getClearLines() {
	var result_38917 = 0;

	var F={procname:"tetris.getClearLines",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 386;
		result_38917 = F_38415[0].clearlines;
	framePtr = F.prev;

	return result_38917;

}

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function getNext() {
										var Tmp14;

	var result_38920 = null;

	var F={procname:"tetris.getNext",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 390;
		var m_38921 = F_38415[0].minos[chckIndx(0, 0, F_38415[0].minos.length+0-1)-0];
		F.line = 391;
		var p0_38929 = modInt(((slash__22207((m_38921.shape != null ? m_38921.shape.length : 0), 2))|0), 2);
		F.line = 392;
		result_38920 = nimCopy(null, [], NTI38944);
		L1: do {
			F.line = 393;
			var __38953 = 0;
			F.line = 2045;
			var res_39045 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_39045 <= 3)) break L3;
						F.line = 2047;
						__38953 = res_39045;
						F.line = 394;
						var tmp_38970 = nimCopy(null, [], NTI38969);
						L4: do {
							F.line = 395;
							var __38979 = 0;
							F.line = 2045;
							var res_39039 = 0;
							L5: do {
								F.line = 2046;
									L6: while (true) {
									if (!(res_39039 <= 3)) break L6;
										F.line = 2047;
										__38979 = res_39039;
										F.line = 396;
										if (tmp_38970 != null) { tmp_38970.push({isFilled: false, color: 0}); } else { tmp_38970 = [{isFilled: false, color: 0}]; };
										F.line = 2048;
										res_39039 = addInt(res_39039, 1);
									}
							} while(false);
						} while(false);
						F.line = 397;
						var Tmp7 = nimCopy(null, tmp_38970, NTI38954);
						if (result_38920 != null) { result_38920.push(Tmp7); } else { result_38920 = [Tmp7]; };
						F.line = 2048;
						res_39045 = addInt(res_39045, 1);
					}
			} while(false);
		} while(false);
		L8: do {
			F.line = 398;
			var i_39015 = 0;
			F.line = 3518;
			var colontmp__39057 = 0;
			F.line = 398;
			colontmp__39057 = (m_38921.shape != null ? m_38921.shape.length : 0);
			F.line = 3519;
			var i_39060 = 0;
			L9: do {
				F.line = 3520;
					L10: while (true) {
					if (!(i_39060 < colontmp__39057)) break L10;
						F.line = 3521;
						i_39015 = i_39060;
						L11: do {
							F.line = 399;
							var j_39031 = 0;
							F.line = 3518;
							var colontmp__39052 = 0;
							F.line = 399;
							colontmp__39052 = (m_38921.shape != null ? m_38921.shape.length : 0);
							F.line = 3519;
							var i_39055 = 0;
							L12: do {
								F.line = 3520;
									L13: while (true) {
									if (!(i_39055 < colontmp__39052)) break L13;
										F.line = 3521;
										j_39031 = i_39055;
										F.line = 400;
										if (m_38921.shape[chckIndx(i_39015, 0, m_38921.shape.length+0-1)-0][chckIndx(j_39031, 0, m_38921.shape[chckIndx(i_39015, 0, m_38921.shape.length+0-1)-0].length+0-1)-0]) {
										Tmp14 = m_38921.color;
										}
										else {
										Tmp14 = 0;
										}
										
										result_38920[chckIndx(addInt(p0_38929, i_39015), 0, result_38920.length+0-1)-0][chckIndx(addInt(p0_38929, j_39031), 0, result_38920[chckIndx(addInt(p0_38929, i_39015), 0, result_38920.length+0-1)-0].length+0-1)-0] = {isFilled: m_38921.shape[chckIndx(i_39015, 0, m_38921.shape.length+0-1)-0][chckIndx(j_39031, 0, m_38921.shape[chckIndx(i_39015, 0, m_38921.shape.length+0-1)-0].length+0-1)-0], color: Tmp14};
										F.line = 3522;
										i_39055 = addInt(i_39055, 1);
									}
							} while(false);
						} while(false);
						F.line = 3522;
						i_39060 = addInt(i_39060, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_38920;

}

function gameOver_35924() {
	var F={procname:"tetris.gameOver",prev:framePtr,filename:"tetris.nim",line:0};
	framePtr = F;
		F.line = 403;
		gameOverFlag_38486[0] = true;
		F.line = 404;
		alert("gameOver!");
	framePtr = F.prev;

	
}
